{"version":3,"sources":["static/image/carousel-samples sync /^/.*$","static/image/carousel-samples/img-1-de.png","static/image/carousel-samples/img-1-en.png","static/image/carousel-samples/img-2-de.png","static/image/carousel-samples/img-2-en.png","static/image/carousel-samples/img-3-de.png","static/image/carousel-samples/img-3-en.png","static/image/carousel-samples/img-4-de.png","static/image/carousel-samples/img-4-en.png","static/image/carousel-samples/img-5-de.png","static/image/carousel-samples/img-5-en.png","static/image/carousel-samples/img-6-de.png","static/image/carousel-samples/img-6-en.png","static/image/start-buttons sync /^/.*$","static/image/start-buttons/StartImg1.jpg","static/image/start-buttons/StartImg2.jpg","static/image/start-buttons/StartImg3.jpg","static/image/start-buttons/StartImg4.jpg","static/image/intro-screens sync /^/.*$","static/image/intro-screens/img-1-de.png","static/image/intro-screens/img-1-en.png","static/image/intro-screens/img-2-de.png","static/image/intro-screens/img-2-en.png","static/image/intro-screens/img-3-de.png","static/image/intro-screens/img-3-en.png","static/image/intro-screens/img-4-de.png","static/image/intro-screens/img-4-en.png","static/image/intro-screens/img-5-de.png","static/image/intro-screens/img-5-en.png","service/NutrientDataImportService.ts","service/NutrientDataDecompressor.ts","config/Constants.ts","config/ApplicationSetting.ts","service/LanguageService.ts","service/nutrientdata/NameTypeService.ts","service/uri/BaseUriService.ts","contexts/LangContext.tsx","static/labels.ts","config/ChartConfig.ts","service/ChartConfigurationService.ts","components/charthelper/PieChartConfigurationForm.tsx","service/WindowDimension.ts","components/charthelper/CustomLegend.tsx","service/nutrientdata/NutrientDataRetriever.ts","service/calculation/MathService.ts","service/chartdata/BaseChartDataService.ts","components/fooddatapanel/charts/BaseDataChart.tsx","config/EnergyConstants.ts","service/calculation/EnergyService.ts","components/fooddatapanel/charts/energy/EnergyLevelChart.tsx","components/fooddatapanel/charts/energy/EnergyCompositionChart.tsx","components/fooddatapanel/charts/energy/AggregatedEnergyChart.tsx","components/fooddatapanel/charts/EnergyDataChart.tsx","components/charthelper/BarChartConfigurationForm.tsx","service/calculation/DietaryRequirementService.ts","service/calculation/provitaminCalculation/ProvitaminEquivalentFactors.ts","service/chartdata/VitaminsMineralsDataService.ts","service/calculation/provitaminCalculation/CarotenoidCalculationService.ts","service/calculation/provitaminCalculation/ExtendedVitaminECalculationService.ts","config/UI_Config.ts","components/fooddatapanel/VitaminBook.tsx","components/fooddatapanel/charts/MineralVitaminChart.tsx","service/chartdata/LipidsChartDataService.ts","components/fooddatapanel/charts/LipidsDataChart.tsx","components/fooddatapanel/charts/ProteinDataChart.tsx","service/chartdata/ProteinChartDataService.ts","service/chartdata/CarbsChartDataService.ts","components/fooddatapanel/charts/CarbsDataChart.tsx","service/RankingService.ts","service/calculation/NutrientCalculationService.ts","service/chartdata/JuxtapositionDataService.ts","components/fooddatapanel/juxtaposition/JuxtapositionChart.tsx","components/fooddatapanel/juxtaposition/JuxtapositionTable.tsx","components/fooddatapanel/juxtaposition/JustapositionSettings.tsx","components/fooddatapanel/juxtaposition/JuxtapositionContainer.tsx","components/fooddatapanel/ChartPanel.tsx","components/fooddatapanel/FoodDataTable.tsx","service/nutrientdata/FoodItemsService.ts","service/nutrientdata/NutrientStatisticsService.ts","components/fooddatapanel/charts/InfoData.tsx","components/fooddatapanel/FoodDataPageBody.tsx","components/HelpModal.tsx","service/HelpService.ts","components/fooddatapanel/ChartMenuPanel.tsx","components/fooddatapanel/SettingsModal.tsx","components/fooddatapanel/FoodDataPageHeader.tsx","service/TableService.ts","components/fooddatapanel/FoodDataPage.tsx","service/FoodDataPanelService.tsx","contexts/ApplicationDataContext.tsx","static/image/logo.png","static/image/text.png","components/Header.tsx","components/Home.tsx","service/nutrientdata/CategoryService.ts","service/nutrientdata/FoodClassService.ts","service/nutrientdata/PortionDataService.ts","components/UnitConversionModal.tsx","components/foodselector/FoodSelector.tsx","components/foodselector/EditPortionModal.tsx","components/foodselector/CompositeFoodList.tsx","service/calculation/FoodDataAggregationService.ts","components/foodselector/CategoryTreeModal.tsx","service/Source.ts","components/foodselector/filter/NutrientFilterSelection.tsx","service/nutrientdata/FilterService.ts","components/foodselector/filter/FilterModal.tsx","components/foodselector/FoodSelectorModal.tsx","components/ConfirmationDialog.tsx","components/fooddatapanel/OverallView.tsx","components/fooddatapanel/FoodAnalyzerContainer.tsx","components/fooddatapanel/TabContainer.tsx","service/uri/ChartConfigConverter.ts","service/uri/FoodDataPanelUriService.ts","service/uri/FoodDataPanelAggregatedUriService.ts","service/UserDataService.ts","components/fooddatapanel/FoodDataPanelContainer.tsx","components/foodselector/DirectCompareSelector.tsx","service/ChartSizeCalculation.tsx","components/directcompare/VerticalLabel.tsx","components/directcompare/DcMineralVitaminChart.tsx","components/directcompare/DcPieChart.tsx","components/directcompare/DcProteinDataChart.tsx","components/directcompare/DcEnergyChart.tsx","components/directcompare/DirectCompareDataPanel.tsx","service/uri/DirectCompareUriService.ts","components/directcompare/DirectCompareContainer.tsx","components/UserSettings.tsx","config/ErrorMessageCodes.ts","service/MailService.ts","config/ApplicationKeys.ts","components/contact/ContactForm.tsx","components/contact/Sources.tsx","components/contact/Versions.tsx","static/image/impressum-german.png","static/image/impressum-english.png","components/contact/Impressum.tsx","components/contact/DataPrivacy.tsx","components/contact/ContactContainer.tsx","components/ranking/RankingSelector.tsx","service/uri/RankingPanelUriService.ts","components/ranking/RankingChart.tsx","components/ranking/RankingContainer.tsx","components/InfoSiteContainer.tsx","components/WebPageContainer.tsx","components/MobileDeviceCheck.tsx","App.tsx","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","nutrientDataDecompressed","nutrientDataObj","decompressedString","JSON","stringify","foodCompareCompressing","forEach","entry","regExp","RegExp","target","replace","source","parse","decompressNutrientData","nutrientData","loadFoodDataCorpus","categories","conditions","portionTypes","sources","foodNames","foodClasses","foodItems","dietaryRequirements","AMOUNT_PORTION","AMOUNT_100_GRAM","CHART_TYPE_PIE","CHART_TYPE_BAR","CHART_TYPE_COMPOSITION","CHART_TYPE_ENERGY_LEVEL","CHART_TYPE_ENERGY_AGGREGATED","CHART_VITAMINS","CHART_MINERALS","CHART_SIZE_SMALL","CHART_SIZE_MEDIUM","CHART_SIZE_LARGE","DATA_ALCOHOL","DATA_ASH","DATA_CAFFEINE","DATA_ENERGY","DATA_WATER","DATA_CARBS","DATA_LIPIDS","DATA_PROTEINS","DATA_MINERAL_CALCIUM","DATA_MINERAL_IRON","DATA_MINERAL_MAGNESIUM","DATA_MINERAL_PHOSPHORUS","DATA_MINERAL_POTASSIUM","DATA_MINERAL_SODIUM","DATA_MINERAL_ZINC","DATA_MINERAL_SELENIUM","DATA_MINERAL_MANGANESE","DATA_MINERAL_COPPER","DATA_VITAMINS_A","DATA_VITAMINS_B1","DATA_VITAMINS_B2","DATA_VITAMINS_B3","DATA_VITAMINS_B5","DATA_VITAMINS_B6","DATA_VITAMINS_B9","DATA_VITAMINS_B12","DATA_VITAMINS_C","DATA_VITAMINS_D","DATA_VITAMINS_E","DATA_VITAMINS_K","DATA_LIPIDS_SATURATED","DATA_LIPIDS_MONO_UNSATURATED","DATA_LIPIDS_POLY_UNSATURATED","DATA_LIPIDS_TRANSFATTY_ACIDS","DATA_CARBS_DIETARY_FIBERS","DATA_CARBS_SUGAR","DATA_CARBS_GLUCOSE","DATA_CARBS_FRUCTOSE","DATA_CARBS_GALACTOSE","DATA_CARBS_SUCROSE","DATA_CARBS_LACTOSE","DATA_CARBS_MALTOSE","DATA_CARBS_STARCH","DATA_PROTEIN_TRYPTOPHAN","DATA_PROTEIN_THREONINE","DATA_PROTEIN_ISOLEUCINE","DATA_PROTEIN_LEUCINE","DATA_PROTEIN_LYSINE","DATA_PROTEIN_METHIONINE","DATA_PROTEIN_CYSTINE","DATA_PROTEIN_PHENYLALANINE","DATA_PROTEIN_TYROSINE","DATA_PROTEIN_VALINE","DATA_PROTEIN_ARGININE","DATA_PROTEIN_HISTIDINE","DATA_PROTEIN_ALANINE","DATA_PROTEIN_ASPARTIC_ACID","DATA_PROTEIN_GLUTAMIC_ACID","DATA_PROTEIN_GLYCINE","DATA_PROTEIN_PROLINE","DATA_PROTEIN_SERINE","DISPLAYMODE_TABLE","DISPLAYMODE_CHART","CARBS_DATA_BASE","CARBS_DATA_DETAIL","LANGUAGE_DE","LANGUAGE_EN","LIPIDS_DATA_BASE","LIPIDS_DATA_OMEGA","MODE_NEW","MODE_EDIT","OPERATOR_ALL","OPERATOR_ANY","OPTION_YES","OPTION_NO","PATH_DIRECT_COMPARE","PATH_FOODCOMPARE","PATH_FOODDATA_PANEL","PATH_HOME","PATH_CONTACT","PATH_USERSETTINGS","PATH_INFO","PATH_RANKING","PORTION_KEY_INDIVIDUAL","PORTION_KEY_100","QUERYKEY_DATAPANEL_ADD","QUERYKEY_DATAPANEL_ADD_COMPOSITE","QUERYKEY_DATAPANEL_ITEM","QUERYKEY_DATAPANEL_RANKING","QUERYKEY_DATAPANEL_AGGREGATED","SEX_MALE","SEX_FEMALE","SOURCE_SRLEGACY","SOURCE_FNDDS","TAB_BASE_DATA","TAB_ENERGY_DATA","TAB_VITAMIN_DATA","TAB_MINERAL_DATA","TAB_LIPIDS_DATA","TAB_CARBS_DATA","TAB_PROTEINS_DATA","TAB_JUXTAPOSITION","TAB_INFO","UNIT_GRAM","UNIT_MILLIGRAM","UNIT_MICROGRAM","NUTRIENT_BASE_DATA_INDEX","NUTRIENT_VITAMIN_INDEX","NUTRIENT_MINERAL_INDEX","NUTRIENT_LIPIDS_INDEX","NUTRIENT_CARBS_INDEX","NUTRIENT_PROTEIN_INDEX","COMPARISON_REFERENCE_ALL","COMPARISON_REFERENCE_ALL_IN_CATEGORY","COMPARISON_REFERENCE_SELECTED_TABS","release","buildDate","maxMessageCharacters","maxElementsInRankingChart","initialFoodClassId","initialComparisonFoodClassId","minimalOmegaRatio","maximalPortionSize","smallFormsScreenSize","width","height","initialUserDataAge","initialUserDataSize","initialUserDataWeight","initialUserDataSex","initialUserDataPregnant","initialUserDataBreastfeeding","initialUserDataLeisureSports","initialChartConfigData","baseChartConfig","chartType","showLegend","showDetails","energyChartConfig","vitaminChartConfig","portionType","expand100","mineralChartConfig","lipidsChartConfig","hideRemainders","subChart","carbsChartConfig","proteinChartConfig","initialJuxtapositionConfigData","selectedGroup","selectedComparisonReference","chartSize","showLabels","initialDirectCompareConfigData","synchronize","subChart1","subChart2","getName","nameType","language","verbose","arguments","length","undefined","name","germanName","englishName","includes","index","indexOf","substring","trim","removeAuxiliaryInformationFromFoodName","getNameFromFoodNameList","foodNameList","find","shortenName","maxLength","indexOfBrace","prepareUriForParsing","uri","LanguageContext","createContext","userLanguageChange","LanguageProvider","_ref","children","userLanguage","navigator","preferredLanguage","_useState","useState","_useState2","_slicedToArray","setLanguage","provider","selectedLanaguage","_jsx","Provider","value","applicationStrings","book_heading_deficiencies","book_heading_dependencies","book_heading_functionality","book_heading_overdose","book_heading_requirements","book_heading_sources","book_heading_storage","book_minerals","book_proteins","book_vitamins","_fl_ounces","de","en","_gram","_milligram","_microgram","_ounces","_option_no","_option_yes","_pounds","button_add","button_cancel","button_change_to_chart_mode","button_close","button_getstarted_1","button_getstarted_2","button_getstarted_3","button_getstarted_4","button_mode","button_no","button_select","button_show","button_send","button_submit","button_update","button_yes","checkbox_chartoption_hideRemainders","checkbox_chartoption_showLegend","checkbox_chartoption_showDetails","checkbox_english","checkbox_english_m","checkbox_expand100g","checkbox_german","checkbox_german_m","checkbox_synchronize","confirm_close_all_tabs","device_detection_hint","direct_compare_text","home_button_info","home_carousel_0","home_carousel_1","home_carousel_2","home_carousel_3","home_carousel_4","home_carousel_5","home_text_1","home_text_2","home_text_3","home_foodcompare_overview","info_button_back","input_compositelist_title","label_amount","label_amount_short","label_category","label_categoryTree_checkbox","label_categoryTree_title","label_charttype","label_charttype_bar","label_charttype_energy_aggregated","label_charttype_energy_aggregated_title","label_charttype_energy_composition","label_charttype_energy_level","label_charttype_pie","label_charttype_carbs_base","label_charttype_carbs_detail","label_charttype_energy","label_charttype_lipids_base","label_charttype_lipids_base_title","label_charttype_lipids_omega","label_charttype_lipids_omega_title","label_charttype_minerals","label_charttype_proteins","label_charttype_vitamins","label_chart_bmr","label_chart_energyExpenditure","label_chart_proteins","label_chart_nutrientComposition","label_chart_totalComposition","label_chart_view","label_datatype","label_edit_portion","label_error","label_filterModal_add","label_filterModal_note_addCondition","label_filterModal_note_noData","label_filterModal_selection","label_filterModal_title","label_food","label_foodclass","label_fooditem","label_foodselector","label_foodselector_composite","label_group","label_highlighting","label_highlighting_none","label_highlighting_minmax","label_highlighting_share_selection","label_highlighting_share_database","label_home_slogan","label_juxtaposition","label_juxtaposition_settings_btn","label_juxtaposition_settings_chartsize","label_juxtaposition_settings_chartsize_s","label_juxtaposition_settings_chartsize_m","label_juxtaposition_settings_chartsize_l","label_juxtaposition_settings_showLabels","label_juxtaposition_table_avg","label_juxtaposition_table_max","label_juxtaposition_table_median","label_juxtaposition_table_min","label_juxtaposition_table_rank","label_juxtaposition_table_value","label_juxtaposition_unavailable","label_info","label_info_calculation","label_info_calculation_none","label_info_calculation_combined","label_info_calculation_supplement_impossible","label_info_calculation_supplemented","label_info_calculation_supplemented_combined","label_info_composite","label_info_category","label_info_foodClass","label_info_foodId","label_info_foodName","label_info_portion","label_info_portionType","label_info_preparation","label_info_source","label_language","label_mail_name","label_mail_address","label_mail_message","label_mail_characters_left","label_mail_too_long","label_mail_error_name","label_mail_error_mailaddress","label_mail_error_nocontent","label_mail_error_content_too_long","label_mail_error_verification","label_mode_all","label_mode_any","label_na","label_noData","label_nutrient_alcohol","label_nutrient_ash","label_nutrient_ash_short","label_nutrient_caffeine","label_nutrient_carbohydrates","label_nutrient_carbohydrates_plural","label_nutrient_carbohydrates_m","label_nutrient_carbohydrates_short","label_nutrient_carbohydrates_fructose","label_nutrient_carbohydrates_galactose","label_nutrient_carbohydrates_glucose","label_nutrient_carbohydrates_lactose","label_nutrient_carbohydrates_maltose","label_nutrient_carbohydrates_starch","label_nutrient_carbohydrates_sucrose","label_nutrient_dietaryFibers","label_nutrient_dietaryFibers_plural","label_nutrient_dietaryFibers_short","label_nutrient_energy","label_nutrient_lipids","label_nutrient_lipids_long","label_nutrient_lipids_saturated","label_nutrient_lipids_saturated_short","label_nutrient_lipids_unsaturated","label_nutrient_lipids_unsaturated_mono","label_nutrient_lipids_unsaturated_mono_short","label_nutrient_lipids_unsaturated_poly","label_nutrient_lipids_unsaturated_poly_short","label_nutrient_lipids_transfattyAcids","label_nutrient_lipids_omega3","label_nutrient_lipids_omega6","label_nutrient_lipids_cholesterol","label_nutrient_min","label_nutrient_min_m","label_nutrient_min_calcium","label_nutrient_min_copper","label_nutrient_min_iron","label_nutrient_min_magnesium","label_nutrient_min_manganese","label_nutrient_min_phosphorus","label_nutrient_min_potassium","label_nutrient_min_selenium","label_nutrient_min_sodium","label_nutrient_min_zinc","label_nutrient_omega3","label_nutrient_omega6","label_nutrient_proteins","label_nutrient_proteins_alanine","label_nutrient_proteins_arginine","label_nutrient_proteins_asparticAcid","label_nutrient_proteins_cystine","label_nutrient_proteins_glysine","label_nutrient_proteins_glutamicAcid","label_nutrient_proteins_histidine","label_nutrient_proteins_isoleucine","label_nutrient_proteins_leucine","label_nutrient_proteins_lysine","label_nutrient_proteins_methionine","label_nutrient_proteins_phenylalanine","label_nutrient_proteins_proline","label_nutrient_proteins_serine","label_nutrient_proteins_threonine","label_nutrient_proteins_tryptophan","label_nutrient_proteins_tyrosine","label_nutrient_proteins_valine","label_nutrient_remainder","label_nutrient_sugar","label_nutrient_vit","label_nutrient_vit_a","label_nutrient_vit_b1","label_nutrient_vit_b2","label_nutrient_vit_b3","label_nutrient_vit_b5","label_nutrient_vit_b6","label_nutrient_vit_b9","label_nutrient_vit_b12","label_nutrient_vit_c","label_nutrient_vit_d","label_nutrient_vit_e","label_nutrient_vit_e_ext","label_nutrient_vit_e_ext_tocopherolBeta","label_nutrient_vit_e_ext_tocopherolGamma","label_nutrient_vit_e_ext_tocopherolDelta","label_nutrient_vit_e_ext_tocotrienolAlpha","label_nutrient_vit_e_ext_tocotrienolBeta","label_nutrient_vit_e_ext_tocotrienolGamma","label_nutrient_vit_k","label_nutrient_vit_carotenoid","label_nutrient_vit_carotenoid_alpha","label_nutrient_vit_carotenoid_beta","label_nutrient_vit_cryptoxanthin","label_nutrient_vit_scientific_a","label_nutrient_vit_scientific_b1","label_nutrient_vit_scientific_b2","label_nutrient_vit_scientific_b3","label_nutrient_vit_scientific_b5","label_nutrient_vit_scientific_b9","label_nutrient_vit_scientific_b12","label_nutrient_vit_scientific_c","label_nutrient_vit_scientific_d","label_nutrient_vit_scientific_e","label_nutrient_vit_scientific_k","label_nutrient_water","label_overview","label_overallview_avg","label_overallview_avg_short","label_overallview_compared","label_overallview_max","label_overallview_max_short","label_overallview_min","label_overallview_min_short","label_overallview_sum","label_overallview_title","label_per_100g","label_per_portion","label_portion","label_portion_selected","label_portion_common","label_preferred_source","label_prefix_energy_in","label_prefix_hereof","label_prefix_hereof_in","label_ranking_dietaryRequirements","label_reference","label_reference_all","label_reference_category","label_reference_panel","label_requirement","label_requirement_chart","label_result","label_results","label_selection","label_source","label_source_supplement","label_source_supplement_tooltip","label_source_combine","label_source_combine_tooltip","label_title","label_tooltips","label_unit","label_unit_conversion_title","label_unknown","label_usda_reference","label_userSettings_age","label_userSettings_breastfeeding","label_userSettings_intro","label_userSettings_leisureSports","label_userSettings_leisureSports_tooltip","label_userSettings_palValue","label_userSettings_pregnant","label_userSettings_sex","label_userSettings_sex_male","label_userSettings_sex_female","label_userSettings_size","label_userSettings_weight","label_value","menu_food_data_panel","menu_food_data_panel_m","menu_direct_compare","menu_direct_compare_m","menu_home","menu_ranking","menu_ranking_m","menu_settings","menu_settings_m","menu_contact","menu_contact_sources","menu_contact_dataprivacy","menu_contact_versions","menu_contact_impressum","message_email_success","message_email_error","message_error_aggregated","message_error_existing_element","message_error_incomplete_form","message_error_input","message_error_invalid_portion","message_export_error","message_filter_error_existing","message_filter_error_range","message_filter_value_correction_min","message_filter_value_correction_max","message_import_error_invalidfile","message_import_error_parse","message_import_question","menu_info","message_userdata_success","message_userdata_error_title","message_userdata_error_age","message_userdata_error_size","message_userdata_error_weight","modal_settings_title","modal_settings_label_unit_vitamins","modal_settings_label_unit_proteins","modal_settings_label_provitamins","modal_settings_label_dietaryRequirments","palcat_name_1","palcat_desc_1","palcat_name_2","palcat_desc_2","palcat_name_3","palcat_desc_3","palcat_name_4","palcat_desc_4","palcat_name_5","palcat_desc_5","palcat_name_6","palcat_desc_6","palcat_name_7","palcat_desc_7","portion_100g","portion_individual","ranking_note","text_contact_disclaimer1","text_contact_disclaimer2","text_contact_disclaimer3","text_contact_form","text_contact_source1","text_contact_source2","text_contact_source3","text_contact_source4","text_empty_fooddatapanel","text_empty_fooddatapanel_mobileInfo","text_ranking","text_setUserdata_p1","text_setUserdata_p2","text_setUserdata_p3","tooltip_category_tree","tooltip_filter","tooltip_filter_edit","tooltip_filter_option_all","tooltip_filter_option_any","tooltip_filter_remove","tooltip_icon_charts","tooltip_icon_close","tooltip_icon_editFoodItem","tooltip_icon_export","tooltip_icon_import","tooltip_icon_minerals","tooltip_icon_newFoodItem","tooltip_icon_newFoodItemStack","tooltip_icon_overallView","tooltip_icon_proteins","tooltip_icon_removeAll","tooltip_icon_settings","tooltip_icon_table","tooltip_icon_vitamins","tooltip_source","vitamin_book_disclaimer","color_yellow","color_green","color_red","color_purple","color_gray","color_line_blue","color_line_red","color_chart_green_2","color_chart_green_3","color_chart_yellow_4","color_chart_yellow_green_1","color_chart_yellow_green_2","color_chart_black","color_chart_misc","default_chart_height","default_chart_height_m","basedata_piechart_width","basedata_piechart_width_m","basedata_barchart_width","max_portion","color_water","color_lipids","color_carbs","color_carbs_sugar","color_carbs_dietaryFibers","color_ash","color_caffeine","color_carbs_mono_glucose","color_carbs_mono_fructose","color_carbs_mono_galactose","color_carbs_di_sucrose","color_carbs_di_lactose","color_carbs_di_maltose","color_carbs_starch","color_alcohol","color_proteins","color_lipids_saturated","color_lipids_unsaturated_mono","color_lipids_unsaturated_poly","color_lipids_omega3","color_lipids_omega6","color_lipids_misc","direct_compare_color1","direct_compare_color2","getBarChartOptions","title","unit","maxYValue","yAxis","display","text","_objectSpread","min","max","getOptions","y","getPieChartOptions","scalesObject","options","maintainAspectRatio","responsive","plugins","fontSize","tooltip","getToolTips","legend","scales","enabled","callbacks","label","tooltipItem","concat","formattedValue","PieChartConfigurationForm","props","languageContext","useContext","className","_jsxs","Form","Label","Check","inline","type","checked","onChange","handleRadioButtonClick","defaultChecked","disabled","onClick","handleLegendCheckboxClick","detailsCheckboxAvailable","handleDetailsCheckboxClick","getCurrentWindowDimension","window","innerWidth","innerHeight","useWindowDimension","windowDimension","setWindowDimension","useEffect","addEventListener","removeEventListener","isSmallScreen","isMobileDevice","isMobile","CustomLegend","style","borderLeft","i","legendData","element","indent","push","marginLeft","background","color","item","renderLegend","getSourceName","sourceId","getNutrientData","selectedFoodItem","getNutrientDataForFoodItem","foodItem","selectedSource","supplementData","combineData","sourceToUse","nutrientDataList","shouldSupplementData","canSupplementData","nutrientDataObject","complement","selectedNutrientData","complementeNutrientData","supplementedBaseData","supplementCategory","baseData","supplementedVitaminData","vitaminData","supplementedMineralData","mineralData","supplementedCarbsData","carbohydrateData","supplementedProteinData","proteinData","supplementedOmegaData","lipidData","omegaData","supplementedLipidData","sourceItemId","supplementNutrientData","combinedBaseData","combineCategory","combinedVitaminData","combinedMineralData","combinedCarbsData","combinedProteinData","combinedOmegaData","combinedLipidData","combineNutrientData","nutrientCategory1","nutrientCategory2","newDataObject","key","objectHasChildren","keys1","keys2","allKeys","_toConsumableArray","Set","finalObject","finalValue","value1","value2","energy1","energy","energy2","Math","round","abs","autoRound","digits","roundFactor","pow","roundToNextValue","number","ordinaryValue","numberOfDigits","ceil","log10","standardValue","nextNumberFive","getNumberOfFixedLength","numberString","convertBooleanToDigit","convertStringToBoolean","getBaseChartLegendData","lang","ChartConfig","separateNextElement","BaseDataChart","applicationContext","ApplicationDataContextStore","chartConfig","directCompareConfig","applicationData","foodDataPanel","chartConfigData","showDetailsProp","setChartType","_useState3","_useState4","setShowLegend","_useState5","_useState6","setShowDetails","updateChartConfig","currentConfig","newChartConfig","setFoodDataPanelData","updateFoodDataPanelChartConfig","legendAllowed","renderSubChart","chartData","chartClass","directCompareUse","Pie","data","Bar","totalChartData","chartDisplayData","alcoholValuePercentage","alcohol","caffeine","water","carbohydrates","lipids","proteins","labels","colors","ash","values","getTotalChartData","datasets","backgroundColor","borderWidth","borderColor","createTotalChartData","nutrientChartData","_nutrientData$baseDat","_nutrientData$baseDat2","_nutrientData$carbohy","totalValue","sugar","dietaryFibers","carbValue","carbValuePerc","sugarValuePerc","dietaryFibersPerc","lipidValuePerc","proteinsValuePerc","alcoholValuePerc","caffeinePerc","getNutrientChartData","createNutrientChartData","totalChartDataTitle","nutrientChartDataTitle","justifyContent","event","PAL_CATEGORY_1","PAL_CATEGORY_2","PAL_CATEGORY_3","PAL_CATEGORY_4","PAL_CATEGORY_5","PAL_CATEGORY_6","PAL_CATEGORY_7","getPalCategory","EnergyConstants","createPalCategoryName","category","languageLabel","energyLabel","calculateEnergyData","getValueForPortion","factor","fat","EnergyLevelChart","energy100g","averagePortion","portion","amount","energyPortion","createEnergyLevelChart","_applicationContext$u","userData","age","size","weight","sex","palValue","leisureSports","bmr","calculateBMR","totalEnergy","calculateTotalEnergyConsumption","annotation1","drawTime","mode","scaleID","yMin","yMax","content","annotation2","annotation","annotations","line1","line2","showInfotext","paddingLeft","paddingTop","maxWidth","initialValues","renderUserDataInfoPage","EnergyCompositionChart","portionAmount","transformToPortion","energyData","createData","keyWordStyle","minWidth","fontWeight","makeValue","energyPerPortion","paddingBottom","paddingRight","ColorScheme","require","AggregatedEnergyChart","_props$selectedFoodIt","_props$selectedFoodIt2","scheme","from_hue","variation","str","colors2","colors3","subElementsSorted","compositeSubElements","sort","a","b","_nutrientDataA$baseDa","_nutrientDataB$baseDa","nutrientDataA","nutrientDataB","energy100A","energyA","energy100B","_getNameFromFoodNameL","foodDataCorpus","nameId","energy100","xAxes","ticks","autoSkip","maxRotation","minRotation","callback","getOptionsBarChart","EnergyDataChart","_applicationContext$a","_applicationContext$a2","canShowAggregatedDataView","aggregated","initialChartType","directCompareDataPanel","directCompareConfigChart","setDirectCompareData","updateDirectCompareChartConfig","BarChartConfigurationForm","handleExpandCheckboxClick","handleSynchronize","determineDailyRequirement","dailyRequirementObject","ageGroupRequirements","senior","preSenior","midLifeAdult","youngAdult","youth","male","pregnant","femalePregnant","female","breastFeeding","femaleBreastFeeding","determineFoodRequirementRatio","amountInFood","portionSize","dailyRequirement","determineProteinRequirementRatio","requirement","convertAbsoluteValueToDailyRequirement","dailyRequirements","Constants","vitaminRequirementData","b1","b2","b3","b5","b6","b9","b12","c","d","k","mineralRequirementData","calcium","copper","iron","magnesium","manganese","phosphorus","potassium","selenium","sodium","zinc","EQ_FACTOR_BETA_CAROTENE","EQ_FACTOR_OTHER_CAROTENE","EQ_FACTOR_TOCOPHEROL_BETA","EQ_FACTOR_TOCOPHEROL_GAMMA","EQ_FACTOR_TOCOPHEROL_DELTA","EC_FACTOR_TOCOTRIENOL_ALPHA","EC_FACTOR_TOCOTRIENOL_BETA","EC_FACTOR_TOCOTRIENOL_GAMMA","getVitaminChartData","requirementData","dataSettings","amountA","includeProvitamins","carotenoidData","caroteneAlpha","caroteneBeta","cryptoxanthin","calculateVitaminAEquivalent","amountE","extendedVitaminE","tocopherolBeta","tocopherolGamma","tocopherolDelta","tocotrienolAlpha","tocotrienolBeta","tocotrienolGamma","calculateVitaminEEquivalent","fontsize","selectHeight","customSelectStyles","control","base","minHeight","valueContainer","provided","padding","dropdownIndicator","styles","clearIndicator","getCustomSelectStyle","correspondingSelectElementStyle","COLOR_SELECTOR_CATEGORY","COLOR_SELECTOR_FOODCLASS","COLOR_SELECTOR_FOODITEM","VitaminsBook","_props$bookData$findI","initialIndex","initiallySelectedItem","bookData","findIndex","endsWith","selectedEntry","setSelectedEntry","handleEntryChange","selection","selectClass","selectList","renderItemList","items","renderDailyRequirements","dailyRequirementsText","parts","split","malePartsPrefix","malePartsData","femalePartsPrefix","femalePartsData","selectedDataTab","Modal","show","Header","closeBookModal","Body","overflowY","Select","defaultValue","renderSelectList","_selectedEntry$functi","_selectedEntry$defici","scientificTitle","scientificName","hasFunctionality","functionality","hasDeficiencies","deficiencies","hasOverdose","overdose","hasDependencies","dependencies","hasSources","hasStorage","storage","hasDailyRequirements","requirements","margin","description","textAlign","renderDataContent","Footer","MineralVitaminChart","chartConfigVitamins","chartConfigMinerals","portionType_vitamins","setPortionType_vitamins","expand100_vitamins","setExpand100_vitamins","portionType_minerals","setPortionType_minerals","_useState7","_useState8","expand100_minerals","setExpand100_minerals","_useState9","_useState10","showBookModal","setShowBookModal","_useState11","_useState12","selectedColumnLabel","setSelectedColumnLabel","config","selectedSubChart","anyValueChanged","handleExpandCheckbox","_applicationContext$f","precalculatedData","chartColor","barChartColor","createVitaminChartData","_applicationContext$f2","getMineralsChartData","createMineralChartData","maxValue","apply","overallMaxValue","barChartOptions","handleChartClick","clickedColumnIndex","columnLabel","context","vitamin","toLowerCase","labelName","getScientificVitaminName","nutrientBook","vitamins","minerals","barChartProps","renderChartConfigurationForm","getLipidsOmegaChartLegend","LipidsDataChart","windowSize","initialExpand100","initialHideRemainders","setShowHideRemainders","setExpand100","setSubChart","totalLipidsAmount","handleChartSelectionChange","handleSubchartChange","handleExpand100Change","handleHideRemaindersCheckbox","totalAmount","lipidsData","saturated","unsaturatedMono","unsaturatedPoly","valueRemainder","portionAmountToUse","valueSaturated","valueUnsaturatedMono","valueUnsaturatedPoly","getTotalLipidsChartData","createOmegaChartData","omega3","omega6","uncertain","valueOmega3","valueOmega6","valueUncertain","getOmegaChartData","omegaDataAvailabe","uncertainRatio","chartColType","renderChart","lipidsType","omegaDataAvailable","ProteinDataChart","setPortionType","currentSetting","proteinRequirementData","histidine","isoleucine","leucine","lysine","methionine","phenylalanine","threonine","tryptophan","valine","cystine","getProteinChartData","createProteinChartData","dataExists","getCarbsBaseLegend","getCarbsDetailsLegend","CarbsDataChart","currentSettings","chartIndex","detailChartData","valueGlucose","glucose","valueFructose","fructose","valueGalactose","galactose","valueSucrose","sucrose","valueLactose","lactose","valueMaltose","maltose","valueStarch","starch","valueDietaryFibers","getCarbDetailsChartData","createDetailChartData","basicChartData","totalCarbsAmount","valueSugar","getCarbBaseChartData","createBasicChartData","getNutrientGroups","getNutrientGroup","nutrientValue","groupIndex","isNutrientInGroup","nutrientGroup","getVitaminCategoryValues","getMineralCategoryValues","getLipidCategoryValues","getCarbohydrateCategoryValues","getProteinCategoryValues","getNutrientGroupFromValue","group","getBaseCategoryValues","getElementsOfRankingGroup","rankingGroup","getOrderedFoodList","foodList","foodClassesList","selectedCategory","selectedValue","use100gram","foodNamesList","chartItems","_loop","foodClassId","foodClass","getValueOfFoodItem","_foodItem$portionData","defaultPortion","defaultPortionId","portionObject","portionData","portionValue","getPortionValue","conditionId","condition","chartItem","sortChartItems","obj1","obj2","transFattyAcids","alanine","arginine","asparticAcid","glutamicAcid","glycine","proline","serine","tyrosine","getMaximumValue","dataSet","dataSetKey","ratioValue","getOverlappingValues","dataSet1","dataSet2","overlapping","nullifyNonOverlappingValues","overlappingAttributes","newDataset","getUnit","transformToDietaryRequirements","createJuxtapositionTableData","referenceData","tableData","valuesInGroup","valueInGroup","allValues","minValue","averageValue","reduce","sorted","medianValue","centerValue","floor","calculateMedian","rank","num","tableRow","average","median","getFoodItemsForComparison","selectedReference","selectedFoodItemsInPanel","allFoodItems","selectedFoodClass","filter","JuxtapositionChart","selectedFoodItems","nutrientName","nameKey","foodName","fooditemCondition","conditionName","fullName","createChartDataForJuxtapostionChart","calculateChartData","juxtapositionConfigData","nutrientIndex","x","getBarChartOptionsForJuxtaposition","barIndexOfSelectedFoodItem","numberOfItemsInChart","marker","animation","chartDataObj","maxBarThickness","JuxtapositionTable","setTableData","updateTable","newTableData","tableClass","BootstrapTable","trClassName","striped","hover","TableHeaderColumn","isKey","dataField","JustapositionSettings","setChartSize","setShowLabels","saveData","newJuxtapositionConfigData","updateJuxtapositionConfig","onHide","optionsChartSize","chartSizeOption","classRow","FormGroup","controlId","isSearchable","option","renderMenu","JuxtapostionContainer","showSettingsModal","setShowSettingsModal","referenceList","handleGroupChange","selectedOption","_juxtapositionConfigD","numberOfFoodItemsInPanel","compareToFoodItemsInPanel","history","replaceState","url","location","protocol","host","pathname","search","newUrl","path","updateQueryParam","groupParam","URLSearchParams","get","rankingList","Number","_applicationContext$a3","reference","maxHeight","displayMode","ChartPanel","selectedDataPage","chart","FoodDataTable","formatDataCell","cell","row","firstLineStype","indentStyle","labelPortion","shouldShowDietaryRequirements","dataPage","dataFormat","setSelectedDisplayMode","getFoodItemsSelectList","filteredFoodItems","getFoodItemsOfFoodClass","reactSelectOptions","_foodName","getFoodItemName","localeCompare","makeSelectedFoodItemObject","getStatisticalNutrientInformation","nutrient","preferredSource","sum","averageAmount","sortedValues","minimumAmount","maximumAmount","allValuesSorted","InfoData","_props$selectedFoodIt3","_props$selectedFoodIt4","createRow","renderSubTable","bordered","isCompositeFoodElement","containerClass","directCompare","debug","source1","source2","makeNutrientValuesLine","dataObj","makeAvailableNutrientValuesLine","valuesStatistics","groups","baseValues","carbValues","lipidValues","proteinValues","vitaminValues","mineralValues","nutrientValuesInFoodItem","baseDataValues","carbDataValues","lipidDataValues","proteinDataValues","vitaminDataValues","mineralDataValues","getTotalNumberOfValues","countNumberOfAvailableValues","tableDataDebug","getDebugData","foodNameId","foodClassNameId","sourceName","sourceLine2","foodClassName","categoryId","categoryName","tableDataGeneral","canSupplement","calculationLabel","getGeneralTableData","foodPortion","portionName","tableDataPortion","getTableDataPortion","Button","variant","active","usdaLink","link","open","focus","href","compositeList","makeTableDataCombinedFood","FoodDataPageBody","HelpModal","helpText","closeHelpModal","backdrop","dangerouslySetInnerHTML","__html","getHelpText","helpModalId","languageId","entries","languageSection","contentArray","ChartMenuPanel","handlePageButtonClick","setDataPage","makeButtonLabel","buttonText","classNameSpan","verticalArrangement","rowClass","labelMinerals","labelCarbs","ButtonGroup","vertical","SettingsModal","optionsVitamins","selectedUnitVitamins","unitVitamins","selectedOptionVitamins","optionsProteins","selectedUnitProteins","unitProteins","selectedOptionProteins","optionsProvitamins","selectedOptionProvitamins","selectionOption","setDataSettings","handleUnitVitaminsChange","handleUnitProteinsChange","handleIncludeProvitaminsChange","FoodDataPageHeader","useHistory","setHelpModalId","setDisplayMode","enabledDisplayButtonClasses","disabledDisplayButtonClasses","chartButtonClasses","tablesButtonClasses","sourceString","sourceToolTip","bookToolTip","shouldShowBookIcon","helpModalSize","headerLabelClass","marginTop","ReactTooltip","FaBookOpen","role","FaChartBar","FaThList","globalEventOff","FaTools","FaQuestionCircle","remainingItems","removeItemFromFoodDataPanel","pathName","FaTimes","createBaseDataTable","params","_getNutrientData$base","createTableObject","carbObject","makeCarbsTableObject","value_100g","valuePortion","calculatePortionData","value_portion","valueVolume100gram","MathService","createTableObjectAlcohol","createEnergyTable","energyObject","value_100g_kcal","value_100g_kj","valuePortionKcal","valuePortionKj","createTableObjectEnergy","makeBaseLabel","carbEnergy","appendTableDataObject","object","reqString","appendedObject","extension","getVitaminOrMineralAmount","amountInMg","getProteinAmount","amountInGram","makeDietaryRequirementString","calculateProteinRequirement","requirementMg","calculateProvitaminEquivalent","referenceVitaminRequriemtnAmount","equivalenceFactor","equivalentVitA","FoodDataPage","updatePage","tableDataList","dietaryRequirement","tableCalculationParams","extendedParams","_dietaryRequirement$v","vitRequirementData","totalCarotenoid","getTotalAmountOfCarotenoids","requirementVitaminA","carotenoidTableObject","hasExtendedData","totalExtensions","getTotalAmountOfExtendedVitaminE","requirementVitaminE","extendedVitaminETable","equivalentVitE","createVitaminTable","minRequirementData","firstNutrientData","createMineralTable","cholesterol","createLipidsTable","_firstNutrientData$ba","createCarbsTable","_dietaryRequirement$p","protRequirementData","createProteinTable","console","log","newMode","datapage","setSelectedDataPage","makeFoodDataPanelComponent","_selectedFoodItem$tit","component","tab","ApplicationDataContextProvider","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","setDebugState","setState","prevState","setSelectedFoodDataPanelTab","selectedTab","selectedFoodItemIndex","setSelectedFoodDataPanelPage","selectedPage","addItemToFoodDataPanel","newItems","assign","state","setItemOfFoodDataPanel","updatedSelectedFoodItem","selectedIndex","updatedItems","setFoodDataPageComponent","setCompleteFoodDataPanel","foodDataPanelData","foodItemId","newIndex","currentIndex","removeAllItemsFromFoodDataPanel","updateAllFoodItemNames","newLanguage","newFoodItems","updateJuxtaPositionConfig","setSelectedDirectCompareItems","selectedFoodItem1","selectedFoodItem2","setSelectedDirectCompareDataPage","setUserData","setPreferredSource","setFoodSelectorConfig","sourceSupplement","sourceCombine","foodSelector","setDirectCompareFoodSelectorConfig1","foodSelector1","setDirectCompareFoodSelectorConfig2","foodSelector2","setRankingPanelData","rankingPanelData","setNutrientFilter","nutrientFilter","selectedFoodCategory","selectedElement","showDietaryRequirements","isDebugMode","ready","useAsMobile","_createClass","uriData","queryString","equalOperator","parseFoodCompareUri","NutrientDataImportService","this","_this2","setMobileUsage","usage","setCompleteData","setSelectedFoodTab","setDirectCompareFoodSelector1","setDirectCompareFoodSelector2","Component","_useContext","useLocation","handleLanguageButtonClick","handleSourceButtonClick","activePath","language_en","language_de","labelClass","headerClass","src","logo","alt","renderSourceButtons","menuNameAnalyze","menuNameDirectCompare","menuNameRanking","menuNameSettings","buttonContainerClass","Link","to","renderMenus","carouselImages","startButtonImages","startImg1","default","startImg2","startImg3","startImg4","Home","displayedImage","setDisplayedImage","imageChanged","image","onClickCarouselImage","route","renderCarousel","pic1","pic2","pic3","pic4","pic5","pic6","captionAttribute","imageCaption","Carousel","showArrows","infiniteLoop","autoPlay","interval","transitionTime","selectedItem","showThumbs","showStatus","showIndicators","onClickItem","fontStyle","FaExternalLinkAlt","renderStartButton","srcImage","buttonClass","homeText1","getCategorySelectList","nameTypeList","names","getReactSelectOptionsList","foodClassLabelSeparator","getFoodClassSelectList","filteredFoodClasses","getFoodClassesOfCategory","foodItemNames","join","getPortionReactSelectList","portionElement","portionTypeIndex","getDefaultPortionData","portionDataList","defaultPortionIndex","UnitConversionModal","unitOptions","sourceUnits","sourceUnit","labelKey","selectedUnitOption","setSelectedUnitOption","initialValue","inputValue","setInputValue","convertedValue","setConvertedValue","isNaN","onInputChange","val","isValidConversion","allowedMinimumTargetValue","allowedMaximumTargetValue","closeModal","inputClass","fontColor","targetUnitLabelKey","makeForm","onSubmit","NotificationManager","error","FoodSelector","initialCategory","foodSelectorConfig","directCompareSelectorConfig1","directCompareSelectorConfig2","initialSupplementValue","directCompareSelectorNumber","initialCombineValue","setSelectedCategory","setSelectedFoodClass","setSelectedFoodItem","selectedPortion","setSelectedPortion","setPortionAmount","setTitle","_useState13","_useState14","setSelectedSource","_useState15","_useState16","setSupplementData","_useState17","_useState18","setCombineData","_useState19","_useState20","initialized","setInitialized","_useState21","_useState22","categoriesList","setCategoriesList","_useState23","_useState24","setFoodClassesList","_useState25","_useState26","foodClassesTypeaheadList","setFoodClassesTypeaheadList","_useState27","_useState28","foodItemsList","setFoodItemsList","_useState29","_useState30","portionsList","setPortionsList","_useState31","_useState32","sourcesList","setSourcesList","_useState33","_useState34","unitModalOpen","setUnitModalOpen","_useState35","_useState36","foodClassSearchTerm","setFoodClassSearchTerm","initiallySetFoodItem","_useState37","_useState38","initiallySetSelectedFoodItem","setInitiallySetSelectedFoodItem","getInitialFoodClassNumber","foodClassOptions","initialFoodClassToSet","defaultFoodClass","foodClassOption","categoryItems","initialFoodClass","foodItemsOfFoodClass","updateSourcesList","newFoodItem","updateSelectedFoodItem","updateFoodSelectorConfig","resetTypeaheadFilter","handleSourceChange","updateFoodClasses","foodClassItems","updateFoodItem","_firstFoodClassItem$v","firstFoodItemName","startsWith","matchingIndex","_item$value$nameId","foodItemName","foodItemToSelect","foodItemValue","updatePortionsList","sourceNames","getSourceNames","matchingSource","sourceObject","setInitialFoodElement","predefinedFoodObject","selected","sourceElement","onCheckSupplementCheckbox","onCheckCombineCheckbox","amount_label","compositeSelector","formClass","directCompareSelector","stylesCategory","stylesFoodClass","stylesFoodItem","updateCompositeTitle","isDisabled","action","resultList","dictionary","formatOptionLabel","pos","onMenuClose","parseInt","FaSlidersH","sourceSelectBox","checkboxes","renderSourceLine","EditPortionModal","newPortion","setNewPortion","valNum","updatePortionValue","submitNewPortion","CompositeFoodList","showEditModal","setShowEditModal","editModalIndex","setEditModalIndex","closeEditModal","renderLine","borderBottom","marginRight","editIndex","FaEdit","deleteItem","onDeleteItem","FaTrash","editingFoodItem","editingFoodItemName","editingFoodItemPortion","editCompositeElement","combineFoodItems","portionFactor","createFinalValue","buildBaseDataObject","b7","buildCarotenoidDataObject","buildExtendedVitaminEObject","buildVitaminDataObject","buildMineralDataObject","buildCarbohydrateData","omegaUncertain","_lipidData$omegaData","_lipidData$omegaData2","_lipidData$omegaData3","omegaRatio","buildLipidData","buildProteinData","nutrientObject","threshold","removeNutrientObjectsWithNullValues","buildAggregatedNutrientDataList","Date","getTime","alpha","beta","lycopene","lutein","extendedVitaminEData","totalPortionAmount","CategoryTreeModal","separateByCategory","setSeparateByCategory","renderFoodClasses","foodClassesOfCategory","_getNameFromFoodNameL2","nameA","nameB","_foodClass$nameKey","renderFoodItems","foodItemSelectOption","selectFoodItemFromCategoryTree","onClickFoodItem","slice","categoryHeading","renderCategoryTree","getSourceId","NutrientFilterSelectionModal","_initialStatistics$mi","_initialStatistics$ma","nutrientGroups","initialElementsList","initialElement","existingCondition","initialGroup","preferredSourceId","initialStatistics","elementsList","setElementsList","setSelectedGroup","setSelectedElement","nutrientStatistics","setNutrientStatistics","initialMin","initialMax","setMinValue","setMaxValue","statisticalNutrientInformation","_statisticalNutrientI","_statisticalNutrientI2","newElementsList","handleValueChange","setMinimum","parseFloat","info","setMaximum","inputFieldStyle","FormControl","renderForm","keyStyle","FaLightbulb","availableValues","inRange","infoText","getInfoHeaderText","renderInfoPane","changedCondition","editCondition","onEditCondition","addCondition","onAddCondition","filterFoodItems","operator","addResultObject","matchingSources","failedCondition","successfulCondition","match","checkCondition","FilterModal","showHelpModal","setShowHelpModal","showNutrientFilterModal","setShowNutrientFilterModal","editingCondition","setEditingCondition","filterResult","setFilterResult","setSelectList","selectedFilterResult","setSelectedFilterResult","calculationTypeAny","setCalculationTypeAny","filterConditions","filterData","onOpenHelpModal","onOpenNutrientSelectorModal","closeFilterSelectionModal","selectFoodItem","result","selectFoodItemFromFilterModal","handleSelectionClick","renderFilterListEntry","ListGroupItem","onRemoveCondition","radioButtonDisabled","top","ListGroup","resultMessage","renderResultList","FoodSelectorModal","initialFoodItem","initialCompositeList","compositeTitle","setCompositeTitle","setCompositeList","showCategoryTreeModal","setShowCategoryTreeModal","showFilterModal","setShowFilterModal","onSubmitComposite","onSubmitSingleItem","selectedFoodItemCallback","aggregatedSelectedFoodItem","currentSelectorSetting","canAccessCategoryTree","fnddsId","selectedObject","newList","splice","newPortionAmount","iteratorIndex","FaList","FaFilter","ConfirmationDialog","_React$Component","_this$props","okLabel","cancelLabel","confirmation","proceed","_this$props$enableEsc","enableEscape","keyboard","fullscreen","Title","React","confirmAction","small","createConfirmation","confirmable","TABLE_CELL_PADDING","COLOR_EMPTY","getColorCodeForMinMaxRange","redValue","greenValue","OverallView","highlighters","weightReferences","selectedHighlighter","setSelectedHighlighter","selectedWeightReference","setSelectedWeightReference","showToolTips","setShowToolTips","canvas","useRef","canvasElement","current","clientWidth","clientHeight","ctx","getContext","grd","createLinearGradient","addColorStop","fillStyle","fillRect","strokeStyle","strokeText","startPointX","offset","highlighter","altOption","buildHighlightSelectOptions","handleHighlighterChange","handleWeightReferenceChange","makeTableHead","thStyle","shortenedFoodName","makeTableBody","elements","aggregatedColumnStyle","foodItemValues","avg","nutrientStatData","getCellColor","bgColor","colorSelection","getColorCodeForFoodCompareRange","makeToolTipLine","makeAggegrationCell","left","tdStyle","valueTable","valueToolTip","makeColorLegend","showCanvas","ref","border","_require","compress","decompress","FoodAnalyzerContainer","showFoodSelectorInitialState","openSelectorModal","showCompositeFoodSelectorInitialState","openCompositeSelectorModal","showFoodSelector","setShowFoodSelector","showFoodAggregatedFoodSelector","setShowAggregatedFoodSelector","showOverallView","setShowOverallView","foodSelectorEditMode","setFoodSelectorEditMode","onAddNewFoodItem","aggregateSelector","onOpenFileUpload","_asyncToGenerator","_regeneratorRuntime","mark","_callee","startUpload","wrap","_context","prev","next","uploadElement","document","getElementById","click","sent","stop","onExport","_ref3","_callee3","fileContent","compressedContent","_context3","createElement","setAttribute","encodeURIComponent","body","appendChild","removeChild","t0","onHideSelector","onSelectFoodItemSubmit","selectedFoodItemWithComponent","onNewFoodItemSelected","onCloseAllTabs","_ref4","_callee4","_context4","_applicationContext$a4","isFoodItemSelected","buttonClassWithExtraSpace","existingFoodItem","FaPlusSquare","FaLayerGroup","onEditSelectedFoodItem","FaDownload","visibility","accept","files","lenth","file","fileReader","FileReader","readAsText","onloadend","_callee2","decompressedContent","_context2","abrupt","FaUpload","FaTable","TabContainer","CloseableTabs","tabPanelClass","tabContentClass","buttonTab","verticalAlign","alignItems","cursor","onTabClick","onTabChange","activeIndex","makeChartConfigUriString","chartObject","generalizedChartConfig","generalizedChartObject","makeGeneralizedChartConfig","chartTypeKey","portionTypeKey","expand100Key","showLegendKey","showDetailsKey","subChartKey","getSubChartKey","subChartKey2","synchronizeKey","convertGeneralizedChartConfigToString","getUpdatedChartConfig","chartConfigUriString","chartConfigFromUri","convertGeneralizedChartConfigStringToObject","barChartConfig","uriString","stringToParse","chartTypeNumber","portionTypeNumber","subChartNumber","subChartNumber2","getSubChartFromKey","makeFoodItemDefaultUri","foodItemData","portionString","supplementValue","combineValue","getFoodItemUriData","fragments","portionDataString","convertPortionDataStringToObject","booleanData","convertUserDataObjectToString","convertUserDataStringToObject","userDataString","palValueInt","palCategory","getPalValue","separator","replacements","short","convertAggregatedUriStringToObject","replacementArray","replacement","convertUriStringToSelectedFoodItem","newChartConfigData","USERDATA_ERROR_AGE","USERDATA_ERROR_WEIGHT","USERDATA_ERROR_SIZE","USERDATA_OK","checkUserDataValidity","FoodDataPanelContainer","buildDataPanelPageFromURI","updateUriQuery","createDataFromUriQuery","query","objectToParse","selectedFoodItemString","chartConfigString","convertAggregatedDataJsonToUriString","selectedDisplayMode","foodItemDataString","makeFoodDataPanelDefaultUri","currentQuery","_applicationContext$s","uriDataObject","foodItemUriData","parseFoodDataPanelDefaultUri","selectedTabIndex","containerDivClass","basepanelClass","newTabIndex","indexToSet","foodId","FaExclamationTriangle","STATUS_FIRST_TIME","STATUS_NOT_UPDATED","STATUS_UPDATED","DirectCompareSelector","supplementData1","setSupplementData1","combineData1","setCombineData1","supplementData2","setSupplementData2","combineData2","setCombineData2","initialItem1","initialItem2","setSelectedFoodItem1","setSelectedFoodItem2","displayStatus","setDisplayStatus","updateSelectedFoodItem1","updateSelectedFoodItem2","updateFoodSelectorConfig1","updateFoodSelectorConfig2","renderFoodSelectorCard","foodSelectorNumber","styleClass","Card","CardDeck","buttonName","updateSelectedFoodItems","currentSelectorSetting1","currentSelectorSetting2","calculateChartHeight","currentDimension","mobile","calculateChartContainerHeight","VerticalLabel","_Fragment","resolvedName","DcMineralVitaminChart","synchronizeVitamins","setSynchronizeVitamins","synchronizeMinerals","setSynchronizeMinerals","containerHeight","setContainerHeight","nutrientData1","nutrientData2","portion1","portion2","maxValue1","maxValue2","maxY","preConfigVitamins","preconfigMinerals","preconfig","preconfigFoodItem1","preconfigFoodItem2","DcPieChart","initialConfig","setSubChart1","setSubChart2","configObject","pieChartConfig","handleShowLegendCheckbox","handleShowDetailsCheckbox","handleSubchart1Change","handleSubchart2Change","getConfigurationProps","chartProps","getChartComponent","marginBottom","DcProteinDataChart","setSynchronize","DcEnergyChart","DirectCompareDataPanel","nameId1","nameId2","name1","name2","renderCharts","makeFoodItemUriData","parseDirectComparetUri","foodItemUriData1","foodItemUriData2","getUpdatedDirectCompareChartConfig","DirectCompareContainer","initialFoodItem1","initialFoodItem2","buildDataObjectsFromURI","foodItem1DataUri","foodItem2DataUri","userDataUri","chartConfigUri","makeDirectCompareDataUri","foodItem1","foodItem2","foodClass1","foodClass2","_selectedFoodItem1$fo","_selectedFoodItem2$fo","foodClassNameKey1","foodClassNameKey2","UserSettings","setAge","setSize","setWeight","setSex","setPregnant","setBreastFeeding","setPalValue","leisureSport","setLeisureSport","changePregnant","changeBreastFeeding","changeAdditionalPalPorts","checkInputValidity","validationResult","showMessage","message","renderTextField","value_age","value_size","value_weight","renderSexRadioButtons","palCategories","userDataPalValue","palObject","descriptionCode","changePalValue","renderPalList","place","success","submitUserData","MAIL_INVALID_NAME","MAIL_NO_CONTENT","MAIL_CONTENT_TO_LONG","MAIL_INVALID_ADDRESS","mailRegex","checkMailValidity","mail","errors","address","checkLength","SERVICE_ID","TEMPLATE_ID","USER_ID","ContactForm","setName","mailAddress","setMailAdress","setMessage","characters","setCharacters","sendMail","reply_to","from_name","emailjs","send","then","charactersLeft","charactersMessage","preventDefault","mailData","validationErrors","errorMessage","rows","Sources","Versions","Impressum","impressumPath","impressum_de","impressum_en","columnClass","DataPrivacy","dataprivacy","ContactContainer","selectedMenu","setSelectedMenu","buttonStyle","onChangeSubmenu","ToggleButtonGroup","ToggleButton","renderSubMenu","RankingSelector","initializeState","newElements","buildElementsList","openChart","buildRankingPanelPageFromURI","foodCategories","selectedFoodCategoryOption","foodCategory","selectedGroupOption","selectedElementOption","use100g","parseRankingPanelDataUri","_rankingPanelData$sel","_rankingPanelData$sel2","_rankingPanelData$sel3","showDailyRequirements","makeRankingPanelDataUri","handlePortionAmountChange","newRankingData","handleDietaryRequirementsCheckbox","rankingCategory","useHorizontalLayout","selectorClass","numberOfChartItems","renderPortionForm","RankingChart","createChartData","getBarChartOptionsForRanking","position","align","bottom","dataAvailable","containerStyle","RankingContainer","setChartItems","setUnit","setSelectedValue","orderedChartItems","renderHelpText","renderEmptyDatapage","InfoContainer","introImages","renderTextElement","textElement","FaAngleDoubleRight","textElements","renderImage","imageSrc","textParagraph","renderHomeText","homeText3","WebPageContainer","Chart","register","annotationPlugin","ArcElement","Router","Switch","Route","exact","MobileDeviceCheck","status","App","rebuild","NotificationContainer","rootElement","render"],"mappings":"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","file":"static/js/main.5680c568.chunk.js","sourcesContent":["var map = {\n\t\"./img-1-de.png\": 246,\n\t\"./img-1-en.png\": 247,\n\t\"./img-2-de.png\": 248,\n\t\"./img-2-en.png\": 249,\n\t\"./img-3-de.png\": 250,\n\t\"./img-3-en.png\": 251,\n\t\"./img-4-de.png\": 252,\n\t\"./img-4-en.png\": 253,\n\t\"./img-5-de.png\": 254,\n\t\"./img-5-en.png\": 255,\n\t\"./img-6-de.png\": 256,\n\t\"./img-6-en.png\": 257\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 245;","export default __webpack_public_path__ + \"static/media/img-1-de.21d693be.png\";","export default __webpack_public_path__ + \"static/media/img-1-en.0c242482.png\";","export default __webpack_public_path__ + \"static/media/img-2-de.854419e7.png\";","export default __webpack_public_path__ + \"static/media/img-2-en.39f48c60.png\";","export default __webpack_public_path__ + \"static/media/img-3-de.fb847901.png\";","export default __webpack_public_path__ + \"static/media/img-3-en.e5df8c32.png\";","export default __webpack_public_path__ + \"static/media/img-4-de.2d813f9b.png\";","export default __webpack_public_path__ + \"static/media/img-4-en.349e58f8.png\";","export default __webpack_public_path__ + \"static/media/img-5-de.a9d367a1.png\";","export default __webpack_public_path__ + \"static/media/img-5-en.ccafef0d.png\";","export default __webpack_public_path__ + \"static/media/img-6-de.777795c9.png\";","export default __webpack_public_path__ + \"static/media/img-6-en.071d077b.png\";","var map = {\n\t\"./StartImg1.jpg\": 259,\n\t\"./StartImg2.jpg\": 260,\n\t\"./StartImg3.jpg\": 261,\n\t\"./StartImg4.jpg\": 262\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 258;","export default __webpack_public_path__ + \"static/media/StartImg1.cbf0990c.jpg\";","export default __webpack_public_path__ + \"static/media/StartImg2.bbe95216.jpg\";","export default __webpack_public_path__ + \"static/media/StartImg3.d172d9b5.jpg\";","export default __webpack_public_path__ + \"static/media/StartImg4.2a0a89b0.jpg\";","var map = {\n\t\"./img-1-de.png\": 296,\n\t\"./img-1-en.png\": 297,\n\t\"./img-2-de.png\": 298,\n\t\"./img-2-en.png\": 299,\n\t\"./img-3-de.png\": 300,\n\t\"./img-3-en.png\": 301,\n\t\"./img-4-de.png\": 302,\n\t\"./img-4-en.png\": 303,\n\t\"./img-5-de.png\": 304,\n\t\"./img-5-en.png\": 305\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 295;","export default __webpack_public_path__ + \"static/media/img-1-de.6acf1d6f.png\";","export default __webpack_public_path__ + \"static/media/img-1-en.422ad097.png\";","export default __webpack_public_path__ + \"static/media/img-2-de.1cd6eb7c.png\";","export default __webpack_public_path__ + \"static/media/img-2-en.ddc3db32.png\";","export default __webpack_public_path__ + \"static/media/img-3-de.47bb4cb8.png\";","export default __webpack_public_path__ + \"static/media/img-3-en.c462d724.png\";","export default __webpack_public_path__ + \"static/media/img-4-de.eba7128a.png\";","export default __webpack_public_path__ + \"static/media/img-4-en.f0e051bb.png\";","export default __webpack_public_path__ + \"static/media/img-5-de.62c9f97b.png\";","export default __webpack_public_path__ + \"static/media/img-5-en.5a3ac481.png\";","import NameType from '../types/nutrientdata/NameType'\r\nimport Source from '../types/nutrientdata/Source'\r\nimport FoodItem from '../types/nutrientdata/FoodItem'\r\nimport DietaryRequirement from '../types/nutrientdata/DietaryRequirement'\r\n\r\nimport nutrientData from \"../static/data/nutrientdata_foodcompare.json\";\r\n\r\nimport FoodDataCorpus from \"../types/nutrientdata/FoodDataCorpus\"\r\nimport FoodClass from \"../types/nutrientdata/FoodClass\";\r\nimport {decompressNutrientData} from \"./NutrientDataDecompressor\";\r\n\r\nconst nutrientDataDecompressed = decompressNutrientData(nutrientData)\r\n\r\nexport function loadFoodDataCorpus(): FoodDataCorpus {\r\n\tconst categories = loadCategories()\r\n\tconst conditions = loadConditions()\r\n\tconst portionTypes = loadPortionTypes()\r\n\tconst sources = loadSources()\r\n\tconst foodNames = loadFoodNames()\r\n\tconst foodClasses = loadFoodClasses()\r\n\tconst foodItems = loadFoodItems()\r\n\tconst dietaryRequirements = loadDietaryRequirements()\r\n\r\n\treturn {\r\n\t\tcategories: categories,\r\n\t\tconditions: conditions,\r\n\t\tportionTypes: portionTypes,\r\n\t\tsources: sources,\r\n\t\tfoodNames: foodNames,\r\n\t\tfoodClasses: foodClasses,\r\n\t\tfoodItems: foodItems,\r\n\t\tdietaryRequirements: dietaryRequirements\r\n\t}\r\n}\r\n\r\nexport function loadConditions(): Array<NameType> {\r\n\treturn nutrientDataDecompressed.conditions;\r\n}\r\n\r\nexport function loadPortionTypes(): Array<NameType> {\r\n\treturn nutrientDataDecompressed.portionTypes;\r\n}\r\n\r\nexport function loadFoodNames(): Array<NameType> {\r\n\treturn nutrientDataDecompressed.foodNames;\r\n}\r\n\r\nexport function loadSources(): Array<Source> {\r\n\treturn nutrientDataDecompressed.sources;\r\n}\r\n\r\nexport function loadCategories(): Array<NameType> {\r\n\treturn nutrientDataDecompressed.categories;\r\n}\r\n\r\nexport function loadFoodClasses(): Array<FoodClass> {\r\n\treturn nutrientDataDecompressed.foodClasses;\r\n}\r\n\r\nexport function loadFoodItems(): Array<FoodItem> {\r\n\treturn nutrientDataDecompressed.foodItems;\r\n}\r\n\r\nexport function loadDietaryRequirements(): DietaryRequirement {\r\n\treturn nutrientDataDecompressed.dietaryRequirements;\r\n}","import foodCompareCompressing from \"../static/data/foodCompareCompressing.json\";\r\n\r\n/**\r\n * Decompresses the nutrient data json file.\r\n * @param nutrientDataObj The nutrient data json file as compressed by the USDA parser.\r\n * @return The nutrient data object generated from the decompressed version of the file.\r\n */\r\nexport function decompressNutrientData(nutrientDataObj: any) {\r\n    const compressedNutrientData = JSON.stringify(nutrientDataObj)\r\n    let decompressedString = compressedNutrientData\r\n    foodCompareCompressing.forEach(entry => {\r\n        const regExp = new RegExp('\"' + entry.target + '\"', 'g');\r\n        decompressedString = decompressedString.replace(regExp,  \"\\\"\" + entry.source + \"\\\"\")\r\n    })\r\n    return JSON.parse(decompressedString);\r\n}","export const AMOUNT_PORTION = \"amount portion\"\r\nexport const AMOUNT_100_GRAM = \"100 gram\"\r\nexport const GRAM = \"gram\" +\r\n    \"\"\r\n\r\nexport const CHART_TYPE_PIE = \"1\"\r\nexport const CHART_TYPE_BAR = \"2\"\r\nexport const CHART_TYPE_COMPOSITION = \"3\"\r\nexport const CHART_TYPE_ENERGY_LEVEL = \"4\"\r\nexport const CHART_TYPE_ENERGY_AGGREGATED = \"5\"\r\n\r\nexport const CHART_VITAMINS = \"chart vitamins\"\r\nexport const CHART_MINERALS = \"chart minerals\"\r\n\r\nexport const CHART_SIZE_SMALL = 0\r\nexport const CHART_SIZE_MEDIUM = 1\r\nexport const CHART_SIZE_LARGE = 2\r\n\r\nexport const DATA_ALCOHOL = \"alcohol\";\r\nexport const DATA_ASH = \"d_ash\";\r\nexport const DATA_CAFFEINE = \"d_caffeine\";\r\nexport const DATA_ENERGY = \"d_energy\";\r\nexport const DATA_WATER = \"d_water\";\r\nexport const DATA_CARBS = \"d_carbs\";\r\nexport const DATA_LIPIDS = \"d_lipids\";\r\nexport const DATA_PROTEINS = \"d_proteins\";\r\n\r\nexport const DATA_MINERAL_CALCIUM = \"d_calcium\";\r\nexport const DATA_MINERAL_IRON = \"d_iron\";\r\nexport const DATA_MINERAL_MAGNESIUM = \"d_magnesium\";\r\nexport const DATA_MINERAL_PHOSPHORUS = \"d_phosphorous\";\r\nexport const DATA_MINERAL_POTASSIUM = \"d_potassium\";\r\nexport const DATA_MINERAL_SODIUM = \"d_sodium\";\r\nexport const DATA_MINERAL_ZINC = \"d_zinc\";\r\nexport const DATA_MINERAL_SELENIUM = \"d_selenium\";\r\nexport const DATA_MINERAL_MANGANESE = \"d_manganese\";\r\nexport const DATA_MINERAL_COPPER = \"d_copper\";\r\n\r\nexport const DATA_VITAMINS_A = \"d_a\";\r\nexport const DATA_VITAMINS_B1 = \"d_b1\";\r\nexport const DATA_VITAMINS_B2 = \"d_b2\";\r\nexport const DATA_VITAMINS_B3 = \"d_b3\";\r\nexport const DATA_VITAMINS_B5 = \"d_b5\";\r\nexport const DATA_VITAMINS_B6 = \"d_b6\";\r\nexport const DATA_VITAMINS_B9 = \"d_b9\";\r\nexport const DATA_VITAMINS_B12 = \"d_b12\";\r\nexport const DATA_VITAMINS_C = \"d_c\";\r\nexport const DATA_VITAMINS_D = \"d_d\";\r\nexport const DATA_VITAMINS_E = \"d_e\";\r\nexport const DATA_VITAMINS_K = \"d_k\";\r\n\r\nexport const DATA_LIPIDS_SATURATED = \"d_saturated\";\r\nexport const DATA_LIPIDS_MONO_UNSATURATED = \"d_mono_unsaturated\";\r\nexport const DATA_LIPIDS_POLY_UNSATURATED = \"d_poly_unsaturated\";\r\nexport const DATA_LIPIDS_TRANSFATTY_ACIDS = \"d_transfatty_acids\";\r\n\r\nexport const DATA_CARBS_DIETARY_FIBERS = \"d_dietary fibers\";\r\nexport const DATA_CARBS_SUGAR = \"d_sugar\";\r\nexport const DATA_CARBS_GLUCOSE = \"d_glucose\";\r\nexport const DATA_CARBS_FRUCTOSE = \"d_fructose\";\r\nexport const DATA_CARBS_GALACTOSE = \"d_galactose\";\r\nexport const DATA_CARBS_SUCROSE = \"d_sucrose\";\r\nexport const DATA_CARBS_LACTOSE = \"d_lactose\";\r\nexport const DATA_CARBS_MALTOSE = \"d_maltose\";\r\nexport const DATA_CARBS_STARCH = \"d_starch\";\r\n\r\nexport const DATA_PROTEIN_TRYPTOPHAN = \"tryptophan\";\r\nexport const DATA_PROTEIN_THREONINE = \"threonine\";\r\nexport const DATA_PROTEIN_ISOLEUCINE = \"isoleucine\";\r\nexport const DATA_PROTEIN_LEUCINE = \"leucine\";\r\nexport const DATA_PROTEIN_LYSINE = \"lysine\";\r\nexport const DATA_PROTEIN_METHIONINE = \"methionine\";\r\nexport const DATA_PROTEIN_CYSTINE = \"cystine\";\r\nexport const DATA_PROTEIN_PHENYLALANINE = \"phenylalanine\";\r\nexport const DATA_PROTEIN_TYROSINE = \"tyrosine\";\r\nexport const DATA_PROTEIN_VALINE = \"valine\";\r\nexport const DATA_PROTEIN_ARGININE = \"arginine\";\r\nexport const DATA_PROTEIN_HISTIDINE = \"histidine\";\r\nexport const DATA_PROTEIN_ALANINE = \"alanine\";\r\nexport const DATA_PROTEIN_ASPARTIC_ACID = \"asparticAcid\";\r\nexport const DATA_PROTEIN_GLUTAMIC_ACID= \"glutamicAcid\";\r\nexport const DATA_PROTEIN_GLYCINE = \"glycine\";\r\nexport const DATA_PROTEIN_PROLINE = \"proline\";\r\nexport const DATA_PROTEIN_SERINE = \"serine\";\r\n\r\nexport const DISPLAYMODE_TABLE = \"dtb\"\r\nexport const DISPLAYMODE_CHART = \"dct\"\r\n\r\nexport const CARBS_DATA_BASE = \"carbs data base chart\";\r\nexport const CARBS_DATA_DETAIL = \"carbs data detail chart\"\r\n\r\nexport const LANGUAGE_DE = \"de\";\r\nexport const LANGUAGE_EN = \"en\";\r\n\r\nexport const LIPIDS_DATA_BASE = \"lipids data base chart\";\r\nexport const LIPIDS_DATA_OMEGA = \"lipids data omega chart\"\r\n\r\nexport const MODE_NEW = \"new\";\r\nexport const MODE_EDIT = \"edit\";\r\n\r\nexport const OPERATOR_ALL = 0\r\nexport const OPERATOR_ANY = 1\r\n\r\nexport const OPTION_YES = 0\r\nexport const OPTION_NO = 1\r\n\r\nexport const PATH_DIRECT_COMPARE = \"/directcompare\";\r\nexport const PATH_FOODCOMPARE = \"/foodcompare\"\r\nexport const PATH_FOODDATA_PANEL = \"/datapanel\";\r\nexport const PATH_HOME = \"/home\";\r\nexport const PATH_CONTACT = \"/contact\";\r\nexport const PATH_USERSETTINGS = \"/usersettings\";\r\nexport const PATH_INFO = \"/info\";\r\n\r\nexport const PATH_RANKING = \"/ranking\";\r\n\r\nexport const PORTION_KEY_INDIVIDUAL = 0\r\nexport const PORTION_KEY_100 = 1\r\n\r\nexport const QUERYKEY_DATAPANEL_ADD = \"add\"\r\nexport const QUERYKEY_DATAPANEL_ADD_COMPOSITE = \"composite\"\r\nexport const QUERYKEY_DATAPANEL_ITEM = \"item\"\r\nexport const QUERYKEY_DATAPANEL_RANKING = \"ranking\"\r\nexport const QUERYKEY_DATAPANEL_AGGREGATED = \"aggregated\"\r\n\r\nexport const SEX_MALE = \"sex male\"\r\nexport const SEX_FEMALE = \"sex female\"\r\n\r\nexport const SOURCE_SRLEGACY = \"srlegacy\"\r\nexport const SOURCE_FNDDS = \"fndds\"\r\n\r\nexport const TAB_BASE_DATA = \"basedata\"\r\nexport const TAB_ENERGY_DATA = \"energydata\"\r\nexport const TAB_VITAMIN_DATA = \"vitamindata\"\r\nexport const TAB_MINERAL_DATA = \"mineraldata\"\r\nexport const TAB_LIPIDS_DATA = \"lipidsdata\"\r\nexport const TAB_CARBS_DATA = \"carbsdata\"\r\nexport const TAB_PROTEINS_DATA = \"proteinsdata\"\r\nexport const TAB_JUXTAPOSITION = \"juxtaposition\"\r\nexport const TAB_INFO = \"infodata\"\r\n\r\nexport const TAB_LIST = [TAB_BASE_DATA, TAB_ENERGY_DATA, TAB_VITAMIN_DATA, TAB_MINERAL_DATA, TAB_LIPIDS_DATA, TAB_CARBS_DATA, TAB_PROTEINS_DATA, TAB_INFO]\r\n\r\nexport const UNIT_GRAM = 0\r\nexport const UNIT_MILLIGRAM = 1\r\nexport const UNIT_MICROGRAM = 2\r\n\r\nexport const NUTRIENT_BASE_DATA_INDEX = 0\r\nexport const NUTRIENT_VITAMIN_INDEX = 1\r\nexport const NUTRIENT_MINERAL_INDEX = 2\r\nexport const NUTRIENT_LIPIDS_INDEX = 3\r\nexport const NUTRIENT_CARBS_INDEX = 4\r\nexport const NUTRIENT_PROTEIN_INDEX = 5\r\n\r\nexport const HIGHLIGHTING_NONE = 0\r\nexport const HIGHLIGHTING_MIN_MAX = 1\r\nexport const HIGHLIGHTING_SHARE_SELECTION = 2\r\nexport const HIGHLIGHTING_SHARE_ALL = 3\r\n\r\nexport const COMPARISON_REFERENCE_ALL = 0\r\nexport const COMPARISON_REFERENCE_ALL_IN_CATEGORY = 1\r\nexport const COMPARISON_REFERENCE_SELECTED_TABS = 2","import {\r\n    AMOUNT_PORTION,\r\n    CARBS_DATA_BASE, CHART_SIZE_MEDIUM, CHART_TYPE_COMPOSITION,\r\n    CHART_TYPE_PIE,\r\n    LIPIDS_DATA_BASE,\r\n    SEX_MALE\r\n} from \"./Constants\";\r\nimport {ChartConfigData, DirectCompareChartConfigData, JuxtapositionConfig} from \"../types/livedata/ChartConfigData\";\r\nimport {WindowDimension} from \"../service/WindowDimension\";\r\n\r\nexport const release = \"2.2\"\r\nexport const buildDate = \"2024-03-11\"\r\n\r\nexport const maxMessageCharacters = 5000\r\nexport const maxElementsInRankingChart = 100\r\n\r\n// The food class to be initially displayed in the food selector\r\nexport const initialFoodClassId = 1\r\n\r\n// The food class to be initially displayed as the comparator in the direct comparison menu (second element)\r\nexport const initialComparisonFoodClassId = 7\r\n\r\nexport const minimalOmegaRatio = 0.3\r\nexport const maximalPortionSize = 5000\r\nexport const defaultPanelHeight = '468px'\r\n\r\nexport const smallFormsScreenSize: WindowDimension = {\r\n    width: 1200,\r\n    height: 800\r\n}\r\n\r\nexport const initialUserDataAge = 35\r\nexport const initialUserDataSize = 175\r\nexport const initialUserDataWeight = 75\r\nexport const initialUserDataSex = SEX_MALE\r\nexport const initialUserDataPregnant = false\r\nexport const initialUserDataBreastfeeding = false\r\nexport const initialUserDataPalValue = 1.6\r\nexport const initialUserDataLeisureSports = false\r\n\r\nexport const initialChartConfigData: ChartConfigData = {\r\n    baseChartConfig: {\r\n        chartType: CHART_TYPE_PIE,\r\n        showLegend: true,\r\n        showDetails: false\r\n    },\r\n    energyChartConfig: {\r\n        chartType: CHART_TYPE_COMPOSITION,\r\n        showLegend: true\r\n    },\r\n    vitaminChartConfig: {\r\n        portionType: AMOUNT_PORTION,\r\n        expand100: false\r\n    },\r\n    mineralChartConfig: {\r\n        portionType: AMOUNT_PORTION,\r\n        expand100: false\r\n    },\r\n    lipidsChartConfig: {\r\n        chartType: CHART_TYPE_PIE,\r\n        showLegend: true,\r\n        hideRemainders: false,\r\n        subChart: LIPIDS_DATA_BASE,\r\n        expand100: false\r\n    },\r\n    carbsChartConfig: {\r\n        chartType: CHART_TYPE_PIE,\r\n        showLegend: true,\r\n        subChart: CARBS_DATA_BASE,\r\n        hideRemainders: false,\r\n        expand100: false\r\n    },\r\n    proteinChartConfig: {\r\n        portionType: AMOUNT_PORTION,\r\n        expand100: false\r\n    }\r\n}\r\n\r\nexport const initialJuxtapositionConfigData: JuxtapositionConfig = {\r\n    selectedGroup: null,\r\n    selectedComparisonReference: null,\r\n    chartSize: CHART_SIZE_MEDIUM,\r\n    showLabels: false\r\n}\r\n\r\nexport const initialDirectCompareConfigData: DirectCompareChartConfigData = {\r\n    baseChartConfig: {\r\n        chartType: CHART_TYPE_PIE,\r\n        showLegend: false,\r\n        showDetails: false\r\n    },\r\n    energyChartConfig: {\r\n        chartType: CHART_TYPE_COMPOSITION,\r\n        showLegend: true\r\n    },\r\n    vitaminChartConfig: {\r\n        portionType: AMOUNT_PORTION,\r\n        expand100: false,\r\n        synchronize: true\r\n    },\r\n    mineralChartConfig: {\r\n        portionType: AMOUNT_PORTION,\r\n        expand100: false,\r\n        synchronize: true\r\n    },\r\n    lipidsChartConfig: {\r\n        chartType: CHART_TYPE_PIE,\r\n        showLegend: false,\r\n        hideRemainders: false,\r\n        expand100: false,\r\n        subChart1: LIPIDS_DATA_BASE,\r\n        subChart2: LIPIDS_DATA_BASE\r\n    },\r\n    carbsChartConfig: {\r\n        chartType: CHART_TYPE_PIE,\r\n        showLegend: false,\r\n        hideRemainders: false,\r\n        expand100: false,\r\n        subChart1: CARBS_DATA_BASE,\r\n        subChart2: CARBS_DATA_BASE\r\n    },\r\n    proteinChartConfig: {\r\n        portionType: AMOUNT_PORTION,\r\n        expand100: false,\r\n        synchronize: true\r\n    }\r\n}","import NameType from \"../types/nutrientdata/NameType\";\r\n\r\n/**\r\n * Retrieves the name of a name type object in the given language\r\n * @param nameType The name type object\r\n * @param language The given language\r\n * @param verbose Optionally set this value to true to obtain the full name (including auxiliary information set in brackets)\r\n */\r\nexport default function getName(nameType: NameType, language: string, verbose = false): string {\r\n    const name = language === 'de' ?  nameType.germanName : nameType.englishName\r\n    if(!verbose) {\r\n        return removeAuxiliaryInformationFromFoodName(name)\r\n    } else {\r\n        return name\r\n    }\r\n}\r\n\r\n/**\r\n * Strips of auxiliary information of the food item, which is set in brackets and may not be intended to display\r\n * @param name The full food name as set in the nutrient json file.\r\n */\r\nexport function removeAuxiliaryInformationFromFoodName(name: string): string {\r\n    if(name.includes(\"[\")) {\r\n        const index = name.indexOf(\"[\")\r\n        return name.substring(0, index).trim()\r\n    } else {\r\n        return name\r\n    }\r\n}\r\n\r\n","import NameType from \"../../types/nutrientdata/NameType\";\r\nimport ReactSelectOption from \"../../types/ReactSelectOption\";\r\nimport getName from \"../LanguageService\";\r\n\r\nexport function getReactSelectOptionsList(nameTypeList: Array<NameType>, language: string, sort?: boolean): Array<ReactSelectOption> {\r\n    const names: Array<string> = []\r\n\r\n    if(nameTypeList && nameTypeList.length > 0) {\r\n        nameTypeList.forEach(nameType => names.push(getName(nameType, language)))\r\n    }\r\n\r\n    if(sort) {\r\n        names.sort()\r\n    }\r\n\r\n    const reactSelectOptions: Array<ReactSelectOption> = []\r\n    names.forEach((name, index) => {\r\n        reactSelectOptions.push({\r\n            value: index,\r\n            label: name\r\n        })\r\n    })\r\n\r\n    return reactSelectOptions\r\n}\r\n\r\n\r\nexport function getNameFromFoodNameList(foodNameList: Array<NameType>, id: number, language: string, verbose = false): string | null {\r\n    const nameType = foodNameList.find(nameType => nameType.id === id)\r\n\r\n    if(nameType) {\r\n        return getName(nameType, language, verbose)\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\n/*\r\n * General method to shorten the name of long food name.\r\n * name: The food name, e.g. \"Linen oil (at least 60 % lineul acid)\"\r\n * maxLength: The maximum length of the food name.\r\n */\r\nexport function shortenName(name, maxLength) {\r\n    if(name.length <= maxLength) {\r\n        return name;\r\n    }\r\n\r\n    if(name.includes(\"(\")) {\r\n        const indexOfBrace = name.indexOf(\"(\");\r\n        if(indexOfBrace >= maxLength-6) {\r\n            return name.substring(0, indexOfBrace-1).trim() + \"...\";\r\n        }\r\n    }\r\n\r\n    return name.substring(0, maxLength-3).trim() + \"...\";\r\n}","export function parseFoodCompareUri(): string | null {\r\n    const queryString = window.location.search.substring(1)\r\n\r\n    const equalOperator = queryString.indexOf(\"=\")\r\n    if(equalOperator === -1) {\r\n        return null\r\n    }\r\n    const key = queryString.substring(0, equalOperator)\r\n    const value = queryString.substring(equalOperator + 1)\r\n\r\n    if(key === \"mode\") {\r\n        return value\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nexport function prepareUriForParsing(uri: string): string {\r\n    // Some websites like youtube transform the semicolons in the URL to %3B, which later need to be translated back to semicolons\r\n    if (uri.includes(\"/%3B\")) {\r\n        return uri.replace(/%3B/g, \";\")\r\n    }\r\n\r\n    // Some websites transform the semicolon to an ampersand\r\n    if (uri.includes(\"&\")) {\r\n        return uri.replace(/&/g, \";\")\r\n    }\r\n\r\n    return uri\r\n}","import React, {createContext, useState} from \"react\";\r\nimport {LANGUAGE_DE, LANGUAGE_EN} from \"../config/Constants\";\r\n\r\nexport interface LanguageProviderProps {\r\n    language: string\r\n    userLanguageChange: (selectedLanguage: string) => void\r\n}\r\n\r\nexport const LanguageContext = createContext<LanguageProviderProps>({\r\n    language: 'en',\r\n    userLanguageChange: () => {return 'en'}\r\n});\r\n\r\nexport function LanguageProvider({ children }) {\r\n    const userLanguage = navigator.language;\r\n    const preferredLanguage = userLanguage === 'de' || userLanguage === 'de-DE' ? LANGUAGE_DE : LANGUAGE_EN\r\n    const [language, setLanguage] = useState(preferredLanguage);\r\n\r\n    const userLanguageChange = (selectedLanaguage: string): void => {\r\n        const newLanguage = selectedLanaguage ? selectedLanaguage : LANGUAGE_EN\r\n        setLanguage(newLanguage);\r\n    }\r\n\r\n    const provider: LanguageProviderProps = {\r\n        language,\r\n        userLanguageChange\r\n    };\r\n\r\n    return (\r\n        <LanguageContext.Provider value={provider}>\r\n            {children}\r\n        </LanguageContext.Provider>\r\n    );\r\n}\r\n\r\n\r\n\r\n","export const applicationStrings = {\r\n    book_heading_deficiencies: {\r\n        \"de\": \"Mangelerscheinungen\",\r\n        \"en\": \"Deficiencies\"\r\n    },\r\n    book_heading_dependencies: {\r\n        \"de\": \"Abhängigkeiten\",\r\n        \"en\": \"Dependencies\"\r\n    },\r\n    book_heading_functionality: {\r\n        \"de\": \"Funktionen\",\r\n        \"en\": \"Meaning\"\r\n    },\r\n    book_heading_overdose: {\r\n        \"de\": \"Probleme bei Überdosis\",\r\n        \"en\": \"Issues of overdose\"\r\n    },\r\n    book_heading_requirements: {\r\n        \"de\": \"Tagesbedarf\",\r\n        \"en\": \"Daily requirement\"\r\n    },\r\n    book_heading_sources: {\r\n        \"de\": \"Quellen\",\r\n        \"en\": \"Sources\"\r\n    },\r\n    book_heading_storage: {\r\n        \"de\": \"Speicherung\",\r\n        \"en\": \"Storage\"\r\n    },\r\n    book_minerals: {\r\n        \"de\": \"Buch der Mineralstoffe\",\r\n        \"en\": \"Book of Minerals\"\r\n    },\r\n    book_proteins: {\r\n        \"de\": \"Buch der Aminosäuren\",\r\n        \"en\": \"Book of Amino Acids\"\r\n    },\r\n    book_vitamins: {\r\n        \"de\": \"Buch der Vitamine\",\r\n        \"en\": \"Book of Vitamins\"\r\n    },\r\n    _fl_ounces: {\r\n        de: 'Flüßigunzen',\r\n        en: 'Fl. ounces'\r\n    },\r\n    _gram: {\r\n        de: 'Gramm',\r\n        en: 'Gram'\r\n    },\r\n    _milligram: {\r\n        de: 'Milligramm (mg)',\r\n        en: 'Milligram (mg)'\r\n    },\r\n    _microgram: {\r\n        de: 'Mikrogramm (µg)',\r\n        en: 'Microgram (µg)'\r\n    },\r\n    _ounces: {\r\n        de: 'Unzen',\r\n        en: 'Ounces'\r\n    },\r\n    _option_no: {\r\n        de: 'Nein',\r\n        en: 'No'\r\n    },\r\n    _option_yes: {\r\n        de: 'Ja',\r\n        en: 'Yes'\r\n    },\r\n    _pounds: {\r\n        de: 'Pfund',\r\n        en: 'Pounds'\r\n    },\r\n    button_add: {\r\n        de: 'Hinzufügen',\r\n        en: 'Add'\r\n    },\r\n    button_cancel: {\r\n        de: 'Abbrechen',\r\n        en: 'Cancel'\r\n    },\r\n    button_change_to_chart_mode: {\r\n        de: 'Daten als Diagramm anzeigen',\r\n        en: 'Display data as chart'\r\n    },\r\n    button_close: {\r\n        de: 'Schließen',\r\n        en: 'Close'\r\n    },\r\n    button_getstarted_1: {\r\n        de: 'Einzelne Lebensmittel analysieren',\r\n        en: 'Analyze separate food items'\r\n    },\r\n    button_getstarted_2: {\r\n        de: 'Komplexe Lebensmittel zusammenstellen und analysieren',\r\n        en: 'Create and analyze a composite food list'\r\n    },\r\n    button_getstarted_3: {\r\n        de: 'Zwei Lebensmittel gegenüberstellen',\r\n        en: 'Compare two food items with each other'\r\n    },\r\n    button_getstarted_4: {\r\n        de: 'Lebensmittel nach Werten sortieren',\r\n        en: 'Rank food items by a nutrient value'\r\n    },\r\n    button_mode: {\r\n        de: 'Modus',\r\n        en: 'Mode'\r\n    },\r\n    button_no: {\r\n        de: 'Nein',\r\n        en: 'No'\r\n    },\r\n    button_select: {\r\n        de: 'Auswählen',\r\n        en: 'Show'\r\n    },\r\n    button_show: {\r\n        de: 'Anzeigen',\r\n        en: 'Show'\r\n    },\r\n    button_send: {\r\n        de: \"Senden\",\r\n        en: \"Send\"\r\n    },\r\n    button_submit: {\r\n        de: 'Übernehmen',\r\n        en: 'Submit'\r\n    },\r\n    button_update: {\r\n        de: \"Aktualisieren\",\r\n        en: \"Update\"\r\n    },\r\n    button_yes: {\r\n        de: 'Ja',\r\n        en: 'Yes'\r\n    },\r\n    checkbox_chartoption_hideRemainders: {\r\n        de: 'Rest ausblenden',\r\n        en: 'Hide remainders'\r\n    },\r\n    checkbox_chartoption_showLegend: {\r\n        de: 'Legende',\r\n        en: 'Legend'\r\n    },\r\n    checkbox_chartoption_showDetails: {\r\n        de: 'Details',\r\n        en: 'Details'\r\n    },\r\n    checkbox_english: {\r\n        de: 'Englisch',\r\n        en: 'English'\r\n    },\r\n    checkbox_english_m: {\r\n        de: 'EN',\r\n        en: 'EN'\r\n    },\r\n    checkbox_expand100g: {\r\n        de: 'Auf 100 % erweitern',\r\n        en: 'Expand to 100 %'\r\n    },\r\n    checkbox_german: {\r\n        de: 'Deutsch',\r\n        en: 'German'\r\n    },\r\n    checkbox_german_m: {\r\n        de: 'DE',\r\n        en: 'DE'\r\n    },\r\n    checkbox_synchronize: {\r\n        de: 'Synchronisieren',\r\n        en: 'Synchronize'\r\n    },\r\n    confirm_close_all_tabs: {\r\n        de: 'Sollen wirklich alle Lebensmittel-Tabs geschlossen werden?',\r\n        en: 'Really close all food tabs?'\r\n    },\r\n    device_detection_hint: {\r\n        de: 'Auf Mobilgeräten und sehr kleinen Geräten stehen einige Funktionen von Food Compare aktuell nur eingeschränkt zur Verfügung. Wir bitten um Verständnis.',\r\n        en: 'Please understand that on mobile devices and very small screens some functionality of Food Compare is currently limited or unavailable.',\r\n    },\r\n    direct_compare_text: {\r\n        de: 'Wählen Sie zwei Lebensmittel aus den beiden Auswahlboxen, die miteinander verglichen werden sollen, und klicken Sie dann den Anzeigen-Button.',\r\n        en: 'Pick two food elements from the two selectors that should be compared with each other. Then click the Show button.'\r\n    },\r\n    home_button_info: {\r\n        de: 'Mehr zu den Features von Food Compare erfahren...',\r\n        en: 'Learn more about the features of Food Compare...'\r\n    },\r\n    home_carousel_0: {\r\n        de: 'Vitamingehalt von Äpfeln zum Tagesbedarf anzeigen',\r\n        en: 'Show vitamin content of apples compared to daily requirement'\r\n    },\r\n    home_carousel_1: {\r\n        de: 'Unterschied zwischen Zubereitungsart mit/ohne Schale anzeigen',\r\n        en: 'Show difference between potatoes cooked with or without skin'\r\n    },\r\n    home_carousel_2: {\r\n        de: 'Lebensmittel anzeigen, die viel Magnesium enthalten',\r\n        en: 'Show food that contains a lot of magnesium'\r\n    },\r\n    home_carousel_3: {\r\n        de: 'Mineralstoffgehalt von Spinat mit anderem Gemüse vergleichen',\r\n        en: 'Compare the amount of minerals in spinach with other vegetables'\r\n    },\r\n    home_carousel_4: {\r\n        de: 'Liste an Lebensmitteln zusammenstellen und Gesamtgehalt an Vitaminen anzeigen',\r\n        en: 'Create a list of foods and show the total amount of contained vitamins'\r\n    },\r\n    home_carousel_5: {\r\n        de: 'Verteilung von Fettsäuren zwischen zwei Lebensmitteln vergleichen',\r\n        en: 'Compare the distribution of fatty acids between two foods'\r\n    },\r\n    home_text_1: {\r\n        de: 'Food Compare ist ein Webprojekt zur grafischen Darstellung der Zusammensetzung von Lebensmitteln. Während klassische Quellen die enthaltenen Inhaltsstoffe meist nur in tabellarischer Form angeben, verwendet Food Compare Grafiken und Diagramme, um den Gehalt an Vitaminen und Mineralstoffen, Kohlenhydraten, Fettsäuren und Eiweißen (Proteinen) leichter und übersichtlich darzustellen.',\r\n        en: 'Food Compare is a web project to visually display information about food composition. While conventional resources commonly display nutrient data in tables, Food Compare provides charts and graphics to allow users a better understanding of the containing nutrients (carbohydrates, lipids, proteins) as well as vitamins and minerals.'\r\n    },\r\n    home_text_2: {\r\n        de: 'Das Hauptaugenmerk von Food Compare gilt jedoch nicht nur der Veranschaulichung einzelner Nahrungsmittel, sondern der Vergleichbarkeit von Nährstoffen, Vitaminen und Mineralen in Lebensmittels. Dazu können beliebig viele Tabs geöffnet und Lebensmittel damit leicht miteinander verglichen werden. So lassen sich bspw. auf einfache Weise der Vitamingehalt von einzelnen Obstsorten vergleichen, oder die Aufteilung von Kohlenhydraten, Fetten und Eiweißen zwischen Grundnahrungsmitteln. Dabei erlaubt die Anwendung auch das Zusammenstellen von komplexen Menüs, deren Gesamtgehalt an Nährstoffen, Vitaminen und Mineralstoffen dann berechnet wird.',\r\n        en: 'The primary focus of Food Compare is to visually compare the composition and contents of different food items, though. Food items can be opened in different tabs so that nutrients, vitamins or minerals can be easily compare. As an example, users can compare the containing vitamins between different fruits or the nutrient composition between staple foods. In addition, the application allows to aggregate foods to more complex menus and will then calculate the overall amount of nutrients, vitamins and minerals in that menu.'\r\n    },\r\n    home_text_3: {\r\n        de: 'Um die Nährstoffdiagramme zweier Lebensmittel auf einen Blick miteinander vergleichen zu können, gibt es seit der Version 1.2 nun auch einen zusätzlichen Bereich, in denen die Diagramme entsprechend nebeneinander angeordnet sind. Einige Datenseiten wie Vitamine und Mineralstoffe lassen sich dabei auch synchronisieren, so dass eine einheitliche Skalierung der Diagramme stattfindet und nur die Daten angezeigt werden, welche für beide Lebensmittel vorliegen.',\r\n        en: 'In order to compare nutrient charts of two food items at a glance, an additional page was added in version 1.2 where nutrient charts are placed next to each other. Some data pages like vitamins and minerals can also be synchronized, which means that the charts use a unique scaling and only display data that is available in both food elements.'\r\n    },\r\n    home_foodcompare_overview: {\r\n        de: 'Food Compare im Überblick',\r\n        en: 'Food Compare at a Glance'\r\n    },\r\n    info_button_back: {\r\n        de: 'Zurück zur Startseite',\r\n        en: 'Back to home page'\r\n    },\r\n    input_compositelist_title: {\r\n        de: 'Individuelle Liste',\r\n        en: 'Individual list'\r\n    },\r\n    label_amount: {\r\n        de: 'Menge (g)',\r\n        en: 'Amount (g)'\r\n    },\r\n    label_amount_short: {\r\n        de: 'Gramm',\r\n        en: 'Gram'\r\n    },\r\n    label_category: {\r\n        de: 'Kategorie',\r\n        en: 'Category'\r\n    },\r\n    label_categoryTree_checkbox: {\r\n        de: 'Nach Kategorien unterteilen',\r\n        en: 'Separate by categories'\r\n    },\r\n    label_categoryTree_title: {\r\n        de: 'Food Compare Kategoriebaum',\r\n        en: 'Food Compare Category Tree'\r\n    },\r\n    label_charttype: {\r\n        de: 'Anzeige',\r\n        en: 'Display'\r\n    },\r\n    label_charttype_bar: {\r\n        de: 'Balkendiagramm',\r\n        en: 'Bar chart'\r\n    },\r\n    label_charttype_energy_aggregated: {\r\n        de: 'Einzeldaten',\r\n        en: 'Separate data'\r\n    },\r\n    label_charttype_energy_aggregated_title: {\r\n        de: 'Einzeldaten Energieverteilung',\r\n        en: 'Seperate energy data'\r\n    },\r\n    label_charttype_energy_composition: {\r\n        de: 'Energiezusammensetzung',\r\n        en: 'Energy composition'\r\n    },\r\n    label_charttype_energy_level: {\r\n        de: 'Energielevel',\r\n        en: 'Energy level'\r\n    },\r\n    label_charttype_pie: {\r\n        de: 'Tortendiagramm',\r\n        en: 'Pie chart'\r\n    },\r\n    label_charttype_carbs_base: {\r\n        de: 'Allgemeine Werte',\r\n        en: 'Basic data'\r\n    },\r\n    label_charttype_carbs_detail: {\r\n        de: 'Detailwerte',\r\n        en: 'Detailed data'\r\n    },\r\n    label_charttype_energy: {\r\n        de: 'Grundumsatz und Gesamtumsatz (Energie)',\r\n        en: 'BMR and Energy Expenditure'\r\n    },\r\n    label_charttype_lipids_base: {\r\n        de: 'Allgemeine Werte',\r\n        en: 'Basic data'\r\n    },\r\n    label_charttype_lipids_base_title: {\r\n        de: 'Allgemeine Verteilung der Fettsäuren',\r\n        en: 'Basic distributions of fatty acids'\r\n    },\r\n    label_charttype_lipids_omega: {\r\n        de: 'Omega-Werte',\r\n        en: 'Omega data'\r\n    },\r\n    label_charttype_lipids_omega_title: {\r\n        de: 'Allgemeine Verteilung der Omega-3/6-Fettsäuren',\r\n        en: 'Basic distributions of Omega 3/6 acids'\r\n    },\r\n    label_charttype_minerals: {\r\n        de: 'Minerale (im Vgl. zum Tagesbedarf)',\r\n        en: 'Minerals (related to daily requirements)'\r\n    },\r\n    label_charttype_proteins: {\r\n        de: 'Aminosäuren (im Vgl. zum Tagesbedarf)',\r\n        en: 'Amino acids  (related to daily requirements)'\r\n    },\r\n    label_charttype_vitamins: {\r\n        de: 'Vitamine (im Vgl. zum Tagesbedarf)',\r\n        en: 'Vitamins (related to daily requirements)'\r\n    },\r\n    label_chart_bmr: {\r\n        de: 'Grundumsatz',\r\n        en: 'Basal Metabolic Rate (BMR)'\r\n    },\r\n    label_chart_energyExpenditure: {\r\n        de: 'Gesamtumsatz',\r\n        en: 'Energy Expenditure'\r\n    },\r\n    label_chart_proteins: {\r\n        de: 'Proteine',\r\n        en: 'Proteins'\r\n    },\r\n    label_chart_nutrientComposition: {\r\n        de: 'Nährstoffzusammensetzung',\r\n        en: 'Nutrient Composition'\r\n    },\r\n    label_chart_totalComposition: {\r\n        de: 'Gesamtzusammensetzung',\r\n        en: 'Total Composition'\r\n    },\r\n    label_chart_view: {\r\n        de: 'Zur Diagrammansicht wechseln',\r\n        en: 'Switch to chart view'\r\n    },\r\n    label_datatype: {\r\n        de: 'Datentyp',\r\n        en: 'Data type'\r\n    },\r\n    label_edit_portion: {\r\n        de: 'Portionsgröße (Gramm):',\r\n        en: 'Portion amount (gram):'\r\n    },\r\n    label_error: {\r\n        de: 'Eingabefehler',\r\n        en: 'Input error'\r\n    },\r\n    label_filterModal_add: {\r\n        de: 'Neue Bedingung',\r\n        en: 'New condition'\r\n    },\r\n    label_filterModal_note_addCondition: {\r\n        de: 'Fügen Sie eine Bedingung hinzu, um eine gefilterte Liste an Lebensmitteln zu erhalten.',\r\n        en: 'Add a condition to get a filtered list of foods.'\r\n    },\r\n    label_filterModal_note_noData: {\r\n        de: 'Keine Ergebnisse.',\r\n        en: 'No results.'\r\n    },\r\n    label_filterModal_selection: {\r\n        de: 'Bedingung festlegen',\r\n        en: 'Define condition'\r\n    },\r\n    label_filterModal_title: {\r\n        de: 'Lebensmittelfilter',\r\n        en: 'Food filter'\r\n    },\r\n    label_food: {\r\n        de: \"Lebensmittel\",\r\n        en: \"Food\"\r\n    },\r\n    label_foodclass: {\r\n        de: 'Lebensmittel',\r\n        en: 'Food class'\r\n    },\r\n    label_fooditem: {\r\n        de: 'Typ',\r\n        en: 'Food type'\r\n    },\r\n    label_foodselector: {\r\n        de: 'Lebensmittelauswahl',\r\n        en: 'Food Selector'\r\n    },\r\n    label_foodselector_composite: {\r\n        de: 'Zusammenstellung eines Lebensmittels',\r\n        en: 'Composite food generation'\r\n    },\r\n    label_group: {\r\n        de: 'Gruppe',\r\n        en: 'Group'\r\n    },\r\n    label_highlighting: {\r\n        de: 'Einfärben',\r\n        en: 'Highlighting'\r\n    },\r\n    label_highlighting_none: {\r\n        de: 'Nicht einfärben',\r\n        en: 'No highlighting'\r\n    },\r\n    label_highlighting_minmax: {\r\n        de: 'Minimum und Maximum',\r\n        en: 'Min and max'\r\n    },\r\n    label_highlighting_share_selection: {\r\n        de: 'Anteil im Lebensmittel im Bezug zur Auswahl',\r\n        en: 'Amount in food compared to the selection'\r\n    },\r\n    label_highlighting_share_database: {\r\n        de: 'Anteil im Lebensmittel im Bezug zur gesamten Datenbank',\r\n        en: 'Amount in food compared to the whole database'\r\n    },\r\n    label_home_slogan: {\r\n        de: \"Lebensmitteldaten grafisch darstellen\",\r\n        en: \"The Graphic Way of Displaying Food Data\"\r\n    },\r\n    label_juxtaposition: {\r\n        de: 'Vergleich',\r\n        en: 'Juxtaposition'\r\n    },\r\n    label_juxtaposition_settings_btn: {\r\n        de: 'Anzeigeoptionen',\r\n        en: 'Display settings'\r\n    },\r\n    label_juxtaposition_settings_chartsize: {\r\n        de: 'Diagrammgröße',\r\n        en: 'Chart size'\r\n    },\r\n    label_juxtaposition_settings_chartsize_s: {\r\n        de: 'Klein',\r\n        en: 'Small'\r\n    },\r\n    label_juxtaposition_settings_chartsize_m: {\r\n        de: 'Medium',\r\n        en: 'Medium'\r\n    },\r\n    label_juxtaposition_settings_chartsize_l: {\r\n        de: 'Groß',\r\n        en: 'Large'\r\n    },\r\n    label_juxtaposition_settings_showLabels: {\r\n        de: 'Labels anzeigen',\r\n        en: 'Show labels'\r\n    },\r\n    label_juxtaposition_table_avg: {\r\n        de: 'Mittel',\r\n        en: 'Average'\r\n    },\r\n    label_juxtaposition_table_max: {\r\n        de: 'Max',\r\n        en: 'Max'\r\n    },\r\n    label_juxtaposition_table_median: {\r\n        de: 'Median',\r\n        en: 'Median'\r\n    },\r\n    label_juxtaposition_table_min: {\r\n        de: 'Min',\r\n        en: 'Min'\r\n    },\r\n    label_juxtaposition_table_rank: {\r\n        de: 'Rang',\r\n        en: 'Rank'\r\n    },\r\n    label_juxtaposition_table_value: {\r\n        de: 'Wert',\r\n        en: 'Value'\r\n    },\r\n    label_juxtaposition_unavailable: {\r\n        de: 'Keine Anzeige möglich.',\r\n        en: 'Data cannot be displayed.'\r\n    },\r\n    label_info: {\r\n        de: 'Info',\r\n        en: 'Info'\r\n    },\r\n    label_info_calculation: {\r\n        de: 'Berechnung',\r\n        en: 'Calculation'\r\n    },\r\n    label_info_calculation_none: {\r\n        de: 'Standard',\r\n        en: 'Default'\r\n    },\r\n    label_info_calculation_combined: {\r\n        de: 'Daten kombiniert',\r\n        en: 'Combined data'\r\n    },\r\n    label_info_calculation_supplement_impossible: {\r\n        de: 'Standard (Ergänzung nicht möglich)',\r\n        en: 'Default (Supplement not possible)'\r\n    },\r\n    label_info_calculation_supplemented: {\r\n        de: 'Daten ergänzt',\r\n        en: 'Supplemented data'\r\n    },\r\n    label_info_calculation_supplemented_combined: {\r\n        de: 'Daten ergänzt und kombiniert',\r\n        en: 'Supplemented and combined data'\r\n    },\r\n    label_info_composite: {\r\n        de: 'Enthaltene Lebensmittel',\r\n        en: 'Contained food items'\r\n    },\r\n    label_info_category: {\r\n        de: 'Kategorie',\r\n        en: 'Category'\r\n    },\r\n    label_info_foodClass: {\r\n        de: 'Lebensmittel-Klasse',\r\n        en: 'Food Class'\r\n    },\r\n    label_info_foodId: {\r\n        de: 'Lebensmittel ID',\r\n        en: 'Food Id'\r\n    },\r\n    label_info_foodName: {\r\n        de: 'Lebensmittel',\r\n        en: 'Food'\r\n    },\r\n    label_info_portion: {\r\n        de: 'Portionsdaten',\r\n        en: 'Portion data'\r\n    },\r\n    label_info_portionType: {\r\n        de: 'Portionstyp',\r\n        en: 'Portion type'\r\n    },\r\n    label_info_preparation: {\r\n        de: 'Zubereitungsart',\r\n        en: 'Preparation type'\r\n    },\r\n    label_info_source: {\r\n        de: 'Quelle',\r\n        en: 'Source'\r\n    },\r\n    label_language: {\r\n        de: 'Sprache',\r\n        en: 'Language'\r\n    },\r\n    label_mail_name: {\r\n        de: \"Name\",\r\n        en: \"Name\"\r\n    },\r\n    label_mail_address: {\r\n        de: \"Mail-Adresse\",\r\n        en: \"Mail address\"\r\n    },\r\n    label_mail_message: {\r\n        de: \"Ihre Nachricht\",\r\n        en: \"Your message\"\r\n    },\r\n    label_mail_characters_left: {\r\n        de: \"Noch /xx/ Zeichen verbleibend\",\r\n        en: \"/xx/ characters left\"\r\n    },\r\n    label_mail_too_long: {\r\n        de: \"Nachricht ist zu lang\",\r\n        en: \"Message too long\"\r\n    },\r\n    label_mail_error_name: {\r\n        de: \"Geben Sie bitte einen gültigen Namen ein.\",\r\n        en: \"Please enter a valid name.\"\r\n    },\r\n    label_mail_error_mailaddress: {\r\n        de: \"Geben Sie bitte eine gültige Mail-Adresse ein.\",\r\n        en: \"Please enter a valid mail address.\"\r\n    },\r\n    label_mail_error_nocontent: {\r\n        de: \"Geben Sie bitte eine Nachricht ein.\",\r\n        en: \"Please specify a message.\"\r\n    },\r\n    label_mail_error_content_too_long: {\r\n        de: \"Die eingegebene Nachricht ist zu lang.\",\r\n        en: \"The specified message is too long.\"\r\n    },\r\n    label_mail_error_verification: {\r\n        de: \"Bitte verifizieren, dass Sie kein Roboter sind.\",\r\n        en: \"Please verify that you are not a robot.\"\r\n    },\r\n    label_mode_all: {\r\n      de: \"Alle\",\r\n      en: \"All\"\r\n    },\r\n    label_mode_any: {\r\n        de: \"Eine\",\r\n        en: \"Any\"\r\n    },\r\n    label_na: {\r\n        de: 'Keine Angabe',\r\n        en: 'Not available'\r\n    },\r\n    label_noData: {\r\n        de: 'Keine Daten vorhanden',\r\n        en: 'No data available'\r\n    },\r\n    label_nutrient_alcohol: {\r\n        de: 'Alkohol',\r\n        en: 'Alcohol'\r\n    },\r\n    label_nutrient_ash: {\r\n        de: 'Reststoffe',\r\n        en: 'Ash'\r\n    },\r\n    label_nutrient_ash_short: {\r\n        de: 'Rest',\r\n        en: 'Ash'\r\n    },\r\n    label_nutrient_caffeine: {\r\n        de: 'Koffein',\r\n        en: 'Caffeine'\r\n    },\r\n    label_nutrient_carbohydrates: {\r\n        de: 'Kohlenhydrate',\r\n        en: 'Carbohydrates'\r\n    },\r\n    label_nutrient_carbohydrates_plural: {\r\n        de: 'Kohlenhydraten',\r\n        en: 'Carbohydrates'\r\n    },\r\n    label_nutrient_carbohydrates_m: {\r\n        de: 'Kohlenhyd.',\r\n        en: 'Carbs'\r\n    },\r\n    label_nutrient_carbohydrates_short: {\r\n        de: 'Kohlenhyd.',\r\n        en: 'Carbs'\r\n    },\r\n    label_nutrient_carbohydrates_fructose: {\r\n        de: 'Fruktose',\r\n        en: 'Fructose'\r\n    },\r\n    label_nutrient_carbohydrates_galactose: {\r\n        de: 'Galaktose',\r\n        en: 'Galactose'\r\n    },\r\n    label_nutrient_carbohydrates_glucose: {\r\n        de: 'Glukose (Traubenzucker)',\r\n        en: 'Glucose'\r\n    },\r\n    label_nutrient_carbohydrates_lactose: {\r\n        de: 'Laktose',\r\n        en: 'Lactose'\r\n    },\r\n    label_nutrient_carbohydrates_maltose: {\r\n        de: 'Maltose',\r\n        en: 'Maltose'\r\n    },\r\n    label_nutrient_carbohydrates_starch: {\r\n        de: 'Stärke',\r\n        en: 'Starch'\r\n    },\r\n    label_nutrient_carbohydrates_sucrose: {\r\n        de: 'Sukrose',\r\n        en: 'Sucrose'\r\n    },\r\n    label_nutrient_dietaryFibers: {\r\n        de: 'Ballaststoffe',\r\n        en: 'Dietary fibers'\r\n    },\r\n    label_nutrient_dietaryFibers_plural: {\r\n        de: 'Ballaststoffen',\r\n        en: 'Dietary fibers'\r\n    },\r\n    label_nutrient_dietaryFibers_short: {\r\n        de: 'Ballastst.',\r\n        en: 'Dietary fib.'\r\n    },\r\n    label_nutrient_energy: {\r\n        de: 'Energie',\r\n        en: 'Energy'\r\n    },\r\n    label_nutrient_lipids: {\r\n        de: 'Fett',\r\n        en: 'Fats'\r\n    },\r\n    label_nutrient_lipids_long: {\r\n        de: 'Fettsäuren',\r\n        en: 'Fatty acids'\r\n    },\r\n    label_nutrient_lipids_saturated: {\r\n        de: 'Gesättigte Fettsäuren',\r\n        en: 'Saturated fatty acids'\r\n    },\r\n    label_nutrient_lipids_saturated_short: {\r\n        de: 'Gesättigt',\r\n        en: 'Saturated'\r\n    },\r\n    label_nutrient_lipids_unsaturated: {\r\n        de: 'Ungesättigte Fettsäuren',\r\n        en: 'Unsaturated fatty acids'\r\n    },\r\n    label_nutrient_lipids_unsaturated_mono: {\r\n        de: 'Einfach ungesättigte Fettsäuren',\r\n        en: 'Mono-unsaturated fatty acids'\r\n    },\r\n    label_nutrient_lipids_unsaturated_mono_short: {\r\n        de: 'Einfach ungesättigt',\r\n        en: 'Mono-unsaturated'\r\n    },\r\n    label_nutrient_lipids_unsaturated_poly: {\r\n        de: 'Mehrfach ungesättigte Fettsäuren',\r\n        en: 'Poly-unsaturated fatty acids'\r\n    },\r\n    label_nutrient_lipids_unsaturated_poly_short: {\r\n        de: 'Mehrfach unges.',\r\n        en: 'Poly-unsaturated'\r\n    },\r\n    label_nutrient_lipids_transfattyAcids: {\r\n        de: 'Transfettsäuren',\r\n        en: 'Transfatty acids'\r\n    },\r\n    label_nutrient_lipids_omega3: {\r\n        de: 'Omega-3-Fettsäuren',\r\n        en: 'Omega-3 fatty acids'\r\n    },\r\n    label_nutrient_lipids_omega6: {\r\n        de: 'Omega-6-Fettsäuren',\r\n        en: 'Omega-6 fatty acids'\r\n    },\r\n    label_nutrient_lipids_cholesterol: {\r\n        de: 'Cholesterin',\r\n        en: 'Cholesterol'\r\n    },\r\n    label_nutrient_min: {\r\n        de: 'Mineralstoffe',\r\n        en: 'Minerals'\r\n    },\r\n    label_nutrient_min_m: {\r\n        de: 'Minerale',\r\n        en: 'Minerals'\r\n    },\r\n    label_nutrient_min_calcium: {\r\n        de: 'Kalzium',\r\n        en: 'Calcium'\r\n    },\r\n    label_nutrient_min_copper: {\r\n        de: 'Kupfer',\r\n        en: 'Copper'\r\n    },\r\n    label_nutrient_min_iron: {\r\n        de: 'Eisen',\r\n        en: 'Iron'\r\n    },\r\n    label_nutrient_min_magnesium: {\r\n        de: 'Magnesium',\r\n        en: 'Magnesium'\r\n    },\r\n    label_nutrient_min_manganese: {\r\n        de: 'Mangan',\r\n        en: 'Manganese'\r\n    },\r\n    label_nutrient_min_phosphorus: {\r\n        de: 'Phosphor',\r\n        en: 'Phosphorus'\r\n    },\r\n    label_nutrient_min_potassium: {\r\n        de: 'Kalium',\r\n        en: 'Potassium'\r\n    },\r\n    label_nutrient_min_selenium: {\r\n        de: 'Selen',\r\n        en: 'Selenium'\r\n    },\r\n    label_nutrient_min_sodium: {\r\n        de: 'Natrium',\r\n        en: 'Sodium'\r\n    },\r\n    label_nutrient_min_zinc: {\r\n        de: 'Zink',\r\n        en: 'Zinc'\r\n    },\r\n    label_nutrient_omega3: {\r\n        de: 'Omega-3-Fettsäuren',\r\n        en: 'Omega-3 Fatty acids'\r\n    },\r\n    label_nutrient_omega6: {\r\n        de: 'Omega-6-Fettsäuren',\r\n        en: 'Omega-6 Fatty acids'\r\n    },\r\n    label_nutrient_proteins: {\r\n        de: 'Eiweiß',\r\n        en: 'Proteins'\r\n    },\r\n    label_nutrient_proteins_alanine: {\r\n        de: 'Alanin',\r\n        en: 'Alanine'\r\n    },\r\n    label_nutrient_proteins_arginine: {\r\n        de: 'Arginin',\r\n        en: 'Arginine'\r\n    },\r\n    label_nutrient_proteins_asparticAcid: {\r\n        de: 'Asparaginsäure',\r\n        en: 'Aspartic acid'\r\n    },\r\n    label_nutrient_proteins_cystine: {\r\n        de: 'Cystein',\r\n        en: 'Cysteine'\r\n    },\r\n    label_nutrient_proteins_glysine: {\r\n        de: 'Glysin',\r\n        en: 'Glysine'\r\n    },\r\n    label_nutrient_proteins_glutamicAcid: {\r\n        de: 'Glutamin',\r\n        en: 'Glutamic acid'\r\n    },\r\n    label_nutrient_proteins_histidine: {\r\n        de: 'Histidin',\r\n        en: 'Histidine'\r\n    },\r\n    label_nutrient_proteins_isoleucine: {\r\n        de: 'Isoleucine',\r\n        en: 'Isoleucine'\r\n    },\r\n    label_nutrient_proteins_leucine: {\r\n        de: 'Leucin',\r\n        en: 'Leucine'\r\n    },\r\n    label_nutrient_proteins_lysine: {\r\n        de: 'Lysin',\r\n        en: 'Lysine'\r\n    },\r\n    label_nutrient_proteins_methionine: {\r\n        de: 'Methionin',\r\n        en: 'Methionine'\r\n    },\r\n    label_nutrient_proteins_phenylalanine: {\r\n        de: 'Phenylalanin',\r\n        en: 'Phenylalanine'\r\n    },\r\n    label_nutrient_proteins_proline: {\r\n        de: 'Prolin',\r\n        en: 'Proline'\r\n    },\r\n    label_nutrient_proteins_serine: {\r\n        de: 'Serin',\r\n        en: 'Serine'\r\n    },\r\n    label_nutrient_proteins_threonine: {\r\n        de: 'Threonin',\r\n        en: 'Threonine'\r\n    },\r\n    label_nutrient_proteins_tryptophan: {\r\n        de: 'Tryptophan',\r\n        en: 'Tryptophan'\r\n    },\r\n    label_nutrient_proteins_tyrosine: {\r\n        de: 'Tyrosin',\r\n        en: 'Tyrosine'\r\n    },\r\n    label_nutrient_proteins_valine: {\r\n        de: 'Valin',\r\n        en: 'Valine'\r\n    },\r\n    label_nutrient_remainder: {\r\n        de: 'Rest',\r\n        en: 'Remainder'\r\n    },\r\n    label_nutrient_sugar: {\r\n        de: 'Zucker',\r\n        en: 'Sugar'\r\n    },\r\n    label_nutrient_vit: {\r\n        de: 'Vitamine',\r\n        en: 'Vitamins'\r\n    },\r\n    label_nutrient_vit_a: {\r\n        de: 'Vitamin A (Retinol / Retinal)',\r\n        en: 'Vitamin A (Retinol / Retinal)'\r\n    },\r\n    label_nutrient_vit_b1: {\r\n        de: 'Vitamin B1 (Thiamin)',\r\n        en: 'Vitamin B1 (Thiamine)'\r\n    },\r\n    label_nutrient_vit_b2: {\r\n        de: 'Vitamin B2 (Riboflavin)',\r\n        en: 'Vitamin B2 (Riboflavin)'\r\n    },\r\n    label_nutrient_vit_b3: {\r\n        de: 'Vitamin B3 (Niacin)',\r\n        en: 'Vitamin B3 (Niacin)'\r\n    },\r\n    label_nutrient_vit_b5: {\r\n        de: 'Vitamin B5 (Pantothensäure)',\r\n        en: 'Vitamin B5 (Pantothenic acid)'\r\n    },\r\n    label_nutrient_vit_b6: {\r\n        de: 'Vitamin B6',\r\n        en: 'Vitamin B6'\r\n    },\r\n    label_nutrient_vit_b9: {\r\n        de: 'Vitamin B9 (Folsäure)',\r\n        en: 'Vitamin B9 (Folate)'\r\n    },\r\n    label_nutrient_vit_b12: {\r\n        de: 'Vitamin B12',\r\n        en: 'Vitamin B12'\r\n    },\r\n    label_nutrient_vit_c: {\r\n        de: 'Vitamin C',\r\n        en: 'Vitamin C'\r\n    },\r\n    label_nutrient_vit_d: {\r\n        de: 'Vitamin D',\r\n        en: 'Vitamin D'\r\n    },\r\n    label_nutrient_vit_e: {\r\n        de: 'Vitamin E (α-Tocopherol)',\r\n        en: 'Vitamin E (α-Tocopherol)'\r\n    },\r\n    label_nutrient_vit_e_ext: {\r\n        de: 'Weitere Vitamin-E-Formen',\r\n        en: 'Further forms of Vitamin E'\r\n    },\r\n    label_nutrient_vit_e_ext_tocopherolBeta: {\r\n        de: 'Beta-Tocopherol',\r\n        en: 'Beta-Tocopherol'\r\n    },\r\n    label_nutrient_vit_e_ext_tocopherolGamma: {\r\n        de: 'Gamma-Tocopherol',\r\n        en: 'Gamma-Tocopherol'\r\n    },\r\n    label_nutrient_vit_e_ext_tocopherolDelta: {\r\n        de: 'Delta-Tocopherol',\r\n        en: 'Delta-Tocopherol'\r\n    },\r\n    label_nutrient_vit_e_ext_tocotrienolAlpha: {\r\n        de: 'Alpha-Tocotrienol',\r\n        en: 'Alpha-Tocotrienol'\r\n    },\r\n    label_nutrient_vit_e_ext_tocotrienolBeta: {\r\n        de: 'Beta-Tocotrienol',\r\n        en: 'Beta-Tocotrienol'\r\n    },\r\n    label_nutrient_vit_e_ext_tocotrienolGamma: {\r\n        de: 'Gamma-Tocotrienol',\r\n        en: 'Gamma-Tocotrienol'\r\n    },\r\n    label_nutrient_vit_k: {\r\n        de: 'Vitamin K',\r\n        en: 'Vitamin K'\r\n    },\r\n    label_nutrient_vit_carotenoid: {\r\n        de: 'Provitamin A (Carotine)',\r\n        en: 'Carotene (total)'\r\n    },\r\n    label_nutrient_vit_carotenoid_alpha: {\r\n        de: 'Alpha-Carotin',\r\n        en: 'Alpha-Carotene'\r\n    },\r\n    label_nutrient_vit_carotenoid_beta: {\r\n        de: 'Beta-Carotin',\r\n        en: 'Beta-Carotene'\r\n    },\r\n    label_nutrient_vit_cryptoxanthin: {\r\n        de: 'Beta-Cryptoxanthin',\r\n        en: 'Beta-Cryptoxanthin'\r\n    },\r\n    label_nutrient_vit_scientific_a: {\r\n        de: 'inkl. Provitamin A / Carotine',\r\n        en: 'including Provitamin A / carotene'\r\n    },\r\n    label_nutrient_vit_scientific_b1: {\r\n        de: 'Thiamine',\r\n        en: 'Thiamine'\r\n    },\r\n    label_nutrient_vit_scientific_b2: {\r\n        de: 'Riboflavin',\r\n        en: 'Riboflavin'\r\n    },\r\n    label_nutrient_vit_scientific_b3: {\r\n        de: 'Niacin',\r\n        en: 'Niacin'\r\n    },\r\n    label_nutrient_vit_scientific_b5: {\r\n        de: 'Pantothensäure',\r\n        en: 'Pantothenic acid'\r\n    },\r\n    label_nutrient_vit_scientific_b9: {\r\n        de: 'Folsäure',\r\n        en: 'Folate'\r\n    },\r\n    label_nutrient_vit_scientific_b12: {\r\n        de: 'Cobalamin',\r\n        en: 'Cobalamin '\r\n    },\r\n    label_nutrient_vit_scientific_c: {\r\n        de: 'Ascorbinsäure',\r\n        en: 'Ascorbic acid'\r\n    },\r\n    label_nutrient_vit_scientific_d: {\r\n        de: 'Vitamin D',\r\n        en: 'Vitamin D'\r\n    },\r\n    label_nutrient_vit_scientific_e: {\r\n        de: 'inkl. Provitamin E / Tocopherol',\r\n        en: 'including provitamin E / Tocopherol'\r\n    },\r\n    label_nutrient_vit_scientific_k: {\r\n        de: 'Vitamin K',\r\n        en: 'Vitamin K'\r\n    },\r\n    label_nutrient_water: {\r\n        de: 'Wasser',\r\n        en: 'Water'\r\n    },\r\n    label_overview: {\r\n        de: 'Übersicht',\r\n        en: 'Overview'\r\n    },\r\n    label_overallview_avg: {\r\n        de: 'Mittelwert',\r\n        en: 'Average value'\r\n    },\r\n    label_overallview_avg_short: {\r\n        de: 'Mittel',\r\n        en: 'Mean'\r\n    },\r\n    label_overallview_compared: {\r\n        de: 'Vergleich zur Gesamtdatenbank',\r\n        en: 'Compared to Food Compare database'\r\n    },\r\n    label_overallview_max: {\r\n        de: 'Höchster Wert',\r\n        en: 'Highest value'\r\n    },\r\n    label_overallview_max_short: {\r\n        de: 'Max',\r\n        en: 'Max'\r\n    },\r\n    label_overallview_min: {\r\n        de: 'Niedrigster Wert',\r\n        en: 'Lowest value'\r\n    },\r\n    label_overallview_min_short: {\r\n        de: 'Min',\r\n        en: 'Min'\r\n    },\r\n    label_overallview_sum: {\r\n        de: 'Summe',\r\n        en: 'Sum'\r\n    },\r\n    label_overallview_title: {\r\n        de: 'Gesamtansicht der geladenen Daten',\r\n        en: 'Overall View of added food data'\r\n    },\r\n    label_per_100g: {\r\n        de: 'je 100 g',\r\n        en: 'per 100 g'\r\n    },\r\n    label_per_portion: {\r\n        de: 'je Portion',\r\n        en: 'per portion'\r\n    },\r\n    label_portion: {\r\n        de: 'Portion',\r\n        en: 'Portion'\r\n    },\r\n    label_portion_selected: {\r\n        de: 'Ausgewählte Portion',\r\n        en: 'Selected portion'\r\n    },\r\n    label_portion_common: {\r\n        de: 'Typische Portion',\r\n        en: 'Typical portion'\r\n    },\r\n    label_preferred_source: {\r\n        de: 'Bevorzugte Datenquelle',\r\n        en: 'Preferred data source'\r\n    },\r\n    label_prefix_energy_in: {\r\n        de: 'Energie in ',\r\n        en: 'Energy in '\r\n    },\r\n    label_prefix_hereof: {\r\n        de: 'davon',\r\n        en: 'hereof'\r\n    },\r\n    label_prefix_hereof_in: {\r\n        de: 'davon in ',\r\n        en: 'hereof in '\r\n    },\r\n    label_ranking_dietaryRequirements: {\r\n        de: 'Zeige Tagesbedarf',\r\n        en: 'Show dietary requirements'\r\n    },\r\n    label_reference: {\r\n        de: 'Bezug',\r\n        en: 'Reference'\r\n    },\r\n    label_reference_all: {\r\n        de: 'Alle Lebensmittel in Food Compare',\r\n        en: 'All foods in Food Compare'\r\n    },\r\n    label_reference_category: {\r\n        de: 'Alle Lebensmittel dieser Kategorie',\r\n        en: 'All foods in this category'\r\n    },\r\n    label_reference_panel: {\r\n        de: 'Alle hinzugefügten Lebensmittel im Datenbereich',\r\n        en: 'All foods added in the data panel'\r\n    },\r\n    label_requirement: {\r\n        de: 'Tagesbedarf',\r\n        en: 'Daily requirements'\r\n    },\r\n    label_requirement_chart: {\r\n        de: '% vom Tagesbedarf',\r\n        en: '% of daily requirement'\r\n    },\r\n    label_result: {\r\n        de: 'Ergebnis',\r\n        en: 'result'\r\n    },\r\n    label_results: {\r\n        de: 'Ergebnisse',\r\n        en: 'results'\r\n    },\r\n    label_selection: {\r\n        de: \"Auswahl:\",\r\n        en: \"Selection:\"\r\n    },\r\n    label_source: {\r\n        de: 'Datenquelle',\r\n        en: 'Data source'\r\n    },\r\n    label_source_supplement: {\r\n        de: \"Unvollständige Daten ergänzen\",\r\n        en: \"Supplement incomplete data\"\r\n    },\r\n    label_source_supplement_tooltip: {\r\n        de: \"Ergänzt fehlende Daten aus einer anderen Quelle, sofern diese die entsprechenden Daten enthält\",\r\n        en: \"Supplements missing data from another source in case that source contains the relevant data\"\r\n    },\r\n    label_source_combine: {\r\n        de: \"Datenquellen kombinieren\",\r\n        en: \"Combine data sources\"\r\n    },\r\n    label_source_combine_tooltip: {\r\n        de: \"Bildet den Daten-Mittelwert aus allen Datenquellen zu dem Lebensmittel\",\r\n        en: \"Create the average data out of all available data sources to this food\"\r\n    },\r\n    label_title: {\r\n        de: 'Titel',\r\n        en: 'Title'\r\n    },\r\n    label_tooltips: {\r\n        de: 'Tooltips anzeigen',\r\n        en: 'Show tool tips'\r\n    },\r\n    label_unit: {\r\n        de: 'Einheit',\r\n        en: 'Unit'\r\n    },\r\n    label_unit_conversion_title: {\r\n        de: 'Einheiten umwandeln',\r\n        en: 'Unit conversion'\r\n    },\r\n    label_unknown: {\r\n        de: 'Unbekannt',\r\n        en: 'Unknown'\r\n    },\r\n    label_usda_reference: {\r\n        de: 'Daten auf Food Data Central ansehen',\r\n        en: 'See the nutrient data at Food Data Central'\r\n    },\r\n    label_userSettings_age: {\r\n        de: 'Alter (Jahre)',\r\n        en: 'Age (years)'\r\n    },\r\n    label_userSettings_breastfeeding: {\r\n        de: 'stillend',\r\n        en: 'breast-feeding'\r\n    },\r\n    label_userSettings_intro: {\r\n        de: 'Die User-Einstellungen (Körpergröße, Gewicht, Geschlecht etc.) werden zur Berechnung bestimmter Werte verwendet, z.B. Grundumsatz oder Tagesbedarf an Vitaminen.',\r\n        en: 'User settings such as size, weight and sex are used for different nutrient calculations, e.g., basal metabolic rate or daily requirements of vitamins and the like.'\r\n    },\r\n    label_userSettings_leisureSports: {\r\n        de: 'Freizeitsport',\r\n        en: 'Leisure sports'\r\n    },\r\n    label_userSettings_leisureSports_tooltip: {\r\n        de: 'Angabe, ob Sie an dem betreffenden Tag zusätzlich zu Ihrer Tätigkeit nennenswert Sport ausgeübt haben, z.B. 30-45 min joggen oder 45-60 min Rad fahren (erhöht PAL-Wert um 0.3)',\r\n        en: 'Specifies whether you did some notable (leisure) sports or activity that day, like 30-45 minutes jogging or 45-60 minutes biking (increases PAL-value by 0.3)'\r\n    },\r\n    label_userSettings_palValue: {\r\n        de: 'PAL-Value',\r\n        en: 'Pal Value'\r\n    },\r\n    label_userSettings_pregnant: {\r\n        de: 'schwanger',\r\n        en: 'pregnant'\r\n    },\r\n    label_userSettings_sex: {\r\n        de: 'Geschlecht:',\r\n        en: 'Sex:'\r\n    },\r\n    label_userSettings_sex_male: {\r\n        de: 'männlich',\r\n        en: 'male'\r\n    },\r\n    label_userSettings_sex_female: {\r\n        de: 'weiblich',\r\n        en: 'female'\r\n    },\r\n    label_userSettings_size: {\r\n        de: 'Körpergröße (cm)',\r\n        en: 'Size (cm)'\r\n    },\r\n    label_userSettings_weight: {\r\n        de: 'Gewicht (kg)',\r\n        en: 'Weight (kg)'\r\n    },\r\n    label_value: {\r\n        de: 'Wert',\r\n        en: 'Value'\r\n    },\r\n    menu_food_data_panel: {\r\n        de: 'Lebensmittel analysieren',\r\n        en: 'Food analyzer'\r\n    },\r\n    menu_food_data_panel_m: {\r\n        de: 'Analyse',\r\n        en: 'Analyze'\r\n    },\r\n    menu_direct_compare: {\r\n        de: 'Direktvergleich',\r\n        en: 'Direct comparison'\r\n    },\r\n    menu_direct_compare_m: {\r\n        de: 'Vergleich',\r\n        en: 'Compare'\r\n    },\r\n    menu_home: {\r\n        de: 'Home',\r\n        en: 'Home'\r\n    },\r\n    menu_ranking: {\r\n        de: 'Ranking',\r\n        en: 'Food ranking'\r\n    },\r\n    menu_ranking_m: {\r\n        de: 'Ranking',\r\n        en: 'Ranking'\r\n    },\r\n    menu_settings: {\r\n        de: 'User Einstellungen',\r\n        en: 'User settings'\r\n    },\r\n    menu_settings_m: {\r\n        de: 'Optionen',\r\n        en: 'Settings'\r\n    },\r\n    menu_contact: {\r\n        de: 'Kontakt',\r\n        en: 'Contact'\r\n    },\r\n    menu_contact_sources: {\r\n        de: 'Quellen',\r\n        en: 'Sources'\r\n    },\r\n    menu_contact_dataprivacy: {\r\n        de: 'Datenschutz',\r\n        en: 'Data privacy'\r\n    },\r\n    menu_contact_versions: {\r\n        de: 'Versionen',\r\n        en: 'Versions'\r\n    },\r\n    menu_contact_impressum: {\r\n        de: 'Impressum',\r\n        en: 'Impressum'\r\n    },\r\n    message_email_success: {\r\n        de: 'Ihre Nachricht wurde versendet.',\r\n        en: 'Your message has been sent.'\r\n    },\r\n    message_email_error: {\r\n        de: 'Beim Versenden der Nachricht trat ein Fehler auf.',\r\n        en: 'Error while trying to send message.'\r\n    },\r\n    message_error_aggregated: {\r\n        de: 'Kombinierte Datenansicht kann nicht editiert werden.',\r\n        en: 'Composite data item cannot be edit.'\r\n    },\r\n    message_error_existing_element: {\r\n        de: 'Das ausgewählte Element befindet sich bereits im Datenbereich. Ein Lebensmittel kann nur einmal hinzugefügt werden.',\r\n        en: 'The selected food item already exists in your list. A food item can be added only once.'\r\n    },\r\n    message_error_incomplete_form: {\r\n        de: 'Das Formular ist unvollständig ausgefüllt.',\r\n        en: 'The form is incomplete.'\r\n    },\r\n    message_error_input: {\r\n        de: 'Der Wert liegt außerhalb des zulässiges Bereichs.',\r\n        en: 'The value is outside the permissible range.'\r\n    },\r\n    message_error_invalid_portion: {\r\n        de: 'Geben Sie bitte eine Portion zwischen 1 und 5000 Gramm an.',\r\n        en: 'Please specify a portion amount between 1 and 5000 gram.'\r\n    },\r\n    message_export_error: {\r\n        de: 'Export fehlgeschlagen: Fehler beim Serialisieren der Food Compare Daten.',\r\n        en: 'Export failed: Error while trying to serialize Food Compare data.'\r\n    },\r\n    message_filter_error_existing: {\r\n        de: 'Eine Bedingung zu diesem Nährstoff existiert bereits. Bitte wählen Sie einen anderen Wert aus.',\r\n        en: 'There already is a condition to this nutrient. Please select a different value.'\r\n    },\r\n    message_filter_error_range: {\r\n        de: 'Ungültige Eingabe! Das Minimum darf nicht größer als das Maximum sein.',\r\n        en: 'Invalid input! Minimum must not be above the maximum.'\r\n    },\r\n    message_filter_value_correction_min: {\r\n        de: 'Der Wert wurde an das Minimum des Wertebereichs angepasst.',\r\n        en: 'The value has been changed to the minimum of the data range.'\r\n    },\r\n    message_filter_value_correction_max: {\r\n        de: 'Der Wert wurde an das Maximum des Wertebereichs angepasst.',\r\n        en: 'The value has been changed to the maximum of the data range.'\r\n    },\r\n    message_import_error_invalidfile: {\r\n        de: 'Datei konnte nicht verarbeitet werden. Möglicherweise ist dies keine Food Compare Datei.',\r\n        en: 'Could not parse data file. Possibly this is not a Food Compare data file.'\r\n    },\r\n    message_import_error_parse: {\r\n        de: 'Fehler beim Deserialisieren der Food Compare Datei.',\r\n        en: 'Error while trying to deserialize Food Compare data file.'\r\n    },\r\n    message_import_question: {\r\n        de: 'Im Datenbereich befinden sich noch Datenobjekte, die mit den zu importierenden Daten überschrieben werden. Möchten Sie trotzdem fortfahren?',\r\n        en: 'The data panel still contains food data objects which will be overwritten by the imported data. Do you still want to proceed?'\r\n    },\r\n    menu_info: {\r\n        de: 'Info',\r\n        en: 'Info'\r\n    },\r\n    message_userdata_success: {\r\n        de: 'Änderungen wurden gespeichert.',\r\n        en: 'Saved changes.'\r\n    },\r\n    message_userdata_error_title: {\r\n        de: 'Fehlerhafte Eingabe',\r\n        en: 'Invalid input'\r\n    },\r\n    message_userdata_error_age: {\r\n        de: 'Geben Sie bitte ein Alter zwischen 15 und 100 Jahren ein.',\r\n        en: 'Please enter an age between 15 and 100 years.'\r\n    },\r\n    message_userdata_error_size: {\r\n        de: 'Geben Sie bitte eine Körpergröße zwischen 80 und 225 cm ein.',\r\n        en: 'Please enter a body height between 80 and 225 cm.'\r\n    },\r\n    message_userdata_error_weight: {\r\n        de: 'Geben Sie bitte ein Gewicht zwischen 30 und 250 kg ein.',\r\n        en: 'Please enter a body weight between 30 and 250 kg.'\r\n    },\r\n    modal_settings_title: {\r\n        de: \"Einstellungen\",\r\n        en: \"Settings\"\r\n    },\r\n    modal_settings_label_unit_vitamins: {\r\n        de: \"Einheit für Vitamine/Mineralstoffe\",\r\n        en: \"Unit of vitamins/minerals\"\r\n    },\r\n    modal_settings_label_unit_proteins: {\r\n        de: \"Einheit für Aminosäuren\",\r\n        en: \"Unit of amino acids:\"\r\n    },\r\n    modal_settings_label_provitamins: {\r\n        de: \"Provitamine in Berechnung berücksichtigen\",\r\n        en: \"Include provitamins in calculation:\"\r\n    },\r\n    modal_settings_label_dietaryRequirments: {\r\n        de: \"Anzeige des Tagesbedarfs\",\r\n        en: \"Display of daily requirement\"\r\n    },\r\n    palcat_name_1: {\r\n        de: 'Extrem niedrige Aktivität',\r\n        en: 'Extremely light activity.'\r\n    },\r\n    palcat_desc_1: {\r\n        de: 'Bspw. ans Bett gebundene Menschen.',\r\n        en: 'Such as bed-ridden people.'\r\n    },\r\n    palcat_name_2: {\r\n        de: 'Sehr nierdige Aktivität',\r\n        en: 'Very light activity'\r\n    },\r\n    palcat_desc_2: {\r\n        de: 'Bspw. sehr einfache Büroarbeit in permanent sitzender Haltung, Reisende in einem Flugzeug oder Zug (sitzend).',\r\n        en: 'Such as very light office work (permanently seated), passengers sitting in a train or airplane.'\r\n    },\r\n    palcat_name_3: {\r\n        de: 'Niedrige Aktivität',\r\n        en: 'Light activity'\r\n    },\r\n    palcat_desc_3: {\r\n        de: 'Überwiegend sitzende Tätigkeit, mit Phasen im stehenden Zustand (z.B. Berufsfahrer, Ärzte, Lehrer, Schüler) oder dem Ausführen zusätzlicher leichter Tätigkeiten (z.B. einfache Haushaltstätigkeiten).',\r\n        en: 'Mostly seated activity, with phases of standing activity (e.g., drivers, doctors, students, teachers...) or additional tasks like simple household chores.'\r\n    },\r\n    palcat_name_4: {\r\n        de: 'Mäßige Aktivität',\r\n        en: 'Mediocre Activity'\r\n    },\r\n    palcat_desc_4: {\r\n        de: 'Überwiegende stehende Tätigkeit (z.B. Handwerker, Verkäufer, Kellner, Krankenschwester).',\r\n        en: 'Mostly standing activity (e.g. shop assistants, waiters, craftsmen, nurses).'\r\n    },\r\n    palcat_name_5: {\r\n        de: 'Hohe Aktivität',\r\n        en: 'High activity'\r\n    },\r\n    palcat_desc_5: {\r\n        de: 'Körperlich schwere Arbeit, z.B. Bauarbeiter, Möbelpacker, Sportlehrer.',\r\n        en: 'Hard work, such as construction workers, movers, gym teachers etc.'\r\n    },\r\n    palcat_name_6: {\r\n        de: 'Sehr hohe Aktivität',\r\n        en: 'Very high activity'\r\n    },\r\n    palcat_desc_6: {\r\n        de: 'Körperlich sehr schwere Arbeit, z.B. Bauarbeiter, Möbelpacker, Fitnesstrainer, Bergarbeiter.',\r\n        en: 'Very hard work, such as construction workers, movers, fitness trainers, miners etc.'\r\n    },\r\n    palcat_name_7: {\r\n        de: 'Extrem hohe Aktivität',\r\n        en: 'Extremely high activity'\r\n    },\r\n    palcat_desc_7: {\r\n        de: 'Bspw. (Hoch-) Leistungssportler.',\r\n        en: 'Such as professional athletes.'\r\n    },\r\n    portion_100g: {\r\n        de: '100 Gramm',\r\n        en: '100 Gram'\r\n    },\r\n    portion_individual: {\r\n        de: 'Individuell',\r\n        en: 'Individual'\r\n    },\r\n    ranking_note: {\r\n        de: \"Die angezeigten Ergebnisse sind auf die 100 Lebensmittel mit den höchsten Anteilen begrenzt.\",\r\n        en: \"The results being displayed are limited to the top 100 food items of the selected category.\"\r\n    },\r\n    text_contact_disclaimer1: {\r\n        de: 'Alle Rechte vorbehalten.',\r\n        en: 'All rights reserved.'\r\n    },\r\n    text_contact_disclaimer2: {\r\n        de: 'Food Compare basiert auf freien Datenquellen, die im Quellen-Tab näher beschrieben sind. Die Lebensmitteldaten stammen von Food Data Central, einem Teilprojekt des United States Department of Agriculture. Im Info-Tab des Daten-Panels existiert für jedes Lebensmittel ein Link zu den abgegriffenen Daten.',\r\n        en: 'Food Compare is based upon free data sources specified in the sources tab. Food data used in the project originates from Food Data Central as part of the United States Department of Agriculture. There is a direct link to the original source data of each food element in the info data page of the food data panel.'\r\n    },\r\n    text_contact_disclaimer3: {\r\n        de: 'Die für die Berechnung des Tagesbedarfs verwendeten Einstellungen entstammen der Deutschen Gesellschaft für Ernährung (DGE).',\r\n        en: 'For the computation of daily dietary requirements, data from the German Nutrition Society (DGE) is used.'\r\n    },\r\n    text_contact_form: {\r\n        de: 'Bitte benutzen Sie das Kontaktformular, wenn Sie Fragen oder Feedback zu Food Compare haben.',\r\n        en: 'Please use the contact form below if you have questions of feedback about Food Compare.'\r\n    },\r\n    text_contact_source1: {\r\n        de: 'Quellen:',\r\n        en: 'Sources:',\r\n    },\r\n    text_contact_source2: {\r\n        de: 'Nährwert-Daten:',\r\n        en: 'Nutrient Data:',\r\n    },\r\n    text_contact_source3: {\r\n        de: 'Daten für Tagesbedarf von Vitaminen/Mineralstoffen:',\r\n        en: 'Source for Dietary Requirement of Minerals and Vitamins',\r\n    },\r\n    text_contact_source4: {\r\n        de: 'Berechnung von Grundumsatz und PAL:',\r\n        en: 'Calculation of BMR and PAL:',\r\n    },\r\n    text_empty_fooddatapanel: {\r\n        de: 'Klicken Sie links auf den Plus-Button, um Lebensmittel zum Analysebereich hinzufügen. Es können beliebig viele Lebensmittel hinzugefügt werden. Klicken Sie den Stapel-Button, um ein komplexes Lebensmittel bzw. ein Menü zusammenzustellen, dessen Gesamtwerte dann angezeigt werden.',\r\n        en: 'Click the plus button to add food elements to the analysis panel. You can add as many food elements as you like. Click the stack button if you want to create complex meals to show their total nutrient data.'\r\n    },\r\n    text_empty_fooddatapanel_mobileInfo: {\r\n        de: 'Das Erstellen komplexer Lebensmittel wird auf Mobilgeräten aktuell nicht unterstützt.',\r\n        en: 'Presently, complex menus cannot be created on mobile devices.'\r\n    },\r\n    text_ranking: {\r\n        de: \"Sie können in diesem Bereich Nahrungsmittel nach einem bestimmten Nährstoff, Vitamin oder Mineralstoff sortiert anzeigen lassen. Wählen Sie dazu eine Kategorie aus, eine Gruppe und eine bestimmte Nährstoffangabe (Wert).\",\r\n        en: \"In this section you may display food items sorted by a specific nutrient, vitamin or mineral. Please select a food category, nutrient group and value to display the corresponding ranking chart.\"\r\n    },\r\n    text_setUserdata_p1: {\r\n        de: 'Es werden aktuell Referenzwerte für einen durchschnittlichen Erwachsenen (männlich, 35 Jahre) angezeigt.',\r\n        en: 'You are currently seeing the reference data for an average adult (male, 35 years).'\r\n    },\r\n    text_setUserdata_p2: {\r\n        de: 'Geben Sie, bei Bedarf, in den Einstellungen Ihre eigenen Körperdaten für ein genaueres Ergebnis ein.',\r\n        en: 'For more accurate data, if necessary, please enter your personal body data in the settings menu.'\r\n    },\r\n    text_setUserdata_p3: {\r\n        de: 'Die Referenzwerte beziehen sich auf die eingestellten Nutzerdaten.',\r\n        en: 'The reference data refer to your entered body data.'\r\n    },\r\n    tooltip_category_tree: {\r\n        de: 'Kategoriebaum anzeigen',\r\n        en: 'Show category tree'\r\n    },\r\n    tooltip_filter: {\r\n        de: 'Lebensmittel filtern',\r\n        en: 'Food filter'\r\n    },\r\n    tooltip_filter_edit: {\r\n        de: 'Bedingung bearbeiten',\r\n        en: 'Edit condition'\r\n    },\r\n    tooltip_filter_option_all: {\r\n        de: 'Lebensmittel müssen alle Bedingungen erfüllen',\r\n        en: 'Food elements must fulfill all conditions'\r\n    },\r\n    tooltip_filter_option_any: {\r\n        de: 'Lebensmittel müssen eine der Bedingungen erfüllen',\r\n        en: 'Food elements must fulfill one of the conditions'\r\n    },\r\n    tooltip_filter_remove: {\r\n        de: 'Bedingung entfernen',\r\n        en: 'Remove condition'\r\n    },\r\n    tooltip_icon_charts: {\r\n        de: 'Diagramm-Modus',\r\n        en: 'Chart mode'\r\n    },\r\n    tooltip_icon_close: {\r\n        de: 'Tab schließen',\r\n        en: 'Close tab'\r\n    },\r\n    tooltip_icon_editFoodItem: {\r\n        de: 'Ausgewähltes Lebensmittel bearbeiten',\r\n        en: 'Edit selected food item'\r\n    },\r\n    tooltip_icon_export: {\r\n        de: 'Aktuelle Datenansicht speichern (Export)',\r\n        en: 'Save current data view to file (export)'\r\n    },\r\n    tooltip_icon_import: {\r\n        de: 'Food Compare Daten von Datei importieren',\r\n        en: 'Import Food Compare data from file'\r\n    },\r\n    tooltip_icon_minerals: {\r\n        de: 'Buch der Mineralstoffe öffnen',\r\n        en: 'Open minerals book'\r\n    },\r\n    tooltip_icon_newFoodItem: {\r\n        de: 'Lebensmittel hinzufügen',\r\n        en: 'Add food item'\r\n    },\r\n    tooltip_icon_newFoodItemStack: {\r\n        de: 'Kombinierte Liste an Lebensmitteln hinzufügen (aggregierte Daten)',\r\n        en: 'Add composite list of food items (aggregated data)'\r\n    },\r\n    tooltip_icon_overallView: {\r\n        de: 'Gesamtansicht aller Daten anzeigen',\r\n        en: 'Show overall data view'\r\n    },\r\n    tooltip_icon_proteins: {\r\n        de: 'Buch der essenziellen Aminosäuren öffnen',\r\n        en: 'Open book of essential amino acids'\r\n    },\r\n    tooltip_icon_removeAll: {\r\n        de: 'Alle Tabs schließen',\r\n        en: 'Close all data tabs'\r\n    },\r\n    tooltip_icon_settings: {\r\n        de: 'Einstellungen zu Diagrammen/Tabellendaten öffnen',\r\n        en: 'Open settings menu für chart and table data'\r\n    },\r\n    tooltip_icon_table: {\r\n        de: 'Tabellen-Modus',\r\n        en: 'Table mode'\r\n    },\r\n    tooltip_icon_vitamins: {\r\n        de: 'Vitaminbuch öffnen',\r\n        en: 'Open vitamins book'\r\n    },\r\n    tooltip_source: {\r\n        de: 'Verwendete Quelle: ',\r\n        en: 'Used source: '\r\n    },\r\n    vitamin_book_disclaimer: {\r\n        de: 'Die hier präsentierten Informationen wurden aus freien Quellen wie Wikipedia oder Websites zu Gesundheit und Ernährung zusammengetragen. Es besteht kein Anspruch auf Vollständigkeit oder Korrektheit.',\r\n        en: 'The informationed shown in this booklet originate from free sources such as Wikipedia or health- or nutrition-related websites. There is no claim to completeness or correctness.'\r\n    },\r\n}","export const color_yellow = \"rgba(255, 255, 153, 1.0)\";   // Default for Lipids\r\nexport const color_green = \"rgba(132, 225, 132, 1.0)\";   // Default for Carbs\r\n\r\nexport const color_green_light = \"rgba(196, 236, 193, 1.0)\";   // Default for Sugar (as part of carbs)\r\nexport const color_red = \"rgba(255, 204, 204, 1.0)\";   // Default for proteins\r\nexport const color_blue = \"rgba(133, 193, 233, 1.0)\";   // Default for Water\r\nexport const color_purple = \"rgba(213, 205, 237, 1.0)\"; // Default color for a blue line\r\n\r\nexport const color_chart_fawn = \"rgba(235, 232, 171, 1.0)\";\t\t// brown\r\n\r\nexport const color_gray = \"rgba(235, 235, 235, 1.0)\"; // Default color for a blue line\r\nexport const color_line_blue = \"rgba(0, 107, 215, 1.0)\"; // Default color for a blue line\r\nexport const color_line_red = \"rgba(255, 102, 102, 1.0)\"; // Default color for a red line\r\n\r\nexport const color_chart_green_1 = \"rgba(39, 177, 96)\";\t\t// Dark green\r\nexport const color_chart_green_2 = \"rgba(137, 238, 137)\";\t// Normal green\r\nexport const color_chart_green_3 = \"rgba(222, 245, 222)\";\t\t// Light green\r\n\r\nexport const color_chart_yellow_0 = \"rgba(190, 145, 0)\";\r\nexport const color_chart_yellow_1 = \"rgba(212, 172, 13)\";\t\t// Dark yellow\r\nexport const color_chart_yellow_2 = \"rgba(244, 208, 63)\";\t// Normal yellow\r\nexport const color_chart_yellow_3 = \"rgba(249, 231, 159)\";\t\t// Light yellow\r\nexport const color_chart_yellow_4 = \"rgba(255, 202, 40)\";\r\n\r\nexport const color_chart_yellow_green_1 =\"rgba(174, 213, 129)\"\r\nexport const color_chart_yellow_green_2 =\"rgba(76, 175, 80)\"\r\nexport const color_chart_yellow_green_3 =\"rgba(124, 179, 66)\"\r\n\r\nexport const color_chart_orange = \"rgba(230, 126, 34)\";\r\nexport const color_x = \"rgba(51, 204, 204)\"\r\n\r\nexport const color_chart_black = \"rgba(0, 0, 0)\";\r\n\r\nexport const color_chart_misc = color_gray;\r\n\r\n// Chart sizes:\r\n\r\nexport const default_chart_height = 380;\r\nexport const default_chart_height_m = 190;\r\n\r\nexport const basedata_piechart_width = 300;\r\nexport const basedata_piechart_width_m = 200;\r\n\r\nexport const basedata_barchart_width = 380;\r\nexport const basedata_barchart_width_m = 253;\r\n\r\nexport const max_portion = 5000;\r\n\r\nexport const color_water = color_blue;\r\nexport const color_lipids = color_yellow;\r\nexport const color_carbs = color_green;\r\nexport const color_carbs_sugar = color_green_light;\r\nexport const color_carbs_dietaryFibers = color_chart_fawn;\r\nexport const color_ash = color_gray;\r\nexport const color_caffeine = color_chart_yellow_0;\r\n\r\nexport const color_carbs_mono_glucose = color_chart_yellow_green_1\r\nexport const color_carbs_mono_fructose = color_chart_yellow_green_2\r\nexport const color_carbs_mono_galactose = color_chart_yellow_green_3\r\n\r\nexport const color_carbs_di_sucrose = color_chart_yellow_4\r\nexport const color_carbs_di_lactose = color_chart_yellow_3\r\nexport const color_carbs_di_maltose = color_chart_yellow_1\r\n\r\nexport const color_carbs_starch = color_chart_orange\r\n\r\nexport const color_alcohol = color_x;\r\n\r\nexport const color_proteins = color_red;\r\n\r\nexport const color_lipids_saturated = color_chart_yellow_4;\r\nexport const color_lipids_unsaturated_mono = color_chart_yellow_green_1;\r\nexport const color_lipids_unsaturated_poly = color_chart_yellow_green_2;\r\n\r\nexport const color_lipids_omega3 = color_chart_green_1;\r\nexport const color_lipids_omega6 = color_chart_yellow_2;\r\n\r\nexport const color_lipids_misc = color_gray;\r\n\r\nexport const direct_compare_color1 = \"#ffe085\"\r\nexport const direct_compare_color2 = \"#d9ecff\"","/**\r\n * Returns a default-styled configuration for a bar chart.\r\n *\r\n * title: The charts title.\r\n * unit: The unit to use for the axis title and tooltip.\r\n * minYValue: Optional, a pre-defined maxYValue for the Y axis (e.g. 100)\r\n */\r\n\r\nexport function getBarChartOptions(title: string, unit: string, maxYValue?: number | undefined) {\r\n    let yAxis: any = {\r\n        title: {\r\n            display: true,\r\n            text: unit\r\n        }\r\n    }\r\n\r\n    if (maxYValue) {\r\n        yAxis = {...yAxis, min: 0, max: maxYValue}\r\n    }\r\n    const scalesObject = {y: yAxis}\r\n    return getOptions(title, unit, scalesObject);\r\n}\r\n\r\n\r\nexport function getBarChartOptionsForRanking(title: string, unit: string) {\r\n    const scales = getScalesForRankingChart();\r\n    return getOptions(title, unit, scales);\r\n}\r\n\r\nexport function getBarChartOptionsForJuxtaposition(title: string, unit: string) {\r\n    const scales = getScalesForRankingChart();\r\n    return getOptions(title, unit, scales);\r\n}\r\n\r\n\r\n\r\nexport function getPieChartOptions(title: string, unit: string) {\r\n    return getOptions(title, unit);\r\n}\r\n\r\n\r\nfunction getOptions(title: string, unit: string, scalesObject?: any | undefined) {\r\n    const titleObj = title ? {display: true, text: title, fontSize: 18} : null;\r\n\r\n    let options: any = {\r\n        maintainAspectRatio: false,\r\n        responsive: true,\r\n        plugins: {\r\n            title: titleObj,\r\n            tooltip: getToolTips(unit),\r\n            legend: {\r\n                display: false\r\n            },\r\n        }\r\n    }\r\n\r\n    if (scalesObject !== undefined) {\r\n        options = {...options, scales: scalesObject}\r\n    }\r\n\r\n    return options;\r\n}\r\n\r\nfunction getToolTips(unit: string) {\r\n    return {\r\n        enabled: true,\r\n        maintainAspectRatio: true,\r\n        callbacks: {\r\n            label: tooltipItem => `${tooltipItem.label}: ${tooltipItem.formattedValue} ${unit}`\r\n        }\r\n    };\r\n}\r\n\r\n\r\nfunction getScalesForRankingChart() {\r\n    return {\r\n        x: {\r\n            ticks: {\r\n                autoSkip: false\r\n            },\r\n        }\r\n    };\r\n}","import React, {useContext} from \"react\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {CHART_TYPE_BAR, CHART_TYPE_PIE} from \"../../config/Constants\";\r\nimport {Form} from 'react-bootstrap';\r\nimport {PieChartConfigurationProps} from \"../../types/livedata/ChartPropsData\";\r\n\r\nexport function PieChartConfigurationForm(props: PieChartConfigurationProps) {\r\n    const languageContext = useContext(LanguageContext)\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <form className=\"form-inline form-group\">\r\n                    <Form.Label className=\"form-elements\">\r\n                        <b>{applicationStrings.label_charttype[languageContext.language]}:</b>\r\n                    </Form.Label>\r\n                    <Form.Check inline={true}\r\n                                className=\"form-radiobutton\"\r\n                                label={applicationStrings.label_charttype_pie[languageContext.language]}\r\n                                type=\"radio\"\r\n                                value={CHART_TYPE_PIE}\r\n                                checked={props.chartType === CHART_TYPE_PIE}\r\n                                onChange={props.handleRadioButtonClick}>\r\n                    </Form.Check>\r\n                    <Form.Check inline={true}\r\n                                className=\"form-radiobutton form-horizontal-separation\"\r\n                                label={applicationStrings.label_charttype_bar[languageContext.language]}\r\n                                type=\"radio\"\r\n                                value={CHART_TYPE_BAR}\r\n                                checked={props.chartType === CHART_TYPE_BAR}\r\n                                onChange={props.handleRadioButtonClick}>\r\n                    </Form.Check>\r\n                    <Form.Check inline={true}\r\n                                className=\"form-radiobutton\"\r\n                                label={applicationStrings.checkbox_chartoption_showLegend[languageContext.language]}\r\n                                defaultChecked={props.showLegend}\r\n                                disabled={props.chartType === CHART_TYPE_BAR}\r\n                                onClick={props.handleLegendCheckboxClick}>\r\n                    </Form.Check>\r\n                    {props.detailsCheckboxAvailable &&\r\n                    <Form.Check inline={true}\r\n                                className=\"form-radiobutton\"\r\n                                label={applicationStrings.checkbox_chartoption_showDetails[languageContext.language]}\r\n                                defaultChecked={props.showDetails}\r\n                                onClick={props.handleDetailsCheckboxClick}>\r\n                    </Form.Check>\r\n                    }\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {useEffect, useState} from \"react\";\r\nimport {smallFormsScreenSize} from \"../config/ApplicationSetting\";\r\nimport {isMobile} from \"react-device-detect\";\r\n\r\nexport interface WindowDimension {\r\n    width: number\r\n    height: number\r\n}\r\n\r\nfunction getCurrentWindowDimension() {\r\n    return {\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n    }\r\n}\r\n\r\nexport function useWindowDimension() {\r\n    const [windowDimension, setWindowDimension] = useState(getCurrentWindowDimension())\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"resize\", () => setWindowDimension(getCurrentWindowDimension))\r\n        return () => window.removeEventListener(\"resize\", () => setWindowDimension(getCurrentWindowDimension))\r\n    }, [])\r\n\r\n    return windowDimension\r\n}\r\n\r\n\r\nexport function isSmallScreen(windowDimension: WindowDimension) {\r\n    return windowDimension.width < smallFormsScreenSize.width || windowDimension.height < smallFormsScreenSize.height\r\n}\r\n\r\nexport function isNarrowScreen(windowDimension: WindowDimension) {\r\n    return windowDimension.width < smallFormsScreenSize.width\r\n}\r\n\r\nexport function isMobileDevice() {\r\n    return isMobile\r\n}","import React, {ReactElement} from \"react\";\r\nimport {isMobileDevice} from \"../../service/WindowDimension\";\r\n\r\ninterface CustomLegendProps {\r\n    legendData: Array<any>\r\n}\r\n\r\nexport function CustomLegend(props: CustomLegendProps) {\r\n\r\n    const renderLegend = () => {\r\n        let legend: Array<ReactElement> = [];\r\n        const mobile = isMobileDevice()\r\n\r\n        for (let i = 0; i < props.legendData.length; i++) {\r\n            const element = props.legendData[i];\r\n            const indent = element.indent > 0 ? \"2ch\" : \"0ch\";\r\n            const id = `legendrow ${i}`;\r\n            const legendItemLabelClass = mobile ? \"legend-item-label\" : \"legend-item-label\"\r\n\r\n            legend.push(\r\n                <div key={id} className=\"row\" style={{marginLeft: indent}}>\r\n                    <div className={\"d-flex align-items-center\"}>\r\n                        <div className=\"legend-item\" style={{background: element.color}}></div>\r\n                        <span className={legendItemLabelClass}>{element.item}</span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return legend;\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{borderLeft: \"1px solid #aaaaaa\"}}>\r\n            <div>\r\n                {renderLegend()}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}","import FoodItem, {NutrientData} from \"../../types/nutrientdata/FoodItem\";\r\nimport SelectedFoodItem from \"../../types/livedata/SelectedFoodItem\";\r\n\r\nexport function getSourceName(sourceId: number) {\r\n    switch (sourceId) {\r\n        case 0:\r\n            return \"SR Legacy\"\r\n        case 1:\r\n            return \"FNDDS\"\r\n        default:\r\n            return \"unknown\"\r\n    }\r\n}\r\n\r\nexport function getNutrientData(selectedFoodItem: SelectedFoodItem): NutrientData {\r\n    return getNutrientDataForFoodItem(selectedFoodItem.foodItem, selectedFoodItem.selectedSource,\r\n        selectedFoodItem.supplementData, selectedFoodItem.combineData)\r\n}\r\n\r\nexport function getNutrientDataForFoodItem(foodItem: FoodItem, sourceToUse?: number, supplementData?: boolean,\r\n                                           combineData?: boolean): NutrientData {\r\n    if (sourceToUse === null || sourceToUse === undefined || foodItem.nutrientDataList.length === 1) {\r\n        return foodItem.nutrientDataList[0]\r\n    } else {\r\n        const shouldSupplementData = supplementData && canSupplementData(foodItem.nutrientDataList)\r\n        const nutrientData = foodItem.nutrientDataList.find(\r\n            nutrientDataObject => nutrientDataObject.source.id === sourceToUse\r\n        )\r\n        if (nutrientData) {\r\n            if(shouldSupplementData || combineData) {\r\n                const complement = foodItem.nutrientDataList.find(\r\n                    nutrientDataObject => nutrientDataObject.source.id !== sourceToUse\r\n                )\r\n                if(complement) {\r\n                    if(supplementData && !combineData) {\r\n                        return supplementNutrientData(nutrientData, complement)\r\n                    }\r\n                    if(combineData) {\r\n                        return combineNutrientData(nutrientData, complement)\r\n                    }\r\n                }\r\n            }\r\n            return nutrientData\r\n        } else {\r\n            return foodItem.nutrientDataList[0]\r\n        }\r\n    }\r\n}\r\n\r\nexport function supplementNutrientData(selectedNutrientData: NutrientData, complementeNutrientData: NutrientData): NutrientData {\r\n    const supplementedBaseData = supplementCategory(selectedNutrientData.baseData, complementeNutrientData.baseData)\r\n    const supplementedVitaminData = supplementCategory(selectedNutrientData.vitaminData, complementeNutrientData.vitaminData)\r\n    const supplementedMineralData = supplementCategory(selectedNutrientData.mineralData, complementeNutrientData.mineralData)\r\n    const supplementedCarbsData = supplementCategory(selectedNutrientData.carbohydrateData, complementeNutrientData.carbohydrateData)\r\n    const supplementedProteinData = supplementCategory(selectedNutrientData.proteinData, complementeNutrientData.proteinData)\r\n\r\n    const supplementedOmegaData = supplementCategory(selectedNutrientData.lipidData.omegaData, complementeNutrientData.lipidData.omegaData)\r\n    let supplementedLipidData = supplementCategory(selectedNutrientData.lipidData, complementeNutrientData.lipidData)\r\n    supplementedLipidData.omegaData = supplementedOmegaData\r\n\r\n    return {\r\n        source: selectedNutrientData.source,\r\n        sourceItemId: selectedNutrientData.sourceItemId,\r\n        baseData: supplementedBaseData,\r\n        vitaminData: supplementedVitaminData,\r\n        mineralData: supplementedMineralData,\r\n        carbohydrateData: supplementedCarbsData,\r\n        proteinData: supplementedProteinData,\r\n        lipidData: supplementedLipidData\r\n    }\r\n}\r\n\r\n\r\nfunction supplementCategory(nutrientCategory1: any, nutrientCategory2: any): any {\r\n    if(!nutrientCategory2) {\r\n        return nutrientCategory1\r\n    }\r\n\r\n    // Clone to prevent overwriting the nutrient database elements!\r\n    const newDataObject = {...nutrientCategory1}\r\n\r\n    const keysComplement = Object.keys(nutrientCategory2)\r\n    keysComplement.forEach(key => {\r\n        if(newDataObject[key] === null) {\r\n            const objectHasChildren = nutrientCategory2[key] && Object.keys(nutrientCategory2[key]).length > 0\r\n            // Add value from source 2 to source 1 if it is not a sub-object (like Omega object on Lipids object):\r\n            if(nutrientCategory2[key] !== null && !objectHasChildren) {\r\n                newDataObject[key] = nutrientCategory2[key]\r\n            }\r\n        }\r\n    })\r\n\r\n    return newDataObject\r\n}\r\n\r\n\r\nexport function combineNutrientData(selectedNutrientData: NutrientData, complementeNutrientData: NutrientData): NutrientData {\r\n    const combinedBaseData = combineCategory(selectedNutrientData.baseData, complementeNutrientData.baseData)\r\n    const combinedVitaminData = combineCategory(selectedNutrientData.vitaminData, complementeNutrientData.vitaminData)\r\n    const combinedMineralData = combineCategory(selectedNutrientData.mineralData, complementeNutrientData.mineralData)\r\n    const combinedCarbsData = combineCategory(selectedNutrientData.carbohydrateData, complementeNutrientData.carbohydrateData)\r\n    const combinedProteinData = combineCategory(selectedNutrientData.proteinData, complementeNutrientData.proteinData)\r\n\r\n    const combinedOmegaData = combineCategory(selectedNutrientData.lipidData.omegaData, complementeNutrientData.lipidData.omegaData)\r\n    let combinedLipidData = combineCategory(selectedNutrientData.lipidData, complementeNutrientData.lipidData)\r\n    combinedLipidData.omegaData = combinedOmegaData\r\n\r\n    return {\r\n        source: selectedNutrientData.source,\r\n        sourceItemId: selectedNutrientData.sourceItemId,\r\n        baseData: combinedBaseData,\r\n        vitaminData: combinedVitaminData,\r\n        mineralData: combinedMineralData,\r\n        carbohydrateData: combinedCarbsData,\r\n        proteinData: combinedProteinData,\r\n        lipidData: combinedLipidData\r\n    }\r\n}\r\n\r\n\r\nfunction combineCategory(nutrientCategory1: any, nutrientCategory2: any): any {\r\n    if(!nutrientCategory1 && nutrientCategory2) {\r\n        return nutrientCategory2\r\n    } else if(nutrientCategory1 && !nutrientCategory2) {\r\n        return nutrientCategory1\r\n    } else if(!nutrientCategory1 && !nutrientCategory2) {\r\n        return null\r\n    }\r\n\r\n    const keys1: Array<string> = Object.keys(nutrientCategory1)\r\n    const keys2: Array<string> = Object.keys(nutrientCategory2)\r\n\r\n    // @ts-ignore\r\n    const allKeys = [...new Set<string>([...keys1, ...keys2])]\r\n    let finalObject = {}\r\n\r\n    allKeys.forEach(key => {\r\n        const value1 = nutrientCategory1[key] !== null\r\n            ? nutrientCategory1[key]\r\n            : null\r\n\r\n        const value2 = nutrientCategory2[key] !== null\r\n            ? nutrientCategory2[key]\r\n            : null\r\n\r\n        let finalValue\r\n\r\n        if(value1 !== null && value2 === null) {\r\n            finalValue = value1\r\n        } else if(value1 === null && value2 !== null) {\r\n            finalValue = value2\r\n        } else if(value1 === null && value2 === null) {\r\n            finalValue = null\r\n        } else {\r\n            finalValue = (value1 + value2) * 0.5\r\n        }\r\n\r\n        finalObject[key] = finalValue\r\n    })\r\n\r\n    return finalObject\r\n}\r\n\r\n/**\r\n * Determines whether supplementing data is possible. The basic criterion for supplementing missing values are similar base data\r\n * in the two data sources. If the deviation is too high, supplemention SHOULD not be carried out.\r\n * @param nutrientDataList A list of two nutrient data objects\r\n */\r\nexport function canSupplementData(nutrientDataList: Array<NutrientData>): boolean {\r\n    if(nutrientDataList.length < 2) {\r\n        return false\r\n    }\r\n\r\n    const energy1 = nutrientDataList[0].baseData.energy\r\n    const energy2 = nutrientDataList[1].baseData.energy\r\n\r\n    if(energy1 === null || energy2 === null) {\r\n        return false\r\n    } else if(Math.round(energy1) === Math.round(energy2)) {\r\n        return true\r\n    } else {\r\n        const energyDiff = Math.abs(energy2 - energy1)\r\n        if(energyDiff > 30) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true;\r\n}","/**\r\n * Checks whether a value is a positive integer value.\r\n */\r\nexport function isPositiveIntegerValue(value) {\r\n    const number = Number(value);\r\n    return Number.isInteger(number) && number > 0;\r\n}\r\n\r\n/**\r\n * Checks whether a value is a positive integer value or 0.\r\n */\r\nexport function isPositiveIntegerValueOrZero(value) {\r\n    const number = Number(value);\r\n    return Number.isInteger(number) && number >= 0;\r\n}\r\n\r\n/**\r\n * Rounds a value between 0 and 100 automatically to a reasonable number of digits:\r\n *\r\n * - Generally the value is rounded to one digit.\r\n * - Between 1 and 10, the value is rounded to two digits.\r\n * - Between 0.1 and 1, the value is rounded to three digits.\r\n * - Between 0.01 and 0.1, the value is rounded to four digits.\r\n * - Otherwise it is rounded to five digits.\r\n *\r\n */\r\nexport function autoRound(value) {\r\n    let roundFactor: number;   // Default round factor\r\n\r\n    if(value >= 100) {\r\n        roundFactor = 0;\r\n    } else if(value < 100 && value >= 10) {\r\n        roundFactor = 1;\r\n    } else if(value < 10 && value >= 1) {\r\n        roundFactor = 2;\r\n    } else if(value < 1 && value >= 0.1) {\r\n        roundFactor = 3;\r\n    } else if(value < 0.1 && value >= 0.01) {\r\n        roundFactor = 4;\r\n    } else {\r\n        roundFactor = 5;\r\n    }\r\n\r\n    return round(value, roundFactor);\r\n}\r\n\r\n/**\r\n * Simple round function to round a number to a specific number of digits.\r\n */\r\nexport function round(value, digits) {\r\n    const roundFactor = Math.pow(10, digits);\r\n    return (Math.round(value * roundFactor)) / roundFactor;\r\n}\r\n\r\n/**\r\n * Rounds any given value to the next sensible round or half-round value. Between a range of 10 and 100, everything\r\n * below 30 will be rounded to the next odden number, everthing above 30 to the next 5-round number.\r\n * @param value The value to round\r\n *\r\n * Examples:\r\n * 22.5 -> 24\r\n * 61.3 -> 65\r\n *\r\n * 0.00232 -> 0.024\r\n * 1226 -> 1400\r\n */\r\nexport function roundToNextValue(value: number): number {\r\n    const multiplier = 10000000000\r\n    const nextEvenNumber = (number) => 2 * Math.ceil(number / 2)\r\n    const nextNumberFive = (number) => 5 * Math.ceil(number / 5)\r\n\r\n    // Multiply vylue with a high value to prevent logarithmiting illegal values below 1\r\n    const ordinaryValue = value * multiplier\r\n    const numberOfDigits = Math.ceil(Math.log10(ordinaryValue))\r\n    const standardValue = (ordinaryValue / Math.pow(10, numberOfDigits)) * 100\r\n\r\n    const nextRoundValue = standardValue < 30 ? nextEvenNumber(standardValue) : nextNumberFive(standardValue)\r\n    return nextRoundValue / Math.pow(10, 12-numberOfDigits)\r\n}\r\n\r\n/**\r\n * Returns a number of fixed length with leading zeros.\r\n */\r\nexport function getNumberOfFixedLength(number: number, digits: number): string {\r\n\tlet numberString = `${number}`\r\n\twhile(numberString.length < digits) {\r\n\t\tnumberString = `0${numberString}`\r\n\t}\r\n\treturn numberString\r\n}\r\n\r\n\r\nexport function convertBooleanToDigit(value: boolean) {\r\n\treturn value ? 1 : 0\r\n}\r\n\r\nexport function convertStringToBoolean(value: string) {\r\n\treturn value === \"1\"\r\n}\r\n\r\nexport function calculateMedian(values: Array<number>) {\r\n    const sorted = values.sort((a, b) => b-a)\r\n    const centerValue = sorted.length / 2\r\n    return values[Math.floor(centerValue)]\r\n}\r\n","import {NutrientData} from \"../../types/nutrientdata/FoodItem\";\r\nimport {autoRound} from \"../calculation/MathService\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport * as ChartConfig from \"../../config/ChartConfig\";\r\nimport {ChartDisplayData, LegendData} from \"../../types/livedata/ChartDisplayData\";\r\n\r\nexport function getTotalChartData(nutrientData: NutrientData, language: string): ChartDisplayData {\r\n    const alcoholValuePercentage = nutrientData.baseData.alcohol !== null\r\n        ? autoRound(nutrientData.baseData.alcohol)\r\n        : null\r\n\r\n    // Caffeine unit is milligram and needs to be converted to gram to match the other nutrient values\r\n    const caffeine = nutrientData.baseData.caffeine ? nutrientData.baseData.caffeine / 1000 : null;\r\n\r\n    const data = [autoRound(nutrientData.baseData.water),\r\n        autoRound(nutrientData.baseData.carbohydrates),\r\n        autoRound(nutrientData.baseData.lipids),\r\n        autoRound(nutrientData.baseData.proteins),\r\n    ]\r\n\r\n    const labels: string[] = [applicationStrings.label_nutrient_water[language],\r\n        applicationStrings.label_nutrient_carbohydrates_short[language],\r\n        applicationStrings.label_nutrient_lipids[language],\r\n        applicationStrings.label_nutrient_proteins[language],\r\n    ]\r\n\r\n    const colors = [\r\n        ChartConfig.color_water,\r\n        ChartConfig.color_carbs,\r\n        ChartConfig.color_lipids,\r\n        ChartConfig.color_proteins,\r\n    ]\r\n\r\n    if (alcoholValuePercentage !== null) {\r\n        data.push(alcoholValuePercentage)\r\n        labels.push(applicationStrings.label_nutrient_alcohol[language])\r\n        colors.push(ChartConfig.color_alcohol)\r\n    }\r\n\r\n    if (caffeine !== null && caffeine > 0) {\r\n        data.push(autoRound(caffeine))\r\n        labels.push(applicationStrings.label_nutrient_caffeine[language])\r\n        colors.push(ChartConfig.color_caffeine)\r\n    }\r\n\r\n    // Add ash data at the end of the dataset (needed for bar chart display).\r\n    labels.push(applicationStrings.label_nutrient_ash_short[language]);\r\n    data.push(autoRound(nutrientData.baseData.ash));\r\n    colors.push(ChartConfig.color_ash);\r\n\r\n    return {\r\n        labels: labels,\r\n        values: data,\r\n        colors: colors\r\n    }\r\n}\r\n\r\n\r\nexport function getNutrientChartData(nutrientData: NutrientData, language: string, showDetails: boolean): ChartDisplayData {\r\n    const totalValue = nutrientData.baseData.carbohydrates + nutrientData.baseData.lipids\r\n        + nutrientData.baseData.proteins + (nutrientData.baseData.alcohol ?? 0) + (nutrientData.baseData.caffeine ?? 0)\r\n\r\n    let sugar = nutrientData.carbohydrateData?.sugar ? nutrientData.carbohydrateData.sugar : 0\r\n    let dietaryFibers = nutrientData.baseData.dietaryFibers ? nutrientData.baseData.dietaryFibers : 0\r\n\r\n    // NOTE: Sometimes the sugar or dietary fibers value is above the carbs value, which is impossible (> 100 %)\r\n    if (sugar > totalValue) {\r\n        sugar = totalValue\r\n    }\r\n\r\n    if (dietaryFibers > totalValue) {\r\n        dietaryFibers = totalValue\r\n    }\r\n    if (sugar + dietaryFibers > totalValue) {  // Special case, where sug + fibers are above the 100 %\r\n        sugar = (sugar / (sugar + dietaryFibers)) * totalValue\r\n        dietaryFibers = (dietaryFibers / (sugar + dietaryFibers)) * totalValue\r\n    }\r\n\r\n    let carbValue = showDetails ? (nutrientData.baseData.carbohydrates - sugar - dietaryFibers)\r\n        : nutrientData.baseData.carbohydrates;\r\n\r\n    if (carbValue < 0) {\r\n        carbValue = 0\r\n    }\r\n\r\n    const carbValuePerc = autoRound(carbValue / totalValue * 100)\r\n    const sugarValuePerc = autoRound(sugar / totalValue * 100)\r\n    const dietaryFibersPerc = autoRound(dietaryFibers / totalValue * 100)\r\n    const lipidValuePerc = autoRound(nutrientData.baseData.lipids / totalValue * 100)\r\n    const proteinsValuePerc = autoRound(nutrientData.baseData.proteins / totalValue * 100)\r\n    const alcoholValuePerc = nutrientData.baseData.alcohol !== null\r\n        ? autoRound(nutrientData.baseData.alcohol / totalValue * 100)\r\n        : null\r\n\r\n    const caffeinePerc = nutrientData.baseData.caffeine !== null\r\n        ? autoRound((nutrientData.baseData.caffeine / 1000) / totalValue * 100)\r\n        : null\r\n\r\n    const labels = [\r\n        applicationStrings.label_nutrient_lipids[language],\r\n        applicationStrings.label_nutrient_proteins[language],\r\n        applicationStrings.label_nutrient_carbohydrates_short[language]\r\n    ]\r\n\r\n    const values = [lipidValuePerc, proteinsValuePerc, carbValuePerc];\r\n\r\n    const colors = [\r\n        ChartConfig.color_lipids,\r\n        ChartConfig.color_proteins,\r\n        ChartConfig.color_carbs\r\n    ];\r\n\r\n    if (alcoholValuePerc !== null) {\r\n        labels.push(applicationStrings.label_nutrient_alcohol[language])\r\n        values.push(alcoholValuePerc)\r\n        colors.push(ChartConfig.color_alcohol)\r\n    }\r\n\r\n    if (caffeinePerc !== null && caffeinePerc > 0) {\r\n        labels.push(applicationStrings.label_nutrient_caffeine[language])\r\n        values.push(caffeinePerc)\r\n        colors.push(ChartConfig.color_caffeine)\r\n    }\r\n\r\n    if (showDetails) {\r\n        if (sugarValuePerc > 0) {\r\n            labels.push(applicationStrings.label_nutrient_sugar[language]);\r\n            values.push(sugarValuePerc);\r\n            colors.push(ChartConfig.color_carbs_sugar);\r\n        }\r\n        if (dietaryFibersPerc > 0) {\r\n            labels.push(applicationStrings.label_nutrient_dietaryFibers_short[language]);\r\n            values.push(dietaryFibersPerc);\r\n            colors.push(ChartConfig.color_carbs_dietaryFibers);\r\n        }\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        values: values,\r\n        colors: colors\r\n    }\r\n}\r\n\r\nexport function getBaseChartLegendData(lang: string, showDetails: boolean): LegendData[] {\r\n    const legendData: LegendData[] = [\r\n        {\r\n            item: applicationStrings.label_nutrient_water[lang],\r\n            color: ChartConfig.color_water,\r\n            separateNextElement: true\r\n        },\r\n        {\r\n            item: applicationStrings.label_nutrient_lipids[lang],\r\n            color: ChartConfig.color_lipids\r\n        },\r\n        {\r\n            item: applicationStrings.label_nutrient_proteins[lang],\r\n            color: ChartConfig.color_proteins\r\n        },\r\n        {\r\n            item: applicationStrings.label_nutrient_carbohydrates[lang],\r\n            color: ChartConfig.color_carbs,\r\n        }\r\n    ];\r\n\r\n    if (showDetails) {\r\n        legendData.push(\r\n            {\r\n                item: applicationStrings.label_nutrient_sugar[lang],\r\n                color: ChartConfig.color_carbs_sugar,\r\n                indent: 1,\r\n            },\r\n            {\r\n                item: applicationStrings.label_nutrient_dietaryFibers[lang],\r\n                color: ChartConfig.color_carbs_dietaryFibers,\r\n                indent: 1,\r\n                separateNextElement: true\r\n            }\r\n        );\r\n    }\r\n\r\n    legendData.push({\r\n        item: applicationStrings.label_nutrient_alcohol[lang],\r\n        color: ChartConfig.color_alcohol,\r\n    })\r\n\r\n    legendData.push({\r\n        item: applicationStrings.label_nutrient_caffeine[lang],\r\n        color: ChartConfig.color_caffeine,\r\n    })\r\n\r\n    legendData.push({\r\n        item: applicationStrings.label_nutrient_ash[lang],\r\n        color: ChartConfig.color_ash\r\n    })\r\n\r\n    return legendData;\r\n}\r\n\r\n\r\nexport function showEnergyChartLegend(lang: string): LegendData[] {\r\n    const legendData: LegendData[] = [\r\n        {\r\n            item: applicationStrings.label_nutrient_carbohydrates[lang],\r\n            color: ChartConfig.color_carbs,\r\n        },\r\n        {\r\n            item: applicationStrings.label_nutrient_dietaryFibers[lang],\r\n            color: ChartConfig.color_carbs_dietaryFibers,\r\n            indent: 1\r\n        },\r\n        {\r\n            item: applicationStrings.label_nutrient_lipids[lang],\r\n            color: ChartConfig.color_lipids\r\n        },\r\n        {\r\n            item: applicationStrings.label_nutrient_proteins[lang],\r\n            color: ChartConfig.color_proteins\r\n        },\r\n        {\r\n            item: applicationStrings.label_nutrient_alcohol[lang],\r\n            color: ChartConfig.color_alcohol\r\n        },\r\n    ];\r\n\r\n    return legendData\r\n}","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {LanguageContext} from \"../../../contexts/LangContext\";\r\nimport {applicationStrings} from \"../../../static/labels\";\r\nimport * as ChartConfig from \"../../../config/ChartConfig\"\r\nimport {CHART_TYPE_BAR, CHART_TYPE_PIE} from \"../../../config/Constants\";\r\nimport {Bar, Pie} from \"react-chartjs-2\";\r\nimport {getBarChartOptions, getPieChartOptions} from \"../../../service/ChartConfigurationService\";\r\nimport {PieChartConfigurationForm} from \"../../charthelper/PieChartConfigurationForm\";\r\nimport {CustomLegend} from \"../../charthelper/CustomLegend\";\r\nimport {ApplicationDataContextStore} from \"../../../contexts/ApplicationDataContext\";\r\nimport {initialChartConfigData} from \"../../../config/ApplicationSetting\";\r\nimport {BaseDataChartProps} from \"../../../types/livedata/ChartPropsData\";\r\nimport {useWindowDimension} from \"../../../service/WindowDimension\";\r\nimport {getNutrientData} from \"../../../service/nutrientdata/NutrientDataRetriever\";\r\nimport {ChartDisplayData} from \"../../../types/livedata/ChartDisplayData\";\r\nimport {getBaseChartLegendData, getNutrientChartData, getTotalChartData} from \"../../../service/chartdata/BaseChartDataService\";\r\n\r\nexport default function BaseDataChart(props: BaseDataChartProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const languageContext = useContext(LanguageContext)\r\n    const lang = languageContext.language\r\n    useWindowDimension();\r\n    const chartConfig = props.directCompareConfig\r\n        ? props.directCompareConfig\r\n        : applicationContext\r\n            ? applicationContext.applicationData.foodDataPanel.chartConfigData.baseChartConfig\r\n            : initialChartConfigData.baseChartConfig\r\n\r\n    const showDetailsProp = chartConfig.showDetails !== undefined\r\n        ? chartConfig.showDetails\r\n        : applicationContext\r\n            ? applicationContext.applicationData.foodDataPanel.chartConfigData.baseChartConfig.showDetails\r\n            : initialChartConfigData.baseChartConfig.showDetails\r\n\r\n    const [chartType, setChartType] = useState<string>(chartConfig.chartType)\r\n    const [showLegend, setShowLegend] = useState<boolean>(chartConfig.showLegend)\r\n    const [showDetails, setShowDetails] = useState<boolean>(showDetailsProp)\r\n\r\n    useEffect(() => {\r\n        if (props.directCompareConfig) {\r\n            setChartType(chartConfig.chartType)\r\n            setShowLegend(chartConfig.showLegend)\r\n            setShowDetails(showDetailsProp)\r\n        }\r\n\r\n        updateChartConfig()\r\n    }, [chartType, showDetails, showLegend, props])\r\n\r\n    const updateChartConfig = () => {\r\n        if (applicationContext && !props.directCompareConfig) {\r\n            const currentConfig = applicationContext.applicationData.foodDataPanel.chartConfigData\r\n            if (chartType !== currentConfig.baseChartConfig.chartType\r\n                || showDetails !== currentConfig.baseChartConfig.showDetails\r\n                || showLegend !== currentConfig.baseChartConfig.showLegend) {\r\n                const newChartConfig = {\r\n                    ...currentConfig,\r\n                    baseChartConfig: {\r\n                        chartType: chartType,\r\n                        showDetails: showDetails,\r\n                        showLegend: showLegend\r\n                    }\r\n                }\r\n                applicationContext.setFoodDataPanelData.updateFoodDataPanelChartConfig(newChartConfig)\r\n            }\r\n        }\r\n    }\r\n\r\n    const createTotalChartData = () => {\r\n        const nutrientData = getNutrientData(props.selectedFoodItem)\r\n        const chartDisplayData: ChartDisplayData = getTotalChartData(nutrientData, lang)\r\n\r\n        return {\r\n            labels: chartDisplayData.labels,\r\n            datasets: [{\r\n                label: applicationStrings.label_chart_totalComposition[lang],\r\n                data: chartDisplayData.values,\r\n                backgroundColor: chartDisplayData.colors,\r\n                borderWidth: 2,\r\n                borderColor: '#555',\r\n            }]\r\n        }\r\n    }\r\n\r\n    const createNutrientChartData = () => {\r\n        const nutrientData = getNutrientData(props.selectedFoodItem)\r\n        const chartDisplayData: ChartDisplayData = getNutrientChartData(nutrientData, lang, showDetails)\r\n\r\n        return {\r\n            labels: chartDisplayData.labels,\r\n            datasets: [{\r\n                label: applicationStrings.label_chart_nutrientComposition[lang],\r\n                data: chartDisplayData.values,\r\n                backgroundColor: chartDisplayData.colors,\r\n                borderWidth: 2,\r\n                borderColor: '#555',\r\n            }]\r\n        }\r\n    }\r\n\r\n    const handleRadioButtonClick = (event: any) => {\r\n        const value = event.target.value\r\n        setChartType(value)\r\n        updateChartConfig()\r\n    }\r\n\r\n    const handleLegendCheckboxClick = () => {\r\n        setShowLegend(!showLegend)\r\n        updateChartConfig()\r\n    }\r\n\r\n    const handleDetailsCheckboxClick = () => {\r\n        setShowDetails(!showDetails)\r\n        updateChartConfig()\r\n    }\r\n\r\n    const legendAllowed = showLegend && chartType === CHART_TYPE_PIE\r\n\r\n    const getOptions = (title) => {\r\n        return chartType === CHART_TYPE_BAR ? getBarChartOptions(title, \"%\") : getPieChartOptions(title, \"%\")\r\n    }\r\n\r\n\r\n    const renderSubChart = (title: string, chartData: any) => {\r\n        if (!chartData) {\r\n            return <div/>\r\n        }\r\n\r\n        const chartClass = props.directCompareUse ? \"chart-area-dc\" : \"chart-area\"\r\n\r\n        return (\r\n            <div className={chartClass}>\r\n                {chartType === CHART_TYPE_PIE &&\r\n                <Pie\r\n                    data={chartData}\r\n                    key={'chart base ' + title}\r\n                    width={ChartConfig.basedata_piechart_width}\r\n                    options={getOptions(title)}/>\r\n                }\r\n                {chartType === CHART_TYPE_BAR &&\r\n                <Bar\r\n                    data={chartData}\r\n                    key={'chart base ' + title}\r\n                    width={ChartConfig.basedata_barchart_width}\r\n                    options={getOptions(title)}/>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const totalChartData = createTotalChartData();\r\n    const nutrientChartData = createNutrientChartData();\r\n\r\n    const totalChartDataTitle = applicationStrings.label_chart_totalComposition[lang]\r\n    const nutrientChartDataTitle = applicationStrings.label_chart_nutrientComposition[lang]\r\n\r\n    const justifyContent = props.directCompareUse ? \"center\" : \"left\"\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"d-flex text-align-center\" style={{justifyContent: justifyContent}}>\r\n                <div style={{width: \"100%\"}}>\r\n                    <div className=\"row\"\r\n                         key={\"base chart container\"}>\r\n                        <div className=\"col-6\">\r\n                            <div>{renderSubChart(totalChartDataTitle, totalChartData)}</div>\r\n                        </div>\r\n                        <div className=\"col-6\" >\r\n                            <div>{renderSubChart(nutrientChartDataTitle, nutrientChartData)}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {legendAllowed &&\r\n                <div className=\"d-inline-block float-right legend-container\">\r\n                    <CustomLegend legendData={getBaseChartLegendData(lang, showDetails)}/>\r\n                </div>\r\n                }\r\n            </div>\r\n            {!props.directCompareUse &&\r\n            <div className=\"row chart-control-button-bar\">\r\n                <PieChartConfigurationForm chartType={chartType}\r\n                                           showLegend={showLegend}\r\n                                           showDetails={showDetails}\r\n                                           detailsCheckboxAvailable={true}\r\n                                           handleRadioButtonClick={handleRadioButtonClick}\r\n                                           handleLegendCheckboxClick={handleLegendCheckboxClick}\r\n                                           handleDetailsCheckboxClick={handleDetailsCheckboxClick}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}","export const PAL_CATEGORY_1 = 1.2;\r\nexport const PAL_CATEGORY_2 = 1.4;\r\nexport const PAL_CATEGORY_3 = 1.6;\r\nexport const PAL_CATEGORY_4 = 1.8;\r\nexport const PAL_CATEGORY_5 = 2.1;\r\nexport const PAL_CATEGORY_6 = 2.4;\r\nexport const PAL_CATEGORY_7 = 2.8;","import {SEX_MALE} from '../../config/Constants';\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport * as EnergyConstants from '../../config/EnergyConstants'\r\nimport {PalCategory} from \"../../types/livedata/PalCategory\";\r\nimport {BaseData} from \"../../types/nutrientdata/FoodItem\";\r\nimport {EnergyData} from \"../../types/livedata/EnergyData\";\r\nimport {round} from \"./MathService\";\r\n\r\n\r\n/**\r\n * Creates a list of PAL categories with name and value for the user settings form.\r\n */\r\nexport function getPalCategories(language: string): Array<PalCategory> {\r\n    return [\r\n        {label: createPalCategoryName(language, 1), value: EnergyConstants.PAL_CATEGORY_1},\r\n        {label: createPalCategoryName(language, 2), value: EnergyConstants.PAL_CATEGORY_2},\r\n        {label: createPalCategoryName(language, 3), value: EnergyConstants.PAL_CATEGORY_3},\r\n        {label: createPalCategoryName(language, 4), value: EnergyConstants.PAL_CATEGORY_4},\r\n        {label: createPalCategoryName(language, 5), value: EnergyConstants.PAL_CATEGORY_5},\r\n        {label: createPalCategoryName(language, 6), value: EnergyConstants.PAL_CATEGORY_6},\r\n        {label: createPalCategoryName(language, 7), value: EnergyConstants.PAL_CATEGORY_7},\r\n    ];\r\n}\r\n\r\n/**\r\n * Returns the PAL category number of a PAL value.\r\n *\r\n * value: The PAL value, e.g. 1.4 or 1.6.\r\n */\r\nexport function getPalCategory(value: number): number {\r\n    switch (value) {\r\n        case EnergyConstants.PAL_CATEGORY_1:\r\n            return 1\r\n        case EnergyConstants.PAL_CATEGORY_2:\r\n            return 2\r\n        case EnergyConstants.PAL_CATEGORY_3:\r\n            return 3\r\n        case EnergyConstants.PAL_CATEGORY_4:\r\n            return 4\r\n        case EnergyConstants.PAL_CATEGORY_5:\r\n            return 5\r\n        case EnergyConstants.PAL_CATEGORY_6:\r\n            return 6\r\n        case EnergyConstants.PAL_CATEGORY_7:\r\n            return 7\r\n        default:\r\n            return 1\r\n    }\r\n}\r\n\r\n\r\nexport function getPalValue(palCategory: number): number {\r\n    switch (palCategory) {\r\n        case 1:\r\n            return EnergyConstants.PAL_CATEGORY_1\r\n        case 2:\r\n            return EnergyConstants.PAL_CATEGORY_2\r\n        case 3:\r\n            return EnergyConstants.PAL_CATEGORY_3\r\n        case 4:\r\n            return EnergyConstants.PAL_CATEGORY_4\r\n        case 5:\r\n            return EnergyConstants.PAL_CATEGORY_5\r\n        case 6:\r\n            return EnergyConstants.PAL_CATEGORY_6\r\n        case 7:\r\n            return EnergyConstants.PAL_CATEGORY_7\r\n        default:\r\n            return EnergyConstants.PAL_CATEGORY_1\r\n    }\r\n}\r\n\r\n\r\nfunction createPalCategoryName(language, category): string {\r\n    const languageLabel = `palcat_name_${category}`;\r\n    const name = applicationStrings[languageLabel][language]\r\n\r\n    const energyLabel = `PAL_CATEGORY_${category}`;\r\n    const value = EnergyConstants[energyLabel];\r\n    return `${name} (${value})`;\r\n}\r\n\r\n\r\n/**\r\n * Calculates the Basal Metabolic Rate (BMR) of a person.\r\n */\r\nexport function calculateBMR(age: number, size: number, weight: number, sex: string): number {\r\n    if (sex === SEX_MALE) {\r\n        const bmr = 3.4 * weight + 15.3 * size - 6.8 * age - 961;\r\n        return Math.round(bmr);\r\n    } else {\r\n        const bmr = 2.4 * weight + 9.0 * size - 4.7 * age - 65;\r\n        return Math.round(bmr);\r\n    }\r\n}\r\n\r\n/**\r\n * Calculates the total energy consumption of a person in one day.\r\n *\r\n * bmr: The bmr value.\r\n * palValue: The pal value\r\n * leisureSports: Specifies whether leisure sports is performed or not (+0.3 PAL).\r\n */\r\nexport function calculateTotalEnergyConsumption(bmr: number, palValue: number, leisureSports: boolean): number {\r\n    if (leisureSports) {\r\n        palValue += 0.3;\r\n    }\r\n\r\n    return bmr * palValue;\r\n}\r\n\r\n\r\n/**\r\n * Calculates the energy amount data for the different macro nutrients per 100 gram in kcal.\r\n * @param baseData Base data object containing the corresponding nutrient data.\r\n * @return Energy data object with the precise information about the energy composition.\r\n */\r\nexport function calculateEnergyData(baseData: BaseData): EnergyData | null {\r\n    const {energy, carbohydrates, lipids, proteins, alcohol} = baseData\r\n    const dietaryFibers = baseData.dietaryFibers !== null ? baseData.dietaryFibers : 0\r\n\r\n    if (energy === null || carbohydrates === null || lipids === null || proteins === null) {\r\n        return null\r\n    }\r\n\r\n    const getValueForPortion = (value: number | null, factor: number): number => {\r\n        if (value === undefined || value === null) {\r\n            return 0\r\n        }\r\n\r\n        return round((value * factor), 1);\r\n    }\r\n\r\n    return {\r\n        carbohydrates: getValueForPortion(carbohydrates - dietaryFibers, 4) + getValueForPortion( dietaryFibers, 2),\r\n        dietaryFibers: getValueForPortion( dietaryFibers, 2),\r\n        fat: getValueForPortion(lipids, 9),\r\n        proteins: getValueForPortion(proteins, 4),\r\n        alcohol: getValueForPortion(alcohol, 7),\r\n    }\r\n\r\n}","import * as ChartConfig from \"../../../../config/ChartConfig\";\r\nimport {isMobileDevice} from \"../../../../service/WindowDimension\";\r\nimport {applicationStrings} from \"../../../../static/labels\";\r\nimport {calculateBMR, calculateTotalEnergyConsumption} from \"../../../../service/calculation/EnergyService\";\r\nimport {getBarChartOptions} from \"../../../../service/ChartConfigurationService\";\r\nimport React, {useContext} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../../../../contexts/ApplicationDataContext\";\r\nimport {LanguageContext} from \"../../../../contexts/LangContext\";\r\nimport {getNutrientData} from \"../../../../service/nutrientdata/NutrientDataRetriever\";\r\nimport {ChartProps} from \"../../../../types/livedata/ChartPropsData\";\r\nimport {Bar} from \"react-chartjs-2\";\r\n\r\nexport function EnergyLevelChart(props: ChartProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const language = useContext(LanguageContext).language\r\n    const nutrientData = getNutrientData(props.selectedFoodItem);\r\n\r\n    if (!applicationContext || !nutrientData.baseData.energy) {\r\n        return <div>No data.</div>\r\n    }\r\n\r\n    const energy100g = Math.round(nutrientData.baseData.energy);\r\n\r\n    const createEnergyLevelChart = () => {\r\n        const averagePortion = props.selectedFoodItem.portion.amount\r\n        const energyPortion = Math.round(energy100g / 100 * averagePortion);\r\n\r\n        return {\r\n            labels: [\"100 g\", \"Portion\"],\r\n            datasets: [{\r\n                data: [energy100g,\r\n                    energyPortion\r\n                ],\r\n                backgroundColor: [\r\n                    ChartConfig.color_yellow,\r\n                    ChartConfig.color_red,\r\n                ],\r\n                borderWidth: 2,\r\n                borderColor: '#555',\r\n            }]\r\n\r\n        }\r\n    }\r\n\r\n\r\n    const renderUserDataInfoPage = () => {\r\n        const showInfotext = !(isMobileDevice() && props.directCompareUse)\r\n\r\n        return (\r\n            <div style={{paddingLeft: \"2vw\", paddingTop: \"1vh\", maxWidth: \"90%\"}}>\r\n                {!isMobileDevice()\r\n                    ? <div className={\"header-label\"}><b>{`${energy100g}`} kcal / 100 g</b></div>\r\n                    : <p><b>{`${energy100g}`} kcal / 100 g</b></p>\r\n                }\r\n\r\n                {showInfotext &&\r\n                <div className=\"text-small\" style={{paddingTop: \"30px\"}}>\r\n                    {applicationContext.userData.initialValues ?\r\n                        (<div>\r\n                            <p>{applicationStrings.text_setUserdata_p1[language]}</p>\r\n                            <p>{applicationStrings.text_setUserdata_p2[language]}</p>\r\n                        </div>)\r\n                        :\r\n                        <p>{applicationStrings.text_setUserdata_p3[language]}</p>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    const getOptions = () => {\r\n        const {age, size, weight, sex, palValue, leisureSports} = applicationContext.userData\r\n        const bmr = calculateBMR(age, size, weight, sex);\r\n        const totalEnergy = calculateTotalEnergyConsumption(bmr, palValue, leisureSports);\r\n\r\n        if (props.directCompareUse) {\r\n\r\n        }\r\n\r\n        const annotation1 = {\r\n            drawTime: 'afterDatasetsDraw',\r\n            type: 'line',\r\n            mode: 'horizontal',\r\n            scaleID: 'y-axis-0',\r\n            yMin: bmr,\r\n            yMax: bmr,\r\n            borderColor: ChartConfig.color_line_red,\r\n            borderWidth: 4,\r\n            label: {\r\n                enabled: true,\r\n                content: applicationStrings.label_chart_bmr[language]\r\n            },\r\n        }\r\n\r\n        const annotation2 =\r\n            {\r\n                drawTime: 'afterDatasetsDraw',\r\n                type: 'line',\r\n                mode: 'horizontal',\r\n                scaleID: 'y-axis-0',\r\n                yMin: totalEnergy,\r\n                yMax: totalEnergy,\r\n                borderColor: ChartConfig.color_line_blue,\r\n                borderWidth: 4,\r\n                label: {\r\n                    enabled: true,\r\n                    content: applicationStrings.label_chart_energyExpenditure[language]\r\n                }\r\n            }\r\n\r\n        const annotation = {\r\n            annotations: {\r\n                line1: annotation1,\r\n                line2: !(props.directCompareUse && isMobileDevice()) ? annotation2 : undefined,\r\n            }\r\n        }\r\n\r\n        let options: any = getBarChartOptions(applicationStrings.label_charttype_energy[language], \"kcal\");\r\n        options = {\r\n            ...options, plugins: {\r\n                ...options.plugins,\r\n                annotation: annotation\r\n            }\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    const data = createEnergyLevelChart();\r\n    if (!data) {\r\n        return <div>{applicationStrings.label_noData[language]}</div>\r\n    }\r\n\r\n    const chartClass = props.directCompareUse ? \"col-12 chart-area-dc\" : \"col-12 chart-area\"\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row \" key={\"energy container\"}>\r\n                <div className=\"col-7\">\r\n                    <div className={chartClass}>\r\n                        <Bar\r\n                            data={data}\r\n                            key={'chart energy'}\r\n                            options={getOptions()}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-5\">\r\n                    {renderUserDataInfoPage()}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import {ChartProps} from \"../../../../types/livedata/ChartPropsData\";\r\nimport {applicationStrings} from \"../../../../static/labels\";\r\nimport {Pie} from \"react-chartjs-2\";\r\nimport React, {useContext} from \"react\";\r\nimport {getPieChartOptions} from \"../../../../service/ChartConfigurationService\";\r\nimport {LanguageContext} from \"../../../../contexts/LangContext\";\r\nimport {getNutrientData} from \"../../../../service/nutrientdata/NutrientDataRetriever\";\r\nimport * as ChartConfig from \"../../../../config/ChartConfig\";\r\nimport {calculateEnergyData} from \"../../../../service/calculation/EnergyService\";\r\nimport {CustomLegend} from \"../../../charthelper/CustomLegend\";\r\nimport {showEnergyChartLegend} from \"../../../../service/chartdata/BaseChartDataService\";\r\nimport {isMobileDevice} from \"../../../../service/WindowDimension\";\r\nimport {autoRound} from \"../../../../service/calculation/MathService\";\r\n\r\nexport function EnergyCompositionChart(props: ChartProps) {\r\n    const language = useContext(LanguageContext).language\r\n    const nutrientData = getNutrientData(props.selectedFoodItem);\r\n    const portionAmount = props.selectedFoodItem.portion.amount\r\n\r\n    if(!nutrientData.baseData.energy) {\r\n        return <div>No data</div>\r\n    }\r\n\r\n    const energy100g = Math.round(nutrientData.baseData.energy)\r\n\r\n    const transformToPortion = (value) => {\r\n        return autoRound((value * portionAmount) / 100)\r\n    }\r\n\r\n    const createData = () => {\r\n        const energyData = calculateEnergyData(nutrientData.baseData)\r\n\r\n        if (!energyData) {\r\n            return\r\n        }\r\n\r\n        const labels = [\r\n            applicationStrings.label_nutrient_carbohydrates[language],\r\n            applicationStrings.label_nutrient_dietaryFibers[language],\r\n            applicationStrings.label_nutrient_lipids[language],\r\n            applicationStrings.label_nutrient_proteins[language],\r\n            applicationStrings.label_nutrient_alcohol[language],\r\n        ]\r\n\r\n        const values = [\r\n            transformToPortion(energyData.carbohydrates),\r\n            transformToPortion(energyData.dietaryFibers),\r\n            transformToPortion(energyData.fat),\r\n            transformToPortion(energyData.proteins),\r\n            transformToPortion(energyData.alcohol),\r\n        ]\r\n\r\n        const colors = [\r\n            ChartConfig.color_carbs,\r\n            ChartConfig.color_carbs_dietaryFibers,\r\n            ChartConfig.color_lipids,\r\n            ChartConfig.color_proteins,\r\n            ChartConfig.color_alcohol,\r\n        ]\r\n\r\n        return {\r\n            labels: labels,\r\n            datasets: [{\r\n                data: values,\r\n                backgroundColor: colors,\r\n                borderWidth: 2,\r\n                borderColor: '#555',\r\n            }]\r\n        }\r\n    }\r\n\r\n    const data = createData()\r\n\r\n    const getOptions = () => {\r\n        let title = applicationStrings.label_charttype_energy_composition[language];\r\n        return getPieChartOptions(title, \"kcal\");\r\n    }\r\n\r\n    const chartClass = props.directCompareUse ? \"col-12 chart-area-dc\" : \"col-12 chart-area\"\r\n\r\n    if (!data) {\r\n        return (\r\n            <div className={chartClass}>\r\n                {applicationStrings.label_noData[language]}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const keyWordStyle = {minWidth: \"15ch\", fontWeight: \"bold\", fontSize: \"0.8rem\"}\r\n\r\n    const makeValue = (value: number) => {\r\n        return <span style={{fontSize: \"0.8rem\"}}>1 g ≈ {value} kcal</span>\r\n    }\r\n\r\n    const energyPerPortion = transformToPortion(nutrientData.baseData.energy)\r\n\r\n    return (\r\n        <div className={\"container row\"}>\r\n            <div className={\"col-7\"}>\r\n                <div className={chartClass}>\r\n                    <Pie data={data}\r\n                         key={'chart carbs'}\r\n                         options={getOptions()}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className={\"col-5\"}>\r\n                <div style={{paddingTop: \"1vh\", paddingBottom: \"1vh\"}}>\r\n                    {!isMobileDevice()\r\n                        ? <div className={\"header-label-small\"}>\r\n                            <span style={{paddingRight: \"1.25ch\"}}>\r\n                                <b>{energyPerPortion} kcal {applicationStrings.label_per_portion[language]}</b>\r\n                            </span>\r\n                            <span>\r\n                                <b>({energy100g} kcal / 100 g)</b>\r\n                            </span>\r\n                        </div>\r\n                        : <p><b>{energy100g} kcal / 100 g ({energyPerPortion} kcal {applicationStrings.label_per_portion[language]})</b></p>\r\n                    }\r\n                </div>\r\n                <div style={{borderLeft: \"1px solid #aaaaaa\", paddingLeft: \"0.5vw\", paddingBottom: \"2vh\"}}>\r\n                    <div className={\"d-flex flex-row align-items-baseline\"}>\r\n                        <div style={keyWordStyle}>{applicationStrings.label_nutrient_carbohydrates[language]}:</div>\r\n                        <div>{makeValue(4)}</div>\r\n                    </div>\r\n                    <div className={\"d-flex flex-row align-items-baseline\"}>\r\n                        <div style={keyWordStyle}>{applicationStrings.label_nutrient_dietaryFibers[language]}:</div>\r\n                        <div>{makeValue(2)}</div>\r\n                    </div>\r\n                    <div className={\"d-flex flex-row align-items-baseline\"}>\r\n                        <div style={keyWordStyle}>{applicationStrings.label_nutrient_lipids[language]}:</div>\r\n                        <div>{makeValue(9)}</div>\r\n                    </div>\r\n                    <div className={\"d-flex flex-row align-items-baseline\"}>\r\n                        <div style={keyWordStyle}>{applicationStrings.label_nutrient_proteins[language]}:</div>\r\n                        <div>{makeValue(4)}</div>\r\n                    </div>\r\n                    <div className={\"d-flex flex-row align-items-baseline\"}>\r\n                        <div style={keyWordStyle}>{applicationStrings.label_nutrient_alcohol[language]}:</div>\r\n                        <div>{makeValue(7)}</div>\r\n                    </div>\r\n                </div>\r\n                <CustomLegend legendData={showEnergyChartLegend(language)}/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import {ChartProps} from \"../../../../types/livedata/ChartPropsData\";\r\nimport {Pie, Bar} from \"react-chartjs-2\";\r\nimport React, {useContext} from \"react\";\r\nimport {applicationStrings} from \"../../../../static/labels\";\r\nimport {getBarChartOptions, getPieChartOptions} from \"../../../../service/ChartConfigurationService\";\r\nimport {LanguageContext} from \"../../../../contexts/LangContext\";\r\nimport {getNameFromFoodNameList} from \"../../../../service/nutrientdata/NameTypeService\";\r\nimport {ApplicationDataContextStore} from \"../../../../contexts/ApplicationDataContext\";\r\nimport {getNutrientData} from \"../../../../service/nutrientdata/NutrientDataRetriever\";\r\n\r\nvar ColorScheme = require('color-scheme');\r\n\r\nexport function AggregatedEnergyChart(props: ChartProps) {\r\n    const language = useContext(LanguageContext).language\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n\r\n    if (!applicationContext) {\r\n        return <div/>\r\n    }\r\n\r\n    const createData = () => {\r\n        const labels: Array<string> = []\r\n        const values: Array<number> = []\r\n\r\n        // Generate colors\r\n        const scheme = new ColorScheme;\r\n        scheme.from_hue(150).scheme('contrast').variation('pastel');\r\n        let colors = scheme.colors().map(str => `#${str}`)\r\n        scheme.from_hue(80).scheme('contrast').variation('pastel');\r\n        const colors2 = scheme.colors().map(str => `#${str}`)\r\n        scheme.from_hue(220).scheme('contrast').variation('pastel');\r\n        const colors3 = scheme.colors().map(str => `#${str}`)\r\n        colors = colors.concat(colors2)\r\n        colors = colors.concat(colors3)\r\n\r\n        const subElementsSorted = [...props.selectedFoodItem.compositeSubElements!!]\r\n        subElementsSorted.sort((a, b) => {\r\n            const nutrientDataA = getNutrientData(a)\r\n            const nutrientDataB = getNutrientData(b)\r\n\r\n            const energy100A = nutrientDataA.baseData.energy ?? 0\r\n            const energyA = Math.round(a.portion.amount * energy100A / 100)\r\n\r\n            const energy100B = nutrientDataB.baseData.energy ?? 0\r\n            const energyB = Math.round(b.portion.amount * energy100B / 100)\r\n\r\n            return energyB - energyA\r\n        })\r\n\r\n        subElementsSorted.forEach(item => {\r\n            const name = getNameFromFoodNameList(applicationContext.foodDataCorpus.foodNames, item.foodItem.nameId!!, language) ?? ''\r\n            labels.push(name)\r\n\r\n            const nutrientData = getNutrientData(item)\r\n            const energy100 = nutrientData.baseData.energy ?? 0\r\n            const energy = Math.round(item.portion.amount * energy100 / 100)\r\n            values.push(energy)\r\n        })\r\n\r\n        return {\r\n            labels: labels,\r\n            datasets: [{\r\n                data: values,\r\n                backgroundColor: colors,\r\n                borderWidth: 2,\r\n                borderColor: '#555',\r\n            }]\r\n        }\r\n    }\r\n\r\n    const data = createData()\r\n\r\n    const getOptionsPieChart = () => {\r\n        let title = applicationStrings.label_charttype_energy_aggregated_title[language];\r\n        return getPieChartOptions(title, \"kcal\");\r\n    }\r\n\r\n    const getOptionsBarChart = () => {\r\n        let title = applicationStrings.label_charttype_energy_aggregated_title[language];\r\n        const options = getBarChartOptions(title, \"kcal\");\r\n\r\n        const scales = {\r\n            xAxes: {\r\n                ticks: {\r\n                    autoSkip: true,\r\n                    maxRotation: 90,\r\n                    minRotation: 90,\r\n                    callback: function (index) {\r\n                        const name = data.labels[index]\r\n                        return name.length > 12 ? name.substring(0, 10) + \"...\" : name\r\n                    },\r\n                }\r\n            }\r\n        }\r\n\r\n        return {...options, scales: scales}\r\n    }\r\n\r\n    let classPieChart = \"col-6\"\r\n    let classBarChart = \"col-6\"\r\n    const numberOfElements = props.selectedFoodItem.compositeSubElements?.length ?? 0\r\n\r\n    if (numberOfElements >= 15) {\r\n        let classPieChart = \"col-5\"\r\n        let classBarChart = \"col-7\"\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"container row\"}>\r\n            <div className={classPieChart}>\r\n                <div className={\"chart-area\"}>\r\n                    <Pie data={data}\r\n                         key={'chart carbs'}\r\n                         options={getOptionsPieChart()}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className={classBarChart}>\r\n                <div className={\"chart-area\"}>\r\n                    <Bar data={data}\r\n                         key={'chart carbs'}\r\n                         options={getOptionsBarChart()}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {LanguageContext} from \"../../../contexts/LangContext\";\r\nimport {applicationStrings} from \"../../../static/labels\";\r\nimport {ApplicationDataContextStore} from \"../../../contexts/ApplicationDataContext\";\r\nimport {ChartProps} from \"../../../types/livedata/ChartPropsData\";\r\nimport {getNutrientData} from \"../../../service/nutrientdata/NutrientDataRetriever\";\r\nimport {EnergyLevelChart} from \"./energy/EnergyLevelChart\";\r\nimport {Form} from \"react-bootstrap\";\r\nimport {\r\n    CHART_TYPE_COMPOSITION,\r\n    CHART_TYPE_ENERGY_AGGREGATED,\r\n    CHART_TYPE_ENERGY_LEVEL,\r\n} from \"../../../config/Constants\";\r\nimport {EnergyCompositionChart} from \"./energy/EnergyCompositionChart\";\r\nimport {AggregatedEnergyChart} from \"./energy/AggregatedEnergyChart\";\r\n\r\nexport default function EnergyDataChart(props: ChartProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const language = useContext(LanguageContext).language\r\n    const nutrientData = getNutrientData(props.selectedFoodItem);\r\n    const energy100g = nutrientData.baseData.energy;\r\n\r\n    const canShowAggregatedDataView = props.selectedFoodItem.aggregated && !props.directCompareUse\r\n        && props.selectedFoodItem.compositeSubElements  && props.selectedFoodItem.compositeSubElements.length >= 2\r\n\r\n    let initialChartType = props.directCompareUse\r\n        ? applicationContext?.applicationData.directCompareDataPanel.directCompareConfigChart.energyChartConfig.chartType ?? CHART_TYPE_COMPOSITION\r\n        : applicationContext?.applicationData.foodDataPanel.chartConfigData.energyChartConfig.chartType ?? CHART_TYPE_COMPOSITION\r\n\r\n    // If the user calls the URI of an aggregated element, we cannot show the aggregated energy chart and thus must not show it.\r\n    if(!canShowAggregatedDataView && initialChartType === CHART_TYPE_ENERGY_AGGREGATED) {\r\n        initialChartType = CHART_TYPE_COMPOSITION\r\n    }\r\n\r\n    if(initialChartType === \"0\") {\r\n        initialChartType = CHART_TYPE_COMPOSITION\r\n    }\r\n\r\n    const [chartType, setChartType] = useState<string>(initialChartType)\r\n\r\n    useEffect(() => {\r\n        if (applicationContext) {\r\n            if (props.directCompareUse) {\r\n                const newChartConfig = {\r\n                    ...applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart,\r\n                    energyChartConfig: {\r\n                        chartType: chartType,\r\n                        showLegend: true\r\n                    }\r\n                }\r\n                applicationContext.setDirectCompareData.updateDirectCompareChartConfig(newChartConfig)\r\n            } else {\r\n                const newChartConfig = {\r\n                    ...applicationContext.applicationData.foodDataPanel.chartConfigData,\r\n                    energyChartConfig: {\r\n                        chartType: chartType,\r\n                        showLegend: true\r\n                    }\r\n                }\r\n                applicationContext.setFoodDataPanelData.updateFoodDataPanelChartConfig(newChartConfig)\r\n            }\r\n        }\r\n\r\n    }, [chartType])\r\n\r\n    useEffect(() => {\r\n        if (applicationContext) {\r\n            if(props.selectedFoodItem.aggregated && props.selectedFoodItem.compositeSubElements &&\r\n                props.selectedFoodItem.compositeSubElements.length <= 1 && chartType === CHART_TYPE_ENERGY_AGGREGATED) {\r\n                setChartType(CHART_TYPE_COMPOSITION)\r\n            }\r\n        }\r\n    }, [props.selectedFoodItem])\r\n\r\n    if (!applicationContext || !energy100g) {\r\n        return <div>No data.</div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {chartType === CHART_TYPE_COMPOSITION &&\r\n            <div>\r\n                <EnergyCompositionChart selectedFoodItem={props.selectedFoodItem}/>\r\n            </div>\r\n            }\r\n            {chartType === CHART_TYPE_ENERGY_LEVEL &&\r\n            <div>\r\n                <EnergyLevelChart selectedFoodItem={props.selectedFoodItem}></EnergyLevelChart>\r\n            </div>\r\n            }\r\n            {chartType === CHART_TYPE_ENERGY_AGGREGATED &&\r\n            <div>\r\n                <AggregatedEnergyChart selectedFoodItem={props.selectedFoodItem}></AggregatedEnergyChart>\r\n            </div>\r\n            }\r\n            <div className=\"row chart-control-button-bar\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <form className=\"form-inline form-group\">\r\n                            <Form.Label className=\"form-elements\">\r\n                                <b>{applicationStrings.label_charttype[language]}:</b>\r\n                            </Form.Label>\r\n                            <Form.Check inline={true}\r\n                                        className=\"form-radiobutton\"\r\n                                        label={applicationStrings.label_charttype_energy_composition[language]}\r\n                                        type=\"radio\"\r\n                                        checked={chartType === CHART_TYPE_COMPOSITION}\r\n                                        onChange={() => setChartType(CHART_TYPE_COMPOSITION)}>\r\n                            </Form.Check>\r\n                            <Form.Check inline={true}\r\n                                        className=\"form-radiobutton\"\r\n                                        label={applicationStrings.label_charttype_energy_level[language]}\r\n                                        type=\"radio\"\r\n                                        checked={chartType === CHART_TYPE_ENERGY_LEVEL}\r\n                                        onChange={() => setChartType(CHART_TYPE_ENERGY_LEVEL)}>\r\n                            </Form.Check>\r\n                            <Form.Check inline={true}\r\n                                        className=\"form-radiobutton\"\r\n                                        disabled={!canShowAggregatedDataView}\r\n                                        label={applicationStrings.label_charttype_energy_aggregated[language]}\r\n                                        type=\"radio\"\r\n                                        checked={chartType === CHART_TYPE_ENERGY_AGGREGATED}\r\n                                        onChange={() => setChartType(CHART_TYPE_ENERGY_AGGREGATED)}>\r\n                            </Form.Check>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}","import React, {useContext} from \"react\"\r\nimport {LanguageContext} from \"../../contexts/LangContext\"\r\nimport {Form} from \"react-bootstrap\"\r\nimport {applicationStrings} from \"../../static/labels\"\r\nimport {AMOUNT_100_GRAM, AMOUNT_PORTION} from \"../../config/Constants\"\r\nimport {BarChartConfigurationProps} from \"../../types/livedata/ChartPropsData\"\r\n\r\nexport function BarChartConfigurationForm(props: BarChartConfigurationProps) {\r\n    const languageContext = useContext(LanguageContext)\r\n    const lang = languageContext.language\r\n\r\n    const label_portion = props.selectedFoodItem\r\n        ? `${applicationStrings.label_portion[lang]} (${props.selectedFoodItem.portion.amount} g)`\r\n        : applicationStrings.label_portion_selected[lang]\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <form className=\"form-inline form-group\">\r\n                <Form.Label className={\"form-elements\"}>\r\n                    <b>{applicationStrings.label_reference[lang]}:</b>\r\n                </Form.Label>\r\n                <Form.Check className=\"form-radiobutton mr-4\"\r\n                            type=\"radio\"\r\n                            inline={true}\r\n                            label={\"100g\"}\r\n                            value={AMOUNT_100_GRAM}\r\n                            checked={(props.portionType === AMOUNT_100_GRAM)}\r\n                            onChange={props.handleRadioButtonClick}\r\n                />\r\n                <Form.Check className=\"form-radiobutton form-horizontal-separation\"\r\n                            type=\"radio\"\r\n                            inline={true}\r\n                            label={label_portion}\r\n                            value={AMOUNT_PORTION}\r\n                            checked={props.portionType === AMOUNT_PORTION}\r\n                            onChange={props.handleRadioButtonClick}\r\n                />\r\n                <Form.Check className=\"form-radiobutton\"\r\n                            inline={true}\r\n                            label={applicationStrings.checkbox_expand100g[lang]}\r\n                            checked={props.expand100}\r\n                            onChange={props.handleExpandCheckboxClick}>\r\n                </Form.Check>\r\n                {props.handleSynchronize !== undefined && props.synchronize !== undefined &&\r\n                < Form.Check className=\"form-radiobutton\"\r\n                             inline={true}\r\n                             label={applicationStrings.checkbox_synchronize[lang]}\r\n                             checked={props.synchronize}\r\n                             onChange={props.handleSynchronize}>\r\n                </Form.Check>\r\n                }\r\n            </form>\r\n        </div>\r\n    )\r\n\r\n}","import * as Constants from '../../config/Constants';\r\nimport DietaryRequirement, {\r\n    RequirementAgeGroupData,\r\n    RequirementData\r\n} from \"../../types/nutrientdata/DietaryRequirement\";\r\nimport {UserData} from \"../../types/livedata/UserData\";\r\nimport {SEX_MALE} from \"../../config/Constants\";\r\n\r\n/*\r\n * Determines the daily requirements of a vitamin or mineral for a specific user.\r\n *\r\n * dailyRequirementObject: A vitamin or mineral requirement object (e.g. for Vitamin C or Iron).\r\n * userData: The user data object containing the user data.\r\n *\r\n * @return: The daily requirement (mg)\r\n */\r\nexport function determineDailyRequirement(dailyRequirementObject: RequirementData, userData: UserData): number {\r\n    let ageGroupRequirements: RequirementAgeGroupData\r\n\r\n    if (userData.age >= 65) {\r\n        ageGroupRequirements = dailyRequirementObject.senior;\r\n    } else if (userData.age >= 51) {\r\n        ageGroupRequirements = dailyRequirementObject.preSenior;\r\n    } else if (userData.age >= 26) {\r\n        ageGroupRequirements = dailyRequirementObject.midLifeAdult;\r\n    } else if (userData.age >= 19) {\r\n        ageGroupRequirements = dailyRequirementObject.youngAdult;\r\n    } else if (userData.age >= 15) {\r\n        ageGroupRequirements = dailyRequirementObject.youth;\r\n    } else {\r\n        ageGroupRequirements = dailyRequirementObject.youth;   // Default case (should not occur!)\r\n    }\r\n\r\n    let value: number\r\n    if (userData.sex === SEX_MALE) {\r\n        value = ageGroupRequirements.male;\r\n    } else {\r\n        if (userData.pregnant) {\r\n            value = ageGroupRequirements.femalePregnant ? ageGroupRequirements.femalePregnant : ageGroupRequirements.female;\r\n        } else if (userData.breastFeeding) {\r\n            value = ageGroupRequirements.femaleBreastFeeding ? ageGroupRequirements.femaleBreastFeeding : ageGroupRequirements.female;\r\n        } else {\r\n            value = ageGroupRequirements.female;\r\n        }\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\n\r\n/*\r\n * Determines the ratio (percentage) of vitamins/minerals in food compared to the daily requirements of the user.\r\n * Example: The daily requirements of Vitamin C is 120 mg for the user. The food contains 24 mg C. The ratio is 0.2 (20 %).\r\n *\r\n * dailyRequirementObject: A vitamin or mineral requirement object (e.g. for Vitamin C or Iron).\r\n * userData: The user data object containing the user data.\r\n * portionSize: The portion size in gram (100 = default value, i.e., 100 gram).\r\n * amountInFood: The amount of the vitamin or mineral in the food (which is always 100 gram).\r\n */\r\nexport function determineFoodRequirementRatio(dailyRequirementObject: RequirementData, amountInFood: number,\r\n                                              portionSize: number, userData: UserData): number {\r\n    const dailyRequirement = determineDailyRequirement(dailyRequirementObject, userData);\r\n    if (portionSize === 100) {\r\n        return Math.round(amountInFood / dailyRequirement * 1000) / 10;\r\n    } else {   // Calculate ration for a special amount (portion):\r\n        return Math.round(amountInFood / dailyRequirement * (portionSize * 10)) / 10;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * Determines the ratio (percentage) of proteins in food compared to the daily requirements of the user.\r\n * Example: The daily requirements of Lysine is 30 mg per kg. The user weights 80 kg. His dietary requirement\r\n * is thus 30 * 80 = 2400 mg per day. The food contains 240 mg C. The ratio is 0.1 (10 %).\r\n *\r\n * dailyRequirementObject: A protein requirement object for a specific protein (e.g. for Lycin).\r\n * userData: The user data object containing the user data.\r\n * portionSize: The portion size in gram (100 = default value, i.e., 100 gram).\r\n * amountInFood: The amount of the vitamin or mineral in the food (which is always 100 gram).\r\n */\r\nexport function determineProteinRequirementRatio(requirement: number, amountInFood: number, portionSize: number, userData: UserData) {\r\n    const dailyRequirement = (requirement * userData.weight) / 1000;\r\n\r\n    if (portionSize === 100) {\r\n        return Math.round(amountInFood / dailyRequirement * 1000) / 10;\r\n    } else {   // Calculate ration for a special amount (portion):\r\n        return Math.round(amountInFood / dailyRequirement * (portionSize * 10)) / 10;\r\n    }\r\n}\r\n\r\n\r\nexport function convertAbsoluteValueToDailyRequirement(dailyRequirements: DietaryRequirement, item: string, amount: number, userData: UserData) {\r\n    let dailyRequirementObject\r\n\r\n    if (item === Constants.DATA_VITAMINS_A) {\r\n        dailyRequirementObject = dailyRequirements.vitaminRequirementData.a;\r\n    }\r\n\r\n    if (item === Constants.DATA_VITAMINS_B1) {\r\n        dailyRequirementObject = dailyRequirements.vitaminRequirementData.b1;\r\n    }\r\n\r\n    if (item === Constants.DATA_VITAMINS_B2) {\r\n        dailyRequirementObject = dailyRequirements.vitaminRequirementData.b2;\r\n    }\r\n\r\n    if (item === Constants.DATA_VITAMINS_B3) {\r\n        dailyRequirementObject = dailyRequirements.vitaminRequirementData.b3;\r\n    }\r\n\r\n    if (item === Constants.DATA_VITAMINS_B5) {\r\n        dailyRequirementObject = dailyRequirements.vitaminRequirementData.b5;\r\n    }\r\n\r\n    if (item === Constants.DATA_VITAMINS_B6) {\r\n        dailyRequirementObject = dailyRequirements.vitaminRequirementData.b6;\r\n    }\r\n\r\n    if (item === Constants.DATA_VITAMINS_B9) {\r\n        dailyRequirementObject = dailyRequirements.vitaminRequirementData.b9;\r\n    }\r\n\r\n    if (item === Constants.DATA_VITAMINS_B12) {\r\n        dailyRequirementObject = dailyRequirements.vitaminRequirementData.b12;\r\n    }\r\n\r\n    if (item === Constants.DATA_VITAMINS_C) {\r\n        dailyRequirementObject = dailyRequirements.vitaminRequirementData.c;\r\n    }\r\n\r\n    if (item === Constants.DATA_VITAMINS_D) {\r\n        dailyRequirementObject = dailyRequirements.vitaminRequirementData.d;\r\n    }\r\n\r\n    if (item === Constants.DATA_VITAMINS_E) {\r\n        dailyRequirementObject = dailyRequirements.vitaminRequirementData.e;\r\n    }\r\n\r\n    if (item === Constants.DATA_VITAMINS_K) {\r\n        dailyRequirementObject = dailyRequirements.vitaminRequirementData.k;\r\n    }\r\n\r\n    if (item === Constants.DATA_MINERAL_CALCIUM) {\r\n        dailyRequirementObject = dailyRequirements.mineralRequirementData.calcium;\r\n    }\r\n\r\n    if (item === Constants.DATA_MINERAL_COPPER) {\r\n        dailyRequirementObject = dailyRequirements.mineralRequirementData.copper;\r\n    }\r\n\r\n    if (item === Constants.DATA_MINERAL_IRON) {\r\n        dailyRequirementObject = dailyRequirements.mineralRequirementData.iron;\r\n    }\r\n\r\n    if (item === Constants.DATA_MINERAL_MAGNESIUM) {\r\n        dailyRequirementObject = dailyRequirements.mineralRequirementData.magnesium;\r\n    }\r\n\r\n    if (item === Constants.DATA_MINERAL_MANGANESE) {\r\n        dailyRequirementObject = dailyRequirements.mineralRequirementData.manganese;\r\n    }\r\n\r\n    if (item === Constants.DATA_MINERAL_PHOSPHORUS) {\r\n        dailyRequirementObject = dailyRequirements.mineralRequirementData.phosphorus;\r\n    }\r\n\r\n    if (item === Constants.DATA_MINERAL_POTASSIUM) {\r\n        dailyRequirementObject = dailyRequirements.mineralRequirementData.potassium;\r\n    }\r\n\r\n    if (item === Constants.DATA_MINERAL_SELENIUM) {\r\n        dailyRequirementObject = dailyRequirements.mineralRequirementData.selenium;\r\n    }\r\n\r\n    if (item === Constants.DATA_MINERAL_SODIUM) {\r\n        dailyRequirementObject = dailyRequirements.mineralRequirementData.sodium;\r\n    }\r\n\r\n    if (item === Constants.DATA_MINERAL_ZINC) {\r\n        dailyRequirementObject = dailyRequirements.mineralRequirementData.zinc;\r\n    }\r\n\r\n    if (!dailyRequirementObject) {\r\n        return 0\r\n    }\r\n\r\n    const dailyRequirement = determineDailyRequirement(dailyRequirementObject, userData);\r\n    return Math.round(amount / dailyRequirement * 1000) / 10;\r\n}","// Pro-vitamin A equivalent factors\r\nexport const EQ_FACTOR_BETA_CAROTENE = 0.08333\r\nexport const EQ_FACTOR_OTHER_CAROTENE = 0.04166\r\n\r\n// Pro-vitamin E equivalent factors\r\nexport const EQ_FACTOR_TOCOPHEROL_BETA = 0.5\r\nexport const EQ_FACTOR_TOCOPHEROL_GAMMA = 0.25\r\nexport const EQ_FACTOR_TOCOPHEROL_DELTA = 0.01\r\nexport const EC_FACTOR_TOCOTRIENOL_ALPHA = 0.3\r\nexport const EC_FACTOR_TOCOTRIENOL_BETA = 0.15\r\nexport const EC_FACTOR_TOCOTRIENOL_GAMMA = 0.0757","import {determineFoodRequirementRatio} from \"../calculation/DietaryRequirementService\";\r\nimport {MineralData, VitaminData} from \"../../types/nutrientdata/FoodItem\";\r\nimport {MineralRequirementData, VitaminRequirementData} from \"../../types/nutrientdata/DietaryRequirement\";\r\nimport {UserData} from \"../../types/livedata/UserData\";\r\nimport {ChartDisplayData} from \"../../types/livedata/ChartDisplayData\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {calculateVitaminAEquivalent} from \"../calculation/provitaminCalculation/CarotenoidCalculationService\";\r\nimport {calculateVitaminEEquivalent} from \"../calculation/provitaminCalculation/ExtendedVitaminECalculationService\";\r\nimport {DataSettings} from \"../../types/livedata/DataSettings\";\r\nimport {OPTION_YES} from \"../../config/Constants\";\r\n\r\nexport function getVitaminChartData(vitaminData: VitaminData, requirementData: VitaminRequirementData, userData: UserData,\r\n                                    dataSettings: DataSettings, portionAmount: number): ChartDisplayData {\r\n    const labels: Array<string> = [];\r\n    const values: Array<number> = [];\r\n\r\n    if (vitaminData.a !== null) {\r\n        let amountA = vitaminData.a\r\n        if(dataSettings.includeProvitamins === OPTION_YES) {\r\n            amountA += calculateVitaminAEquivalent(vitaminData.carotenoidData)\r\n        }\r\n        labels.push(\"A\");\r\n        values.push(determineFoodRequirementRatio(requirementData.a, amountA, portionAmount, userData));\r\n    }\r\n\r\n    if (vitaminData.b1 !== null) {\r\n        labels.push(\"B1\");\r\n        values.push(determineFoodRequirementRatio(requirementData.b1, vitaminData.b1, portionAmount, userData));\r\n    }\r\n\r\n    if (vitaminData.b2 !== null) {\r\n        labels.push(\"B2\");\r\n        values.push(determineFoodRequirementRatio(requirementData.b2, vitaminData.b2, portionAmount, userData));\r\n    }\r\n\r\n    if (vitaminData.b3 !== null) {\r\n        labels.push(\"B3\");\r\n        values.push(determineFoodRequirementRatio(requirementData.b3, vitaminData.b3, portionAmount, userData));\r\n    }\r\n\r\n    if (vitaminData.b5 !== null) {\r\n        labels.push(\"B5\");\r\n        values.push(determineFoodRequirementRatio(requirementData.b5, vitaminData.b5, portionAmount, userData));\r\n    }\r\n\r\n    if (vitaminData.b6 !== null) {\r\n        labels.push(\"B6\");\r\n        values.push(determineFoodRequirementRatio(requirementData.b6, vitaminData.b6, portionAmount, userData));\r\n    }\r\n\r\n    if (vitaminData.b9 !== null) {\r\n        labels.push(\"B9\");\r\n        values.push(determineFoodRequirementRatio(requirementData.b9, vitaminData.b9, portionAmount, userData));\r\n    }\r\n\r\n    if (vitaminData.b12 !== null) {\r\n        labels.push(\"B12\");\r\n        values.push(determineFoodRequirementRatio(requirementData.b12, vitaminData.b12, portionAmount, userData));\r\n    }\r\n\r\n    if (vitaminData.c !== null) {\r\n        labels.push(\"C\");\r\n        values.push(determineFoodRequirementRatio(requirementData.c, vitaminData.c, portionAmount, userData));\r\n    }\r\n\r\n    if (vitaminData.d !== null) {\r\n        labels.push(\"D\");\r\n        values.push(determineFoodRequirementRatio(requirementData.d, vitaminData.d, portionAmount, userData));\r\n    }\r\n\r\n    if (vitaminData.e !== null) {\r\n        let amountE = vitaminData.e\r\n        if(dataSettings.includeProvitamins === OPTION_YES) {\r\n            amountE += calculateVitaminEEquivalent(vitaminData.extendedVitaminE)\r\n        }\r\n        labels.push(\"E\");\r\n        values.push(determineFoodRequirementRatio(requirementData.e, amountE, portionAmount, userData));\r\n    }\r\n\r\n    if (vitaminData.k !== null) {\r\n        labels.push(\"K\");\r\n        values.push(determineFoodRequirementRatio(requirementData.k, vitaminData.k, portionAmount, userData));\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        values: values\r\n    }\r\n}\r\n\r\n\r\nexport function getMineralsChartData(mineralData: MineralData, requirementData: MineralRequirementData, userData: UserData,\r\n                                     portionAmount: number, language: string): ChartDisplayData {\r\n    const labels: Array<string> = [];\r\n    const values: Array<number> = [];\r\n\r\n    if (mineralData.calcium !== null) {\r\n        labels.push(applicationStrings.label_nutrient_min_calcium[language]);\r\n        values.push(determineFoodRequirementRatio(requirementData.calcium, mineralData.calcium, portionAmount, userData));\r\n    }\r\n\r\n    if (mineralData.iron !== null) {\r\n        labels.push(applicationStrings.label_nutrient_min_iron[language]);\r\n        values.push(determineFoodRequirementRatio(requirementData.iron, mineralData.iron, portionAmount, userData));\r\n    }\r\n\r\n    if (mineralData.magnesium !== null) {\r\n        labels.push(applicationStrings.label_nutrient_min_magnesium[language]);\r\n        values.push(determineFoodRequirementRatio(requirementData.magnesium, mineralData.magnesium, portionAmount, userData));\r\n    }\r\n\r\n    if (mineralData.phosphorus !== null) {\r\n        labels.push(applicationStrings.label_nutrient_min_phosphorus[language]);\r\n        values.push(determineFoodRequirementRatio(requirementData.phosphorus, mineralData.phosphorus, portionAmount, userData));\r\n    }\r\n\r\n    if (mineralData.potassium !== null) {\r\n        labels.push(applicationStrings.label_nutrient_min_potassium[language]);\r\n        values.push(determineFoodRequirementRatio(requirementData.potassium, mineralData.potassium, portionAmount, userData));\r\n    }\r\n\r\n    if (mineralData.sodium !== null) {\r\n        labels.push(applicationStrings.label_nutrient_min_sodium[language]);\r\n        values.push(determineFoodRequirementRatio(requirementData.sodium, mineralData.sodium, portionAmount, userData));\r\n    }\r\n\r\n    if (mineralData.zinc !== null) {\r\n        labels.push(applicationStrings.label_nutrient_min_zinc[language]);\r\n        values.push(determineFoodRequirementRatio(requirementData.zinc, mineralData.zinc, portionAmount, userData));\r\n    }\r\n\r\n    if (mineralData.copper !== null) {\r\n        labels.push(applicationStrings.label_nutrient_min_copper[language]);\r\n        values.push(determineFoodRequirementRatio(requirementData.copper, mineralData.copper, portionAmount, userData));\r\n    }\r\n\r\n    if (mineralData.manganese !== null) {\r\n        labels.push(applicationStrings.label_nutrient_min_manganese[language]);\r\n        values.push(determineFoodRequirementRatio(requirementData.manganese, mineralData.manganese, portionAmount, userData));\r\n    }\r\n\r\n    if (mineralData.selenium !== null) {\r\n        labels.push(applicationStrings.label_nutrient_min_selenium[language]);\r\n        values.push(determineFoodRequirementRatio(requirementData.selenium, mineralData.selenium, portionAmount, userData));\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        values: values\r\n    }\r\n}","import {CarotenoidData} from \"../../../types/nutrientdata/FoodItem\";\r\nimport {EQ_FACTOR_BETA_CAROTENE, EQ_FACTOR_OTHER_CAROTENE} from \"./ProvitaminEquivalentFactors\";\r\n\r\nexport function getTotalAmountOfCarotenoids(carotenoidData: CarotenoidData): number | null {\r\n    if(carotenoidData === null) {\r\n        return null\r\n    }\r\n\r\n    let amount = 0;\r\n\r\n    if(carotenoidData.caroteneAlpha) {\r\n        amount += carotenoidData.caroteneAlpha\r\n    }\r\n    if(carotenoidData.caroteneBeta) {\r\n        amount += carotenoidData.caroteneBeta\r\n    }\r\n    if(carotenoidData.cryptoxanthin) {\r\n        amount += carotenoidData.cryptoxanthin\r\n    }\r\n\r\n    return amount\r\n}\r\n\r\n/**\r\n * Calculates the total vitamin A equivalent out of the different carotenoid values\r\n * @param carotenoidData\r\n */\r\nexport function calculateVitaminAEquivalent(carotenoidData: CarotenoidData | null): number {\r\n    if(carotenoidData === null) {\r\n        return 0\r\n    }\r\n\r\n    let amount = 0;\r\n\r\n    if(carotenoidData.caroteneAlpha) {\r\n        amount += (carotenoidData.caroteneAlpha * EQ_FACTOR_OTHER_CAROTENE)\r\n    }\r\n    if(carotenoidData.caroteneBeta) {\r\n        amount += (carotenoidData.caroteneBeta * EQ_FACTOR_BETA_CAROTENE)\r\n    }\r\n    if(carotenoidData.cryptoxanthin) {\r\n        amount += (carotenoidData.cryptoxanthin * EQ_FACTOR_OTHER_CAROTENE)\r\n    }\r\n\r\n    return amount\r\n}","import {ExtendedVitaminE} from \"../../../types/nutrientdata/FoodItem\";\r\nimport {\r\n    EQ_FACTOR_TOCOPHEROL_BETA,\r\n    EQ_FACTOR_TOCOPHEROL_DELTA,\r\n    EQ_FACTOR_TOCOPHEROL_GAMMA,\r\n    EC_FACTOR_TOCOTRIENOL_ALPHA,\r\n    EC_FACTOR_TOCOTRIENOL_BETA,\r\n    EC_FACTOR_TOCOTRIENOL_GAMMA\r\n} from \"./ProvitaminEquivalentFactors\";\r\n\r\nexport function getTotalAmountOfExtendedVitaminE(extendedVitaminE: ExtendedVitaminE): number | null {\r\n    if (extendedVitaminE === null) {\r\n        return null\r\n    }\r\n\r\n    let amount = 0;\r\n\r\n    if (extendedVitaminE.tocopherolBeta) {\r\n        amount += extendedVitaminE.tocopherolBeta\r\n    }\r\n    if (extendedVitaminE.tocopherolGamma) {\r\n        amount += extendedVitaminE.tocopherolGamma\r\n    }\r\n    if (extendedVitaminE.tocopherolDelta) {\r\n        amount += extendedVitaminE.tocopherolDelta\r\n    }\r\n    if (extendedVitaminE.tocotrienolAlpha) {\r\n        amount += extendedVitaminE.tocotrienolAlpha\r\n    }\r\n    if (extendedVitaminE.tocotrienolBeta) {\r\n        amount += extendedVitaminE.tocotrienolBeta\r\n    }\r\n    if (extendedVitaminE.tocotrienolGamma) {\r\n        amount += extendedVitaminE.tocotrienolGamma\r\n    }\r\n\r\n    return amount\r\n}\r\n\r\n/**\r\n * Calculates the total vitamin E equivalent out of the different forms of Vitamin E\r\n * @param extendedVitaminE Data object containing the additional Vitamin E forms\r\n */\r\nexport function calculateVitaminEEquivalent(extendedVitaminE: ExtendedVitaminE | null): number {\r\n    if (extendedVitaminE === null) {\r\n        return 0\r\n    }\r\n\r\n    let amount = 0;\r\n\r\n    if (extendedVitaminE.tocopherolBeta) {\r\n        amount += (extendedVitaminE.tocopherolBeta * EQ_FACTOR_TOCOPHEROL_BETA)\r\n    }\r\n    if (extendedVitaminE.tocopherolGamma) {\r\n        amount += (extendedVitaminE.tocopherolGamma * EQ_FACTOR_TOCOPHEROL_GAMMA)\r\n    }\r\n    if (extendedVitaminE.tocopherolDelta) {\r\n        amount += (extendedVitaminE.tocopherolDelta * EQ_FACTOR_TOCOPHEROL_DELTA)\r\n    }\r\n\r\n    if (extendedVitaminE.tocotrienolAlpha) {\r\n        amount += (extendedVitaminE.tocotrienolAlpha * EC_FACTOR_TOCOTRIENOL_ALPHA)\r\n    }\r\n\r\n    if (extendedVitaminE.tocotrienolBeta) {\r\n        amount += (extendedVitaminE.tocotrienolBeta * EC_FACTOR_TOCOTRIENOL_BETA)\r\n    }\r\n\r\n    if (extendedVitaminE.tocotrienolGamma) {\r\n        amount += (extendedVitaminE.tocotrienolGamma * EC_FACTOR_TOCOTRIENOL_GAMMA)\r\n    }\r\n\r\n    return amount\r\n}\r\n\r\n\r\nexport function hasExtendedData(extendedVitaminE: ExtendedVitaminE): boolean {\r\n    return extendedVitaminE.tocopherolBeta !== null\r\n        || extendedVitaminE.tocopherolGamma !== null\r\n        || extendedVitaminE.tocopherolDelta !== null\r\n        || extendedVitaminE.tocotrienolAlpha !== null\r\n        || extendedVitaminE.tocotrienolBeta !== null\r\n        || extendedVitaminE.tocotrienolGamma !== null\r\n}","const fontsize = \"calc(0.5rem + 0.3vw)\"\r\nconst selectHeight = \"calc(0.5rem + 0.3vw)*2.2\"\r\n\r\nexport const customSelectStyles = {\r\n    control: base => ({\r\n        ...base,\r\n        height: selectHeight,\r\n        minHeight: selectHeight,\r\n        fontSize: fontsize,\r\n    }),\r\n    valueContainer: (provided) => ({\r\n        ...provided,\r\n        height: selectHeight,\r\n        minHeight: selectHeight,\r\n        padding: '0 2px',\r\n        fontsize: fontsize\r\n    }),\r\n    dropdownIndicator: (styles) => ({\r\n        ...styles,\r\n        paddingTop: \"2px\",\r\n        paddingBottom: \"2px\",\r\n    }),\r\n    clearIndicator: (styles) => ({\r\n        ...styles,\r\n        height: selectHeight,\r\n        minHeight: selectHeight,\r\n        paddingTop: \"2px\",\r\n        paddingBottom: \"2px\",\r\n    }),\r\n};\r\n\r\n\r\nexport function getCustomSelectStyle(backgroundColor: string): any {\r\n    return {\r\n        ...customSelectStyles,\r\n        control: base => ({\r\n            ...base,\r\n            height: selectHeight,\r\n            minHeight: selectHeight,\r\n            fontSize: fontsize,\r\n            backgroundColor: backgroundColor\r\n        }),\r\n    }\r\n}\r\n\r\n\r\nexport const correspondingSelectElementStyle = {\r\n    height: selectHeight,\r\n    fontSize: fontsize\r\n}\r\n\r\nexport const COLOR_SELECTOR_CATEGORY = \" #fdebd0\"\r\nexport const COLOR_SELECTOR_FOODCLASS = \" #85c1e9\"\r\nexport const COLOR_SELECTOR_FOODITEM = \"#ebf5fb\"","import React, {ReactElement, useContext, useState} from \"react\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {BookDataEntry, NamePair} from \"../../types/BookData\";\r\nimport {TAB_MINERAL_DATA, TAB_PROTEINS_DATA, TAB_VITAMIN_DATA} from \"../../config/Constants\";\r\nimport {isSmallScreen, useWindowDimension} from \"../../service/WindowDimension\";\r\nimport {customSelectStyles} from \"../../config/UI_Config\";\r\nimport Select from 'react-select';\r\nimport ReactSelectOption from \"../../types/ReactSelectOption\";\r\nimport {Modal} from \"react-bootstrap\";\r\n\r\ninterface VitaminBookModalProps {\r\n    selectedDataTab: string\r\n    bookData: BookDataEntry[]\r\n    closeBookModal: () => void,\r\n    initiallySelectedItem?: string\r\n}\r\n\r\nexport function VitaminsBook(props: VitaminBookModalProps): ReactElement {\r\n    const languageContext = useContext(LanguageContext)\r\n\r\n    const initialIndex = props.initiallySelectedItem === undefined\r\n        ? 0\r\n        : props.bookData.findIndex(entry => entry.name[languageContext.language].endsWith(props.initiallySelectedItem)) ?? 0\r\n\r\n    const [selectedEntry, setSelectedEntry] = useState<BookDataEntry>(props.bookData[initialIndex])\r\n\r\n    const handleEntryChange = (entry: ReactSelectOption) => {\r\n        const selection = props.bookData[entry.value]\r\n        setSelectedEntry(selection)\r\n    }\r\n\r\n    const windowSize = useWindowDimension()\r\n    const selectClass = isSmallScreen(windowSize) ? \"form-control-sm\" : \"\"\r\n\r\n    if (selectedEntry === null) {\r\n        setSelectedEntry(props.bookData[0])\r\n    }\r\n\r\n    const selectList = props.bookData.map((entry, index) => {\r\n        return {\r\n            label: entry.name[languageContext.language],\r\n            value: index\r\n        }\r\n    })\r\n\r\n    const renderSelectList = () => {\r\n        const label = applicationStrings.label_selection[languageContext.language]\r\n\r\n        return (\r\n            <div className={\"d-flex flex-row align-items-baseline\"} style={{paddingBottom: \"3vh\"}}>\r\n                <span className={\"form-text\"} style={{paddingRight: \"1ch\"}}>\r\n                    {label}\r\n                </span>\r\n                <div className={\"form-section\"} style={{width: \"70%\"}}>\r\n                    <Select className={selectClass}\r\n                            options={selectList}\r\n                            defaultValue={selectList[initialIndex]}\r\n                            onChange={handleEntryChange}\r\n                            styles={customSelectStyles}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    const renderItemList = (items: NamePair[]) => {\r\n        return items.map(item => <li key={item[languageContext.language]}>{item[languageContext.language]}</li>)\r\n    }\r\n\r\n    const renderDailyRequirements = (dailyRequirementsText: string) => {\r\n        if (!dailyRequirementsText.includes(\"|\")) {\r\n            return <p>{dailyRequirementsText}</p>\r\n        } else {\r\n            const parts = dailyRequirementsText.split(\"|\");\r\n            if (parts[0].includes(\":\") && parts[1].includes(\":\")) {\r\n                const malePartsPrefix = parts[0].substring(0, parts[0].indexOf(\":\")).trim()\r\n                const malePartsData = parts[0].substring(parts[0].indexOf(\":\") + 1).trim()\r\n                const femalePartsPrefix = parts[1].substring(0, parts[1].indexOf(\":\")).trim()\r\n                const femalePartsData = parts[1].substring(parts[1].indexOf(\":\") + 1).trim()\r\n                return <span>\r\n                    <p>\r\n                        <span style={{display: \"inline-block\", minWidth: \"8ch\"}}><b>{malePartsPrefix}:</b></span>\r\n                        {malePartsData}\r\n                        <br/>\r\n                        <span style={{display: \"inline-block\", minWidth: \"8ch\"}}><b>{femalePartsPrefix}:</b></span>\r\n                        {femalePartsData}\r\n                    </p>\r\n                </span>\r\n            } else {\r\n                return <p>{dailyRequirementsText}</p>\r\n            }\r\n        }\r\n    }\r\n\r\n    const renderDataContent = () => {\r\n        if (!selectedEntry) {\r\n            return <div/>\r\n        }\r\n\r\n        const lang = languageContext.language\r\n        const title = selectedEntry.name[lang]\r\n        const scientificTitle = selectedEntry.scientificName !== undefined ? selectedEntry.scientificName[lang] : null\r\n\r\n        const hasFunctionality = selectedEntry.functionality?.length > 0\r\n        const hasDeficiencies = selectedEntry.deficiencies?.length > 0\r\n        const hasOverdose = selectedEntry.overdose !== undefined && selectedEntry.overdose !== null\r\n        const hasDependencies = selectedEntry.dependencies !== undefined && selectedEntry.dependencies !== null\r\n        const hasSources = selectedEntry.sources !== undefined && selectedEntry.sources !== null\r\n        const hasStorage = selectedEntry.storage !== undefined && selectedEntry.storage !== null\r\n\r\n        const hasDailyRequirements = selectedEntry.requirements !== undefined && selectedEntry.requirements !== null\r\n\r\n        return (\r\n            <div style={{margin: \"0.8vw\", height: \"50vh\"}} className={\"form-text\"}>\r\n                <h4>\r\n                    {title}\r\n                    {scientificTitle !== null &&\r\n                    <i style={{marginLeft: \"12px\"}}>{`(${scientificTitle})`}</i>\r\n                    }\r\n                </h4>\r\n                <p >\r\n                    {selectedEntry.description[lang]}\r\n                </p>\r\n                {hasFunctionality &&\r\n                <div>\r\n                    <h5>{applicationStrings.book_heading_functionality[lang]}</h5>\r\n                    <ul>\r\n                        {renderItemList(selectedEntry.functionality)}\r\n                    </ul>\r\n                </div>\r\n                }\r\n                {hasDeficiencies &&\r\n                <div>\r\n                    <h5>{applicationStrings.book_heading_deficiencies[lang]}</h5>\r\n                    <ul>\r\n                        {renderItemList(selectedEntry.deficiencies)}\r\n                    </ul>\r\n                </div>\r\n                }\r\n                {hasOverdose && selectedEntry.overdose &&\r\n                <div>\r\n                    <h5>{applicationStrings.book_heading_overdose[lang]}</h5>\r\n                    <p>{selectedEntry.overdose[lang]}</p>\r\n                </div>\r\n                }\r\n                {hasDependencies && selectedEntry.dependencies &&\r\n                <div>\r\n                    <h5>{applicationStrings.book_heading_dependencies[lang]}</h5>\r\n                    <p>{selectedEntry.dependencies[lang]}</p>\r\n                </div>\r\n                }\r\n                {hasStorage && selectedEntry.storage &&\r\n                <div>\r\n                    <h5>{applicationStrings.book_heading_storage[lang]}</h5>\r\n                    <p>{selectedEntry.storage[lang]}</p>\r\n                </div>\r\n                }\r\n                {hasSources && selectedEntry.sources &&\r\n                <div>\r\n                    <h5>{applicationStrings.book_heading_sources[lang]}</h5>\r\n                    <p>{selectedEntry.sources[lang]}</p>\r\n                </div>\r\n                }\r\n                {hasDailyRequirements &&\r\n                <div>\r\n                    <h5>{applicationStrings.book_heading_requirements[lang]}</h5>\r\n                    {renderDailyRequirements(selectedEntry.requirements[lang])}\r\n                </div>\r\n                }\r\n                <div className={\"pb-5\"}/>\r\n                <hr/>\r\n                <div>\r\n                    <p style={{\r\n                        fontWeight: 100,\r\n                        fontSize: \"0.9rem\",\r\n                        textAlign: \"center\"\r\n                    }}>{applicationStrings.vitamin_book_disclaimer[lang]}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    let title = null\r\n    switch (props.selectedDataTab) {\r\n        case TAB_VITAMIN_DATA:\r\n            title = applicationStrings.book_vitamins[languageContext.language]\r\n            break;\r\n        case TAB_MINERAL_DATA:\r\n            title = applicationStrings.book_minerals[languageContext.language]\r\n            break;\r\n        case TAB_PROTEINS_DATA:\r\n            title = applicationStrings.book_proteins[languageContext.language]\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <Modal size={'lg'} show={true}>\r\n            <Modal.Header>\r\n                <h5 className=\"modal-title\"><b>{title}</b></h5>\r\n                <button type=\"button\"\r\n                        className=\"btn-close\"\r\n                        data-dismiss=\"modal\"\r\n                        aria-label=\"Close\"\r\n                        onClick={props.closeBookModal}>\r\n                </button>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div style={{overflowY: \"auto\"}}>\r\n                    {renderSelectList()}\r\n                    {renderDataContent()}\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <button type=\"button\"\r\n                        className=\"btn btn-primary\"\r\n                        onClick={props.closeBookModal}>\r\n                    {applicationStrings.button_close[languageContext.language]}\r\n                </button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n\r\n}","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {LanguageContext} from \"../../../contexts/LangContext\";\r\nimport {ApplicationDataContextStore} from \"../../../contexts/ApplicationDataContext\";\r\nimport {\r\n    CHART_MINERALS,\r\n    CHART_VITAMINS,\r\n    OPTION_YES,\r\n    AMOUNT_100_GRAM\r\n} from \"../../../config/Constants\";\r\nimport * as ChartConfig from \"../../../config/ChartConfig\"\r\nimport {applicationStrings} from \"../../../static/labels\";\r\nimport {getBarChartOptions} from \"../../../service/ChartConfigurationService\"\r\nimport {Bar} from \"react-chartjs-2\";\r\nimport {initialChartConfigData} from \"../../../config/ApplicationSetting\";\r\nimport {BarChartConfigurationForm} from \"../../charthelper/BarChartConfigurationForm\";\r\nimport {MineralVitaminChartProps} from \"../../../types/livedata/ChartPropsData\";\r\nimport {useWindowDimension} from \"../../../service/WindowDimension\";\r\nimport {getNutrientData} from \"../../../service/nutrientdata/NutrientDataRetriever\";\r\nimport {getMineralsChartData, getVitaminChartData} from \"../../../service/chartdata/VitaminsMineralsDataService\";\r\n\r\nimport {VitaminsBook} from \"../VitaminBook\";\r\nimport nutrientBook from \"../../../static/nutrientBook.json\";\r\n\r\n\r\nexport default function MineralVitaminChart(props: MineralVitaminChartProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const languageContext = useContext(LanguageContext)\r\n    const lang = languageContext.language\r\n    useWindowDimension();\r\n    const chartConfigVitamins = props.directCompareConfig\r\n        ? props.directCompareConfig\r\n        : applicationContext\r\n            ? applicationContext.applicationData.foodDataPanel.chartConfigData.vitaminChartConfig\r\n            : initialChartConfigData.vitaminChartConfig\r\n\r\n    const chartConfigMinerals = props.directCompareConfig\r\n        ? props.directCompareConfig\r\n        : applicationContext\r\n            ? applicationContext.applicationData.foodDataPanel.chartConfigData.mineralChartConfig\r\n            : initialChartConfigData.mineralChartConfig\r\n\r\n    const [portionType_vitamins, setPortionType_vitamins] = useState<string>(chartConfigVitamins.portionType)\r\n    const [expand100_vitamins, setExpand100_vitamins] = useState<boolean>(chartConfigVitamins.expand100)\r\n    const [portionType_minerals, setPortionType_minerals] = useState<string>(chartConfigMinerals.portionType)\r\n    const [expand100_minerals, setExpand100_minerals] = useState<boolean>(chartConfigMinerals.expand100)\r\n    const [showBookModal, setShowBookModal] = useState<boolean>(false)\r\n    const [selectedColumnLabel, setSelectedColumnLabel] = useState<string | undefined>(undefined)\r\n\r\n    useEffect(() => {\r\n        if (props.directCompareConfig) {\r\n            setPortionType_vitamins(chartConfigVitamins.portionType)\r\n            setExpand100_vitamins(chartConfigVitamins.expand100)\r\n            setPortionType_minerals(chartConfigMinerals.portionType)\r\n            setExpand100_minerals(chartConfigMinerals.expand100)\r\n        }\r\n\r\n        updateChartConfig()\r\n    }, [portionType_vitamins, portionType_minerals, expand100_vitamins, expand100_minerals, props])\r\n\r\n\r\n    if (!applicationContext || applicationContext.foodDataCorpus.dietaryRequirements === null) {\r\n        return <div/>\r\n    }\r\n\r\n    const anyValueChanged = (): boolean => {\r\n        const config = props.selectedSubChart === CHART_VITAMINS\r\n            ? applicationContext.applicationData.foodDataPanel.chartConfigData.vitaminChartConfig\r\n            : applicationContext.applicationData.foodDataPanel.chartConfigData.mineralChartConfig\r\n\r\n        if (props.selectedSubChart === CHART_VITAMINS) {\r\n            return portionType_vitamins !== config.portionType || expand100_vitamins !== config.expand100\r\n        } else {\r\n            return portionType_minerals !== config.portionType || expand100_minerals !== config.expand100\r\n        }\r\n    }\r\n\r\n    const updateChartConfig = () => {\r\n        if (!props.directCompareConfig && anyValueChanged()) {\r\n            if (applicationContext) {\r\n                const newChartConfig = {\r\n                    ...applicationContext.applicationData.foodDataPanel.chartConfigData,\r\n                    vitaminChartConfig: {\r\n                        portionType: portionType_vitamins,\r\n                        expand100: expand100_vitamins\r\n                    },\r\n                    mineralChartConfig: {\r\n                        portionType: portionType_minerals,\r\n                        expand100: expand100_minerals\r\n                    }\r\n                }\r\n\r\n                applicationContext.setFoodDataPanelData.updateFoodDataPanelChartConfig(newChartConfig)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const createVitaminChartData = () => {\r\n        const vitaminData = props.precalculatedData !== undefined\r\n            ? props.precalculatedData\r\n            : getNutrientData(props.selectedFoodItem).vitaminData;\r\n\r\n        const requirementData = applicationContext.foodDataCorpus.dietaryRequirements?.vitaminRequirementData;\r\n        const userData = applicationContext.userData\r\n        const dataSettings = applicationContext.dataSettings\r\n        const portionAmount = portionType_vitamins === AMOUNT_100_GRAM ? 100 : props.selectedFoodItem.portion.amount\r\n\r\n        if (!vitaminData || !requirementData) {\r\n            return null\r\n        }\r\n\r\n        const chartDisplayData = getVitaminChartData(vitaminData, requirementData, userData, dataSettings, portionAmount)\r\n\r\n        const chartColor = props.directCompareConfig && props.directCompareConfig.barChartColor\r\n            ? props.directCompareConfig.barChartColor\r\n            : ChartConfig.color_chart_green_3\r\n\r\n        return {\r\n            labels: chartDisplayData.labels,\r\n            datasets: [{\r\n                label: applicationStrings.label_charttype_vitamins[lang],\r\n                data: chartDisplayData.values,\r\n                backgroundColor: chartColor,\r\n                borderWidth: 2,\r\n                borderColor: '#555',\r\n            }]\r\n        }\r\n    }\r\n\r\n    const createMineralChartData = () => {\r\n        const mineralData = props.precalculatedData !== undefined ? props.precalculatedData : getNutrientData(props.selectedFoodItem).mineralData;\r\n        const requirementData = applicationContext.foodDataCorpus.dietaryRequirements?.mineralRequirementData;\r\n        const userData = applicationContext.userData\r\n        const portionAmount = portionType_minerals === AMOUNT_100_GRAM ? 100 : props.selectedFoodItem.portion.amount\r\n\r\n        if (!mineralData || !requirementData) {\r\n            return null\r\n        }\r\n\r\n        const chartDisplayData = getMineralsChartData(mineralData, requirementData, userData, portionAmount, lang)\r\n\r\n        const chartColor = props.directCompareConfig && props.directCompareConfig.barChartColor\r\n            ? props.directCompareConfig.barChartColor\r\n            : ChartConfig.color_purple\r\n\r\n        return {\r\n            labels: chartDisplayData.labels,\r\n            datasets: [{\r\n                label: applicationStrings.label_charttype_minerals[lang],\r\n                data: chartDisplayData.values,\r\n                backgroundColor: chartColor,\r\n                borderWidth: 2,\r\n                borderColor: '#555',\r\n            }]\r\n        };\r\n    }\r\n\r\n    const handleRadioButtonClick = (event: any): void => {\r\n        const value=event.target.value\r\n        if (props.selectedSubChart === CHART_VITAMINS) {\r\n            setPortionType_vitamins(value)\r\n        } else if (props.selectedSubChart === CHART_MINERALS) {\r\n            setPortionType_minerals(value)\r\n        }\r\n    }\r\n\r\n    const handleExpandCheckbox = () => {\r\n        if (props.selectedSubChart === CHART_VITAMINS) {\r\n            setExpand100_vitamins(!expand100_vitamins)\r\n        } else if (props.selectedSubChart === CHART_MINERALS) {\r\n            setExpand100_minerals(!expand100_minerals)\r\n        }\r\n    }\r\n\r\n    const openVitaminMineralBook = (selectedColumn: string) => {\r\n        setSelectedColumnLabel(selectedColumn)\r\n        setShowBookModal(true)\r\n    }\r\n\r\n    const getOptions = (title, maxValue, data) => {\r\n        const expand100 = props.selectedSubChart === CHART_VITAMINS ? expand100_vitamins : expand100_minerals;\r\n        const overallMaxValue = props.directCompareConfig && props.directCompareConfig.maxValue\r\n            ? props.directCompareConfig.maxValue\r\n            : maxValue\r\n\r\n        let maxYValue\r\n        if (!props.directCompareConfig) {\r\n            if (expand100 && overallMaxValue < 100) {\r\n                maxYValue = 100\r\n            }\r\n        } else {\r\n            if (props.directCompareConfig.maxValue) {\r\n                maxYValue = props.directCompareConfig.maxValue\r\n            }\r\n            if (expand100) {\r\n                if (maxYValue === undefined) {\r\n                    if (overallMaxValue < 100) {\r\n                        maxYValue = 100\r\n                    }\r\n                } else if (maxYValue < 100) {\r\n                    maxYValue = 100\r\n                }\r\n            }\r\n        }\r\n\r\n        const getScientificVitaminName = (vitamin: string): string | null => {\r\n            const includeProvitamins = applicationContext.dataSettings.includeProvitamins === OPTION_YES\r\n            if((vitamin.toLowerCase() === \"a\" || vitamin.toLowerCase() === \"e\") && !includeProvitamins) {\r\n                return null\r\n            }\r\n\r\n            const labelName = \"label_nutrient_vit_scientific_\" + vitamin.toLowerCase()\r\n            if(applicationStrings[labelName]) {\r\n                return applicationStrings[labelName][lang]\r\n            } else {\r\n                return null\r\n            }\r\n        }\r\n\r\n        let barChartOptions = getBarChartOptions(title, applicationStrings.label_requirement_chart[lang], maxYValue);\r\n\r\n        const handleChartClick = (c, i) => {\r\n            if(i && i[0]) {\r\n                const clickedColumnIndex = i[0].index;\r\n                const columnLabel = data.labels[clickedColumnIndex]\r\n                openVitaminMineralBook(columnLabel)\r\n            }\r\n        }\r\n\r\n        if (props.selectedSubChart === CHART_VITAMINS) {\r\n            barChartOptions = {\r\n                ...barChartOptions, plugins: {\r\n                    ...barChartOptions.plugins, tooltip: {\r\n                        ...barChartOptions.plugins.tooltip, callbacks: {\r\n                            ...barChartOptions.plugins.tooltip.callbacks,\r\n                            title: function (context) {\r\n                                if (context && context.length > 0) {\r\n                                    const scientificName = getScientificVitaminName(context[0].label)\r\n                                    let title = `Vitamin ${context[0].label}`\r\n                                    if(scientificName) {\r\n                                        title = `${title}  (${scientificName})`\r\n                                    }\r\n                                    return title\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                onClick: handleChartClick\r\n            }\r\n        }\r\n\r\n        if (props.selectedSubChart === CHART_MINERALS) {\r\n            barChartOptions = {...barChartOptions, onClick: handleChartClick}\r\n        }\r\n\r\n        return barChartOptions\r\n    }\r\n\r\n\r\n    const renderChartConfigurationForm = () => {\r\n        const portionType = props.selectedSubChart === CHART_VITAMINS ? portionType_vitamins : portionType_minerals;\r\n        const expand100 = props.selectedSubChart === CHART_VITAMINS ? expand100_vitamins : expand100_minerals;\r\n\r\n        const barChartProps = {\r\n            selectedFoodItem: props.selectedFoodItem,\r\n            portionType: portionType,\r\n            expand100: expand100,\r\n            handleRadioButtonClick: handleRadioButtonClick,\r\n            handleExpandCheckboxClick: handleExpandCheckbox\r\n        }\r\n\r\n        return <BarChartConfigurationForm {...barChartProps} />\r\n    }\r\n\r\n\r\n    const data = props.selectedSubChart === CHART_VITAMINS ? createVitaminChartData() : createMineralChartData();\r\n\r\n    if (!data) {\r\n        return <div/>\r\n    }\r\n\r\n    const maxValue = (data && data.datasets && data.datasets.length > 0) ? Math.max(...data.datasets[0].data) : 0;\r\n\r\n    const title = props.selectedSubChart === CHART_VITAMINS ? applicationStrings.label_charttype_vitamins[lang] :\r\n        applicationStrings.label_charttype_minerals[lang];\r\n\r\n    const options = getOptions(title, maxValue, data);\r\n\r\n    const chartClass = props.directCompareUse ? \"col-12 chart-area-dc\" : \"col-12 chart-area\"\r\n    const bookData = props.selectedSubChart === CHART_VITAMINS ? nutrientBook.vitamins : nutrientBook.minerals\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            {showBookModal &&\r\n                <VitaminsBook selectedDataTab={props.selectedSubChart}\r\n                              bookData={bookData}\r\n                              initiallySelectedItem={selectedColumnLabel}\r\n                              closeBookModal={() => setShowBookModal(false)}/>\r\n            }\r\n            <div className=\"row\" key={\"base chart container vit-min\"}>\r\n                <div className={chartClass}>\r\n                    <Bar\r\n                        data={data}\r\n                        key={'chart min-vit'}\r\n                        options={options}\r\n                    />\r\n                </div>\r\n            </div>\r\n            {props.directCompareUse !== true &&\r\n            <div className=\"chart-control-button-bar\">\r\n                {renderChartConfigurationForm()}\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}","import {LipidData, OmegaData} from \"../../types/nutrientdata/FoodItem\";\r\nimport {autoRound} from \"../calculation/MathService\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport * as ChartConfig from \"../../config/ChartConfig\";\r\nimport {ChartDisplayData, LegendData} from \"../../types/livedata/ChartDisplayData\";\r\n\r\nexport function getTotalLipidsChartData(lipidsData: LipidData, hideRemainders: boolean, portionAmount: number,\r\n                                           language: string): ChartDisplayData {\r\n    const {saturated, unsaturatedMono, unsaturatedPoly} = lipidsData\r\n\r\n    let valueRemainder = portionAmount - (saturated!! + unsaturatedMono!! + unsaturatedPoly!!);\r\n    if (valueRemainder < 0) {\r\n        valueRemainder = 0\r\n    }\r\n\r\n    const portionAmountToUse = hideRemainders ? portionAmount - valueRemainder : portionAmount\r\n    valueRemainder = autoRound(valueRemainder / portionAmount * 100);\r\n\r\n    const valueSaturated = autoRound(saturated!! / portionAmountToUse * 100);\r\n    const valueUnsaturatedMono = autoRound(unsaturatedMono!! / portionAmountToUse * 100);\r\n    const valueUnsaturatedPoly = autoRound(unsaturatedPoly!! / portionAmountToUse * 100);\r\n\r\n    const labels: string[] = [applicationStrings.label_nutrient_lipids_saturated_short[language],\r\n        applicationStrings.label_nutrient_lipids_unsaturated_mono_short[language],\r\n        applicationStrings.label_nutrient_lipids_unsaturated_poly_short[language]]\r\n\r\n    const colors: string[] = [\r\n        ChartConfig.color_lipids_saturated,\r\n        ChartConfig.color_lipids_unsaturated_mono,\r\n        ChartConfig.color_lipids_unsaturated_poly]\r\n\r\n    const values: number[] = [valueSaturated,\r\n        valueUnsaturatedMono,\r\n        valueUnsaturatedPoly]\r\n\r\n    if(!hideRemainders) {\r\n        labels.push(applicationStrings.label_nutrient_remainder[language])\r\n        colors.push(ChartConfig.color_lipids_misc)\r\n        values.push(valueRemainder)\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        values: values,\r\n        colors: colors\r\n    }\r\n}\r\n\r\n\r\nexport function getOmegaChartData(omegaData: OmegaData, hideRemainders: boolean, totalAmount: number, lang: string): ChartDisplayData | null {\r\n    if (omegaData === null || omegaData.omega3 === null || omegaData.omega6 === null || omegaData.uncertain === null) {\r\n        return null;\r\n    }\r\n\r\n    const valueOmega3 = autoRound(omegaData.omega3 / totalAmount * 100);\r\n    const valueOmega6 = autoRound(omegaData.omega6 / totalAmount * 100);\r\n    const valueUncertain = autoRound(omegaData.uncertain / totalAmount * 100);\r\n\r\n    const labels: string[] = [applicationStrings.label_nutrient_omega3[lang],\r\n        applicationStrings.label_nutrient_omega6[lang]]\r\n\r\n    const values: number[] = [valueOmega3,\r\n        valueOmega6]\r\n\r\n    const colors: string[] = [\r\n        ChartConfig.color_lipids_omega3,\r\n        ChartConfig.color_lipids_omega6\r\n    ]\r\n\r\n    if(!hideRemainders) {\r\n        labels.push(applicationStrings.label_unknown[lang])\r\n        colors.push(ChartConfig.color_lipids_misc)\r\n        values.push(valueUncertain)\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        values: values,\r\n        colors: colors\r\n    }\r\n}\r\n\r\n\r\nexport function getLipidsBaseChartLegend(language: string): LegendData[] {\r\n    return [\r\n        {\r\n            item: applicationStrings.label_nutrient_lipids_saturated[language],\r\n            color: ChartConfig.color_lipids_saturated,\r\n        },\r\n        {\r\n            item: applicationStrings.label_nutrient_lipids_unsaturated_mono[language],\r\n            color: ChartConfig.color_lipids_unsaturated_mono\r\n        },\r\n        {\r\n            item: applicationStrings.label_nutrient_lipids_unsaturated_poly[language],\r\n            color: ChartConfig.color_lipids_unsaturated_poly,\r\n        },\r\n        {\r\n            item: applicationStrings.label_nutrient_remainder[language],\r\n            color: ChartConfig.color_lipids_misc\r\n        },\r\n    ];\r\n}\r\n\r\nexport function getLipidsOmegaChartLegend(language: string): LegendData[] {\r\n    return [\r\n        {\r\n            item: applicationStrings.label_nutrient_omega3[language],\r\n            color: ChartConfig.color_lipids_omega3,\r\n        },\r\n        {\r\n            item: applicationStrings.label_nutrient_omega6[language],\r\n            color: ChartConfig.color_lipids_omega6\r\n        },\r\n        {\r\n            item: applicationStrings.label_unknown[language],\r\n            color: ChartConfig.color_lipids_misc,\r\n        },\r\n    ];\r\n}","import React, {useContext, useEffect, useState} from \"react\";\r\n\r\nimport * as Constants from \"../../../config/Constants\"\r\nimport {CHART_TYPE_BAR, CHART_TYPE_PIE, LIPIDS_DATA_BASE} from \"../../../config/Constants\"\r\nimport {Bar, Pie} from \"react-chartjs-2\";\r\nimport {getBarChartOptions, getPieChartOptions} from \"../../../service/ChartConfigurationService\";\r\nimport {LanguageContext} from \"../../../contexts/LangContext\";\r\nimport {applicationStrings} from \"../../../static/labels\";\r\nimport {OmegaData} from \"../../../types/nutrientdata/FoodItem\";\r\nimport {initialChartConfigData, minimalOmegaRatio} from \"../../../config/ApplicationSetting\";\r\nimport {CustomLegend} from \"../../charthelper/CustomLegend\";\r\nimport {PieChartConfigurationForm} from \"../../charthelper/PieChartConfigurationForm\";\r\nimport {Form} from \"react-bootstrap\";\r\nimport {ApplicationDataContextStore} from \"../../../contexts/ApplicationDataContext\";\r\nimport {LipidsDataChartProps} from \"../../../types/livedata/ChartPropsData\";\r\nimport {useWindowDimension} from \"../../../service/WindowDimension\";\r\nimport {getNutrientData} from \"../../../service/nutrientdata/NutrientDataRetriever\";\r\nimport {\r\n    getLipidsBaseChartLegend,\r\n    getLipidsOmegaChartLegend,\r\n    getOmegaChartData,\r\n    getTotalLipidsChartData\r\n} from \"../../../service/chartdata/LipidsChartDataService\";\r\n\r\nexport default function LipidsDataChart(props: LipidsDataChartProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const languageContext = useContext(LanguageContext)\r\n    const lang = languageContext.language\r\n    const windowSize = useWindowDimension()\r\n\r\n    const chartConfig = props.directCompareConfig\r\n        ? props.directCompareConfig\r\n        : applicationContext\r\n            ? applicationContext.applicationData.foodDataPanel.chartConfigData.lipidsChartConfig\r\n            : initialChartConfigData.lipidsChartConfig\r\n\r\n    const initialExpand100 =  props.directCompareConfig\r\n        ? applicationContext?.applicationData.directCompareDataPanel.directCompareConfigChart.lipidsChartConfig.expand100\r\n        : chartConfig.expand100\r\n\r\n    const initialHideRemainders =  props.directCompareConfig\r\n        ? applicationContext?.applicationData.directCompareDataPanel.directCompareConfigChart.lipidsChartConfig.hideRemainders\r\n        : chartConfig.hideRemainders\r\n\r\n    const [chartType, setChartType] = useState<string>(chartConfig.chartType)\r\n    const [showLegend, setShowLegend] = useState<boolean>(chartConfig.showLegend)\r\n    const [hideRemainders, setShowHideRemainders] = useState<boolean>(initialHideRemainders ? initialHideRemainders : true)\r\n    const [expand100, setExpand100] = useState<boolean>(initialExpand100 ? initialExpand100 : false)\r\n    const [subChart, setSubChart] = useState<string>(chartConfig.subChart ? chartConfig.subChart : LIPIDS_DATA_BASE)\r\n\r\n    useEffect(() => {\r\n        if (props.directCompareConfig) {\r\n            setChartType(chartConfig.chartType)\r\n            setShowLegend(chartConfig.showLegend)\r\n            setSubChart(chartConfig.subChart ? chartConfig.subChart : LIPIDS_DATA_BASE)\r\n        }\r\n\r\n        updateChartConfig()\r\n    }, [chartType, showLegend, hideRemainders, expand100, subChart, windowSize, props])\r\n\r\n    const updateChartConfig = () => {\r\n        if (applicationContext && !props.directCompareConfig) {\r\n            const currentConfig = applicationContext.applicationData.foodDataPanel.chartConfigData.lipidsChartConfig\r\n            if (chartType !== currentConfig.chartType\r\n                || hideRemainders !== currentConfig.hideRemainders\r\n                || expand100 !== currentConfig.expand100\r\n                || subChart !== currentConfig.subChart\r\n                || showLegend !== currentConfig.showLegend) {\r\n                const newChartConfig = {\r\n                    ...applicationContext.applicationData.foodDataPanel.chartConfigData,\r\n                    lipidsChartConfig: {\r\n                        chartType: chartType,\r\n                        showLegend: showLegend,\r\n                        subChart: subChart,\r\n                        hideRemainders: hideRemainders,\r\n                        expand100: expand100\r\n                    }\r\n                }\r\n                applicationContext.setFoodDataPanelData.updateFoodDataPanelChartConfig(newChartConfig)\r\n            }\r\n        } else if(applicationContext) {\r\n            const currentConfig = applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.lipidsChartConfig\r\n            if (hideRemainders !== currentConfig.hideRemainders\r\n                || expand100 !== currentConfig.expand100) {\r\n                applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.lipidsChartConfig.expand100 = expand100\r\n                applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.lipidsChartConfig.hideRemainders = hideRemainders\r\n            }\r\n        }\r\n    }\r\n\r\n    const totalLipidsAmount = getNutrientData(props.selectedFoodItem).baseData.lipids;\r\n\r\n    const handleChartSelectionChange = (event: any) => {\r\n        const value = event.target.value\r\n        if (props.directCompareConfig && props.directCompareConfig.handleSubchartChange) {\r\n            props.directCompareConfig.handleSubchartChange(event)\r\n        } else {\r\n            setSubChart(value)\r\n        }\r\n    }\r\n\r\n    const handleExpand100Change = () => {\r\n        setExpand100(!expand100)\r\n    }\r\n\r\n    const handleHideRemaindersCheckbox = () => {\r\n        setShowHideRemainders(!hideRemainders)\r\n    }\r\n\r\n    const createTotalChartData = (totalAmount: number): any => {\r\n        const chartDisplayData  = getTotalLipidsChartData(lipidData, hideRemainders, totalAmount, lang)\r\n\r\n        return {\r\n            labels: chartDisplayData.labels,\r\n            datasets: [{\r\n                data: chartDisplayData.values,\r\n                backgroundColor: chartDisplayData.colors,\r\n                borderWidth: 2,\r\n                borderColor: '#555',\r\n            }]\r\n        };\r\n    }\r\n\r\n\r\n    const createOmegaChartData = (totalAmount: number, omegaData: OmegaData) => {\r\n        const chartDisplayData = getOmegaChartData(omegaData, hideRemainders, totalAmount, lang)\r\n        if(!chartDisplayData) {\r\n            return null\r\n        }\r\n\r\n        return {\r\n            labels: chartDisplayData.labels,\r\n            datasets: [{\r\n                data: chartDisplayData.values,\r\n                backgroundColor: chartDisplayData.colors,\r\n                borderWidth: 2,\r\n                borderColor: '#555',\r\n            }]\r\n        };\r\n\r\n    }\r\n\r\n    const handleRadioButtonClick = (event: any) => {\r\n        setChartType(event.target.value)\r\n    }\r\n\r\n    const handleLegendCheckbox = () => {\r\n        setShowLegend(!showLegend)\r\n    }\r\n\r\n    const lipidData = getNutrientData(props.selectedFoodItem).lipidData;\r\n\r\n    let omegaDataAvailabe = false\r\n    if (lipidData.omegaData && lipidData.omegaData.uncertainRatio && lipidData.omegaData.uncertainRatio <= minimalOmegaRatio) {\r\n        omegaDataAvailabe = true\r\n    }\r\n\r\n    const chartColType = chartType === CHART_TYPE_PIE ? \"col-6\" : \"col-8\";\r\n\r\n    const getOptions = () => {\r\n        let title;\r\n\r\n        if (subChart === Constants.LIPIDS_DATA_BASE) {\r\n            title = applicationStrings.label_charttype_lipids_base_title[lang]\r\n        } else if (subChart === Constants.LIPIDS_DATA_OMEGA) {\r\n            title = applicationStrings.label_charttype_lipids_omega_title[lang];\r\n        }\r\n\r\n        if (chartType === CHART_TYPE_BAR) {\r\n            return expand100 ? getBarChartOptions(title, \"%\", 100) : getBarChartOptions(title, \"%\");\r\n        } else {\r\n            return getPieChartOptions(title, \"%\");\r\n        }\r\n    }\r\n\r\n    const renderChartSelector = () => {\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <Form.Label>\r\n                        <b>{applicationStrings.label_datatype[languageContext.language]}:</b>\r\n                    </Form.Label>\r\n                    <Form.Check inline={false}\r\n                                className=\"form-radiobutton\"\r\n                                label={applicationStrings.label_charttype_lipids_base[lang]}\r\n                                type=\"radio\"\r\n                                value={Constants.LIPIDS_DATA_BASE}\r\n                                checked={subChart === Constants.LIPIDS_DATA_BASE}\r\n                                onChange={handleChartSelectionChange}>\r\n                    </Form.Check>\r\n                    <Form.Check inline={false}\r\n                                className=\"form-radiobutton\"\r\n                                label={applicationStrings.label_charttype_lipids_omega[lang]}\r\n                                type=\"radio\"\r\n                                value={Constants.LIPIDS_DATA_OMEGA}\r\n                                checked={subChart === Constants.LIPIDS_DATA_OMEGA}\r\n                                onChange={handleChartSelectionChange}>\r\n                    </Form.Check>\r\n                </Form>\r\n                <hr/>\r\n                <Form>\r\n                    <Form.Check inline={false}\r\n                                className=\"form-radiobutton\"\r\n                                label={applicationStrings.checkbox_expand100g[lang]}\r\n                                type=\"checkbox\"\r\n                                disabled={chartType === Constants.CHART_TYPE_PIE}\r\n                                checked={expand100}\r\n                                onChange={handleExpand100Change}>\r\n                    </Form.Check>\r\n                    <Form.Check inline={false}\r\n                                className=\"form-radiobutton\"\r\n                                label={applicationStrings.checkbox_chartoption_hideRemainders[lang]}\r\n                                type=\"checkbox\"\r\n                                disabled={subChart === Constants.LIPIDS_DATA_OMEGA}\r\n                                checked={hideRemainders}\r\n                                onChange={handleHideRemaindersCheckbox}>\r\n                    </Form.Check>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderChart = (lipidsType, omegaDataAvailable?) => {\r\n        const {saturated, unsaturatedMono, unsaturatedPoly, omegaData} = lipidData\r\n\r\n        const chartClass = props.directCompareUse ? \"col-12 chart-area-dc\" : \"col-12 chart-area\"\r\n\r\n        let data\r\n        if (lipidsType === Constants.LIPIDS_DATA_BASE) {\r\n            if (!saturated || !unsaturatedMono || !unsaturatedPoly) {\r\n                return <div className={chartClass}>{applicationStrings.label_noData[lang]}</div>\r\n            }\r\n            data = createTotalChartData(totalLipidsAmount);\r\n        } else if (lipidsType === Constants.LIPIDS_DATA_OMEGA) {\r\n            if (omegaData && omegaDataAvailable) {\r\n                data = createOmegaChartData(totalLipidsAmount, omegaData)\r\n            } else {\r\n                return <div className={chartClass}>{applicationStrings.label_noData[lang]}</div>\r\n            }\r\n        }\r\n\r\n        if (!data) {\r\n            return <div className={chartClass}>{applicationStrings.label_noData[lang]}</div>\r\n        }\r\n\r\n        return (\r\n            <div className={chartClass}>\r\n                {chartType === CHART_TYPE_PIE &&\r\n                <Pie data={data}\r\n                     key={'chart lipids'}\r\n                     options={getOptions()}\r\n                />\r\n                }\r\n                {chartType === CHART_TYPE_BAR &&\r\n                <Bar data={data}\r\n                     key={'chart lipids'}\r\n                     options={getOptions()}\r\n                />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\" key={\"lipids container \"}>\r\n                <div className=\"col-3 text-align-center\">\r\n                    {renderChartSelector()}\r\n                </div>\r\n                <div className={chartColType}>\r\n                    {subChart === Constants.LIPIDS_DATA_BASE &&\r\n                    renderChart(Constants.LIPIDS_DATA_BASE)\r\n                    }\r\n                    {subChart === Constants.LIPIDS_DATA_OMEGA &&\r\n                    renderChart(Constants.LIPIDS_DATA_OMEGA, omegaDataAvailabe)\r\n                    }\r\n                </div>\r\n\r\n                {showLegend && chartType === CHART_TYPE_PIE &&\r\n                <div className=\"col-3\">\r\n                    {subChart === Constants.LIPIDS_DATA_BASE &&\r\n                    <CustomLegend legendData={getLipidsBaseChartLegend(lang)}/>\r\n                    }\r\n                    {subChart === Constants.LIPIDS_DATA_OMEGA &&\r\n                    <CustomLegend legendData={getLipidsOmegaChartLegend(lang)}/>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            {!props.directCompareConfig &&\r\n            <div className=\"row chart-control-button-bar\">\r\n                <PieChartConfigurationForm key={\"Config Lipids Chart\"}\r\n                                           chartType={chartType}\r\n                                           showLegend={showLegend}\r\n                                           handleRadioButtonClick={handleRadioButtonClick}\r\n                                           handleLegendCheckboxClick={handleLegendCheckbox}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n\r\n}","import {useContext, useEffect, useState} from \"react\";\r\nimport {AMOUNT_PORTION} from \"../../../config/Constants\";\r\nimport {LanguageContext} from \"../../../contexts/LangContext\";\r\nimport {ApplicationDataContextStore} from \"../../../contexts/ApplicationDataContext\";\r\nimport {applicationStrings} from \"../../../static/labels\";\r\nimport * as ChartConfig from \"../../../config/ChartConfig\"\r\nimport {getBarChartOptions} from \"../../../service/ChartConfigurationService\"\r\nimport {Bar} from \"react-chartjs-2\";\r\nimport {initialChartConfigData} from \"../../../config/ApplicationSetting\";\r\nimport {BarChartConfigurationForm} from \"../../charthelper/BarChartConfigurationForm\";\r\nimport {ProteinDataChartProps} from \"../../../types/livedata/ChartPropsData\";\r\nimport {useWindowDimension} from \"../../../service/WindowDimension\";\r\nimport {getNutrientData} from \"../../../service/nutrientdata/NutrientDataRetriever\";\r\nimport {getProteinChartData} from \"../../../service/chartdata/ProteinChartDataService\";\r\n\r\nexport default function ProteinDataChart(props: ProteinDataChartProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const languageContext = useContext(LanguageContext)\r\n    const lang = languageContext.language\r\n    useWindowDimension();\r\n    const chartConfig = props.directCompareConfig\r\n        ? props.directCompareConfig\r\n        : applicationContext\r\n            ? applicationContext.applicationData.foodDataPanel.chartConfigData.proteinChartConfig\r\n            : initialChartConfigData.proteinChartConfig\r\n\r\n    const [portionType, setPortionType] = useState<string>(chartConfig.portionType)\r\n    const [expand100, setExpand100] = useState<boolean>(chartConfig.expand100)\r\n\r\n    useEffect(() => {\r\n        if (props.directCompareConfig) {\r\n            setExpand100(chartConfig.expand100)\r\n            setPortionType(chartConfig.portionType)\r\n        }\r\n\r\n        updateChartConfig()\r\n    }, [portionType, expand100, props])\r\n\r\n    const updateChartConfig = () => {\r\n        if (applicationContext && !props.directCompareConfig) {\r\n            const currentSetting = applicationContext.applicationData.foodDataPanel.chartConfigData.proteinChartConfig\r\n            if (expand100 !== currentSetting.expand100 || portionType !== currentSetting.portionType) {\r\n                const newChartConfig = {\r\n                    ...applicationContext.applicationData.foodDataPanel.chartConfigData,\r\n                    proteinChartConfig: {\r\n                        portionType: portionType,\r\n                        expand100: expand100\r\n                    }\r\n                }\r\n                applicationContext.setFoodDataPanelData.updateFoodDataPanelChartConfig(newChartConfig)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const createProteinChartData = () => {\r\n        const proteinData = getNutrientData(props.selectedFoodItem).proteinData;\r\n        if (!proteinData || !applicationContext) {\r\n            return null;\r\n        }\r\n\r\n        const requirementData = applicationContext.foodDataCorpus.dietaryRequirements?.proteinRequirementData;\r\n        if (!requirementData) {\r\n            return null;\r\n        }\r\n\r\n        const userData = applicationContext.userData;\r\n        const portionAmount = portionType === AMOUNT_PORTION ? props.selectedFoodItem.portion.amount : 100;\r\n        const chartDisplayData = getProteinChartData(proteinData, requirementData, userData, portionAmount, lang)\r\n\r\n        const chartColor = props.directCompareConfig && props.directCompareConfig.barChartColor\r\n            ? props.directCompareConfig.barChartColor\r\n            : ChartConfig.color_proteins\r\n\r\n        return {\r\n            labels: chartDisplayData.labels,\r\n            datasets: [{\r\n                label: applicationStrings.label_charttype_proteins[lang],\r\n                data: chartDisplayData.values,\r\n                backgroundColor: chartColor,\r\n                borderWidth: 2,\r\n                borderColor: '#555',\r\n            }]\r\n        }\r\n    }\r\n\r\n\r\n    const handleRadioButtonClick = (event: any) => {\r\n        const value=event.target.value\r\n        setPortionType(value)\r\n    }\r\n\r\n    const handleExpandCheckbox = () => {\r\n        setExpand100(!expand100)\r\n    }\r\n\r\n    const getOptions = (title, maxValue) => {\r\n        const overallMaxValue = props.directCompareConfig && props.directCompareConfig.maxValue\r\n            ? props.directCompareConfig.maxValue\r\n            : maxValue\r\n\r\n        let maxYValue\r\n        if (!props.directCompareConfig) {\r\n            if (expand100 && overallMaxValue < 100) {\r\n                maxYValue = 100\r\n            }\r\n        } else {\r\n            if (props.directCompareConfig.maxValue) {\r\n                maxYValue = props.directCompareConfig.maxValue\r\n            }\r\n            if (expand100) {\r\n                if (maxYValue === undefined) {\r\n                    if (overallMaxValue < 100) {\r\n                        maxYValue = 100\r\n                    }\r\n                } else if (maxYValue < 100) {\r\n                    maxYValue = 100\r\n                }\r\n            }\r\n        }\r\n\r\n        return getBarChartOptions(title, applicationStrings.label_requirement_chart[lang], maxYValue);\r\n    }\r\n\r\n    const renderChartConfigurationForm = () => {\r\n        const barChartProps = {\r\n            selectedFoodItem: props.selectedFoodItem,\r\n            portionType: portionType,\r\n            expand100: expand100,\r\n            handleRadioButtonClick: handleRadioButtonClick,\r\n            handleExpandCheckboxClick: handleExpandCheckbox\r\n        }\r\n\r\n        return <BarChartConfigurationForm {...barChartProps} />\r\n    }\r\n\r\n    const data = createProteinChartData();\r\n    if (!data) {\r\n        return <div/>\r\n    }\r\n\r\n    const maxValue = (data && data.datasets && data.datasets.length > 0) ? Math.max(...data.datasets[0].data) : 0;\r\n    const options = getOptions(applicationStrings.label_charttype_proteins[lang], maxValue);\r\n    const dataExists = data.datasets && data.datasets[0].data && data.datasets[0].data.length > 0\r\n\r\n    const chartClass = props.directCompareUse ? \"col-12 chart-area-dc\" : \"col-12 chart-area\"\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\" key={\"base chart container proteins\"}>\r\n                <div className={chartClass}>\r\n                    {dataExists &&\r\n                    <Bar\r\n                        data={data}\r\n                        key={'chart proteins'}\r\n                        options={options}\r\n                    />\r\n                    }\r\n                    {!dataExists &&\r\n                    <p className=\"text-center\">\r\n                        {applicationStrings.label_noData[lang]}\r\n                    </p>\r\n                    }\r\n                </div>\r\n            </div>\r\n            {props.directCompareUse !== true &&\r\n            <div className=\"row chart-control-button-bar\">\r\n                {renderChartConfigurationForm()}\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}","import {UserData} from \"../../types/livedata/UserData\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {determineProteinRequirementRatio} from \"../calculation/DietaryRequirementService\";\r\nimport {ProteinData} from \"../../types/nutrientdata/FoodItem\";\r\nimport {ProteinRequirementData} from \"../../types/nutrientdata/DietaryRequirement\";\r\nimport {ChartDisplayData} from \"../../types/livedata/ChartDisplayData\";\r\n\r\nexport function getProteinChartData(proteinData: ProteinData, requirementData: ProteinRequirementData,\r\n                                    userData: UserData, portionAmount: number, lang: string): ChartDisplayData {\r\n    const labels: Array<string> = [];\r\n    const values: Array<number> = [];\r\n\r\n    if (proteinData.histidine !== null) {\r\n        labels.push(applicationStrings.label_nutrient_proteins_histidine[lang]);\r\n        values.push(determineProteinRequirementRatio(\r\n            requirementData.histidine, proteinData.histidine, portionAmount, userData)\r\n        )\r\n    }\r\n\r\n    if (proteinData.isoleucine !== null) {\r\n        labels.push(applicationStrings.label_nutrient_proteins_isoleucine[lang]);\r\n        values.push(determineProteinRequirementRatio(\r\n            requirementData.isoleucine, proteinData.isoleucine, portionAmount, userData)\r\n        )\r\n    }\r\n\r\n    if (proteinData.leucine !== null) {\r\n        labels.push(applicationStrings.label_nutrient_proteins_leucine[lang]);\r\n        values.push(determineProteinRequirementRatio(\r\n            requirementData.leucine, proteinData.leucine, portionAmount, userData)\r\n        )\r\n    }\r\n\r\n    if (proteinData.lysine !== null) {\r\n        labels.push(applicationStrings.label_nutrient_proteins_lysine[lang]);\r\n        values.push(determineProteinRequirementRatio(\r\n            requirementData.lysine, proteinData.lysine, portionAmount, userData)\r\n        )\r\n    }\r\n\r\n    if (proteinData.methionine !== null) {\r\n        labels.push(applicationStrings.label_nutrient_proteins_methionine[lang]);\r\n        values.push(determineProteinRequirementRatio(\r\n            requirementData.methionine, proteinData.methionine, portionAmount, userData)\r\n        )\r\n    }\r\n\r\n    if (proteinData.phenylalanine !== null) {\r\n        labels.push(applicationStrings.label_nutrient_proteins_phenylalanine[lang]);\r\n        values.push(determineProteinRequirementRatio(\r\n            requirementData.phenylalanine, proteinData.phenylalanine, portionAmount, userData)\r\n        )\r\n    }\r\n\r\n    if (proteinData.threonine !== null) {\r\n        labels.push(applicationStrings.label_nutrient_proteins_threonine[lang]);\r\n        values.push(determineProteinRequirementRatio(\r\n            requirementData.threonine, proteinData.threonine, portionAmount, userData)\r\n        )\r\n    }\r\n\r\n    if (proteinData.tryptophan !== null) {\r\n        labels.push(applicationStrings.label_nutrient_proteins_tryptophan[lang]);\r\n        values.push(determineProteinRequirementRatio(\r\n            requirementData.tryptophan, proteinData.tryptophan, portionAmount, userData)\r\n        )\r\n    }\r\n\r\n    if (proteinData.valine !== null) {\r\n        labels.push(applicationStrings.label_nutrient_proteins_valine[lang]);\r\n        values.push(determineProteinRequirementRatio(\r\n            requirementData.valine, proteinData.valine, portionAmount, userData)\r\n        )\r\n    }\r\n\r\n    if (proteinData.cystine !== null) {\r\n        labels.push(applicationStrings.label_nutrient_proteins_cystine[lang]);\r\n        values.push(determineProteinRequirementRatio(\r\n            requirementData.cystine, proteinData.cystine, portionAmount, userData)\r\n        )\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        values: values\r\n    }\r\n}","import {autoRound} from \"../calculation/MathService\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport * as ChartConfig from \"../../config/ChartConfig\";\r\nimport {NutrientData} from \"../../types/nutrientdata/FoodItem\";\r\nimport {ChartDisplayData, LegendData} from \"../../types/livedata/ChartDisplayData\";\r\n\r\nexport function getCarbBaseChartData(nutrientData: NutrientData, hideRemainders: boolean, totalAmount: number,\r\n                                     language: string): ChartDisplayData | null {\r\n    let totalCarbsAmount = nutrientData.baseData.carbohydrates;\r\n    let dietaryFibers = nutrientData.baseData.dietaryFibers;\r\n    let sugar = nutrientData.carbohydrateData.sugar\r\n\r\n    // NOTE: Sometimes the sugar or dietary fibers value is above the carbs value, which is impossible (> 100 %)\r\n    if(sugar && (sugar > totalCarbsAmount)) {\r\n        sugar = totalCarbsAmount\r\n    }\r\n    if(dietaryFibers && (dietaryFibers > totalCarbsAmount)) {\r\n        dietaryFibers = totalCarbsAmount\r\n    }\r\n    if(sugar && dietaryFibers && (sugar + dietaryFibers > totalCarbsAmount)) {  // Special case, where sug + fibers are above the 100 %\r\n        sugar = (sugar / (sugar+dietaryFibers)) * totalCarbsAmount\r\n        dietaryFibers = (dietaryFibers / (sugar+dietaryFibers)) * totalCarbsAmount\r\n    }\r\n\r\n    if (!sugar || !dietaryFibers) {\r\n        return null\r\n    }\r\n\r\n    let valueRemainder = totalCarbsAmount - (sugar + dietaryFibers);\r\n    if (valueRemainder < 0) {\r\n        valueRemainder = 0\r\n    }\r\n\r\n    totalCarbsAmount = hideRemainders ? totalCarbsAmount - valueRemainder : totalCarbsAmount\r\n    valueRemainder = autoRound(valueRemainder / totalCarbsAmount * 100);\r\n\r\n    const valueSugar = autoRound(sugar / totalCarbsAmount * 100);\r\n    const valueDietaryFibers = autoRound(dietaryFibers / totalCarbsAmount * 100);\r\n\r\n    if (totalCarbsAmount === 0) {\r\n        return null;\r\n    }\r\n\r\n    const labels = [applicationStrings.label_nutrient_sugar[language],\r\n        applicationStrings.label_nutrient_dietaryFibers[language],\r\n    ]\r\n\r\n    const data = [valueSugar,\r\n        valueDietaryFibers]\r\n\r\n    const colors = [\r\n        ChartConfig.color_chart_green_3,\r\n        ChartConfig.color_chart_green_2,\r\n    ]\r\n\r\n    if(!hideRemainders) {\r\n        labels.push(applicationStrings.label_nutrient_remainder[language])\r\n        colors.push(ChartConfig.color_chart_misc)\r\n        data.push(valueRemainder)\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        values: data,\r\n        colors: colors\r\n    }\r\n}\r\n\r\nexport function getCarbDetailsChartData(nutrientData: NutrientData, hideRemainders: boolean, totalAmount: number,\r\n                                        language: string): ChartDisplayData | null {\r\n    const {carbohydrateData, baseData} = nutrientData\r\n\r\n    const valueGlucose = carbohydrateData.glucose !== null ? autoRound(carbohydrateData.glucose / totalAmount * 100) : null;\r\n    const valueFructose = carbohydrateData.fructose !== null ? autoRound(carbohydrateData.fructose / totalAmount * 100) : null;\r\n    const valueGalactose = carbohydrateData.galactose !== null ? autoRound(carbohydrateData.galactose / totalAmount * 100) : null;\r\n    const valueSucrose = carbohydrateData.sucrose !== null ? autoRound(carbohydrateData.sucrose / totalAmount * 100) : null;\r\n    const valueLactose = carbohydrateData.lactose !== null ? autoRound(carbohydrateData.lactose / totalAmount * 100) : null;\r\n    const valueMaltose = carbohydrateData.maltose !== null ? autoRound(carbohydrateData.maltose / totalAmount * 100) : null;\r\n    const valueStarch = carbohydrateData.starch !== null ? autoRound(carbohydrateData.starch / totalAmount * 100) : null;\r\n\r\n    const valueDietaryFibers = baseData.dietaryFibers !== null ? autoRound(baseData.dietaryFibers / totalAmount * 100) : null;\r\n\r\n    if (!valueMaltose && !valueSucrose && !valueLactose && !valueGlucose && !valueFructose && !valueGalactose) {\r\n        return null\r\n    }\r\n\r\n    let valueRemainder = 100\r\n\r\n    const labels: string[] = []\r\n    const data: number[] = []\r\n    const colors: string[] = []\r\n\r\n    if (valueGlucose) {\r\n        valueRemainder -= valueGlucose\r\n        labels.push(applicationStrings.label_nutrient_carbohydrates_glucose[language])\r\n        data.push(valueGlucose)\r\n        colors.push(ChartConfig.color_carbs_mono_glucose)\r\n    }\r\n    if (valueFructose) {\r\n        valueRemainder -= valueFructose\r\n        labels.push(applicationStrings.label_nutrient_carbohydrates_fructose[language])\r\n        data.push(valueFructose)\r\n        colors.push(ChartConfig.color_carbs_mono_fructose)\r\n    }\r\n    if (valueGalactose) {\r\n        valueRemainder -= valueGalactose\r\n        labels.push(applicationStrings.label_nutrient_carbohydrates_galactose[language])\r\n        data.push(valueGalactose)\r\n        colors.push(ChartConfig.color_carbs_mono_galactose)\r\n    }\r\n    if (valueSucrose) {\r\n        valueRemainder -= valueSucrose\r\n        labels.push(applicationStrings.label_nutrient_carbohydrates_sucrose[language])\r\n        data.push(valueSucrose)\r\n        colors.push(ChartConfig.color_carbs_di_sucrose)\r\n    }\r\n    if (valueLactose) {\r\n        valueRemainder -= valueLactose\r\n        labels.push(applicationStrings.label_nutrient_carbohydrates_lactose[language])\r\n        data.push(valueLactose)\r\n        colors.push(ChartConfig.color_carbs_di_lactose)\r\n    }\r\n    if (valueMaltose) {\r\n        valueRemainder -= valueMaltose\r\n        labels.push(applicationStrings.label_nutrient_carbohydrates_maltose[language])\r\n        data.push(valueMaltose)\r\n        colors.push(ChartConfig.color_carbs_di_maltose)\r\n    }\r\n    if (valueStarch) {\r\n        valueRemainder -= valueStarch\r\n        labels.push(applicationStrings.label_nutrient_carbohydrates_starch[language])\r\n        data.push(valueStarch)\r\n        colors.push(ChartConfig.color_carbs_starch)\r\n    }\r\n\r\n    if (valueDietaryFibers) {\r\n        valueRemainder -= valueDietaryFibers\r\n        labels.push(applicationStrings.label_nutrient_dietaryFibers[language])\r\n        data.push(valueDietaryFibers)\r\n        colors.push(ChartConfig.color_carbs_dietaryFibers)\r\n    }\r\n\r\n    valueRemainder = autoRound(valueRemainder);\r\n    if (valueRemainder < 0) {\r\n        valueRemainder = 0;\r\n    }\r\n\r\n    if(!hideRemainders) {\r\n        labels.push(applicationStrings.label_nutrient_remainder[language])\r\n        data.push(valueRemainder)\r\n        colors.push(ChartConfig.color_chart_misc)\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        values: data,\r\n        colors: colors\r\n    }\r\n}\r\n\r\n\r\nexport function getCarbsBaseLegend(labels: string[], language: string): LegendData[] {\r\n    const legendData: Array<any> = []\r\n\r\n    if (labels.includes(applicationStrings.label_nutrient_sugar[language])) {\r\n        legendData.push({\r\n            item: applicationStrings.label_nutrient_sugar[language],\r\n            color: ChartConfig.color_chart_green_3,\r\n        })\r\n    }\r\n\r\n    if (labels.includes(applicationStrings.label_nutrient_dietaryFibers[language])) {\r\n        legendData.push({\r\n            item: applicationStrings.label_nutrient_dietaryFibers[language],\r\n            color: ChartConfig.color_chart_green_2,\r\n        })\r\n    }\r\n\r\n    if (labels.includes(applicationStrings.label_nutrient_remainder[language])) {\r\n        legendData.push({\r\n            item: applicationStrings.label_nutrient_remainder[language],\r\n            color: ChartConfig.color_chart_misc,\r\n        })\r\n    }\r\n\r\n    return legendData;\r\n}\r\n\r\n\r\nexport function getCarbsDetailsLegend(labels: string[], language: string): LegendData[] {\r\n    const legendData: Array<any> = []\r\n\r\n    if (labels.includes(applicationStrings.label_nutrient_carbohydrates_glucose[language])) {\r\n        legendData.push({\r\n            item: applicationStrings.label_nutrient_carbohydrates_glucose[language],\r\n            color: ChartConfig.color_carbs_mono_glucose,\r\n        })\r\n    }\r\n\r\n    if (labels.includes(applicationStrings.label_nutrient_carbohydrates_fructose[language])) {\r\n        legendData.push({\r\n            item: applicationStrings.label_nutrient_carbohydrates_fructose[language],\r\n            color: ChartConfig.color_carbs_mono_fructose,\r\n        })\r\n    }\r\n\r\n    if (labels.includes(applicationStrings.label_nutrient_carbohydrates_galactose[language])) {\r\n        legendData.push({\r\n            item: applicationStrings.label_nutrient_carbohydrates_galactose[language],\r\n            color: ChartConfig.color_carbs_mono_galactose,\r\n        })\r\n    }\r\n\r\n    if (labels.includes(applicationStrings.label_nutrient_carbohydrates_sucrose[language])) {\r\n        legendData.push({\r\n            item: applicationStrings.label_nutrient_carbohydrates_sucrose[language],\r\n            color: ChartConfig.color_carbs_di_sucrose,\r\n        })\r\n    }\r\n\r\n    if (labels.includes(applicationStrings.label_nutrient_carbohydrates_lactose[language])) {\r\n        legendData.push({\r\n            item: applicationStrings.label_nutrient_carbohydrates_lactose[language],\r\n            color: ChartConfig.color_carbs_di_lactose,\r\n        })\r\n    }\r\n\r\n    if (labels.includes(applicationStrings.label_nutrient_carbohydrates_maltose[language])) {\r\n        legendData.push({\r\n            item: applicationStrings.label_nutrient_carbohydrates_maltose[language],\r\n            color: ChartConfig.color_carbs_di_maltose,\r\n        })\r\n    }\r\n\r\n    if (labels.includes(applicationStrings.label_nutrient_carbohydrates_starch[language])) {\r\n        legendData.push({\r\n            item: applicationStrings.label_nutrient_carbohydrates_starch[language],\r\n            color: ChartConfig.color_carbs_starch,\r\n        })\r\n    }\r\n\r\n    if (labels.includes(applicationStrings.label_nutrient_dietaryFibers[language])) {\r\n        legendData.push({\r\n            item: applicationStrings.label_nutrient_dietaryFibers[language],\r\n            color: ChartConfig.color_carbs_dietaryFibers,\r\n        })\r\n    }\r\n\r\n    if (labels.includes(applicationStrings.label_nutrient_remainder[language])) {\r\n        legendData.push({\r\n            item: applicationStrings.label_nutrient_remainder[language],\r\n            color: ChartConfig.color_chart_misc,\r\n        })\r\n    }\r\n\r\n    return legendData;\r\n}","import React, {useContext, useEffect, useState} from \"react\";\r\nimport * as Constants from \"../../../config/Constants\"\r\nimport {CARBS_DATA_BASE, CHART_TYPE_BAR, CHART_TYPE_PIE} from \"../../../config/Constants\"\r\nimport {Bar, Pie} from \"react-chartjs-2\";\r\nimport {getBarChartOptions, getPieChartOptions} from \"../../../service/ChartConfigurationService\";\r\nimport {LanguageContext} from \"../../../contexts/LangContext\";\r\nimport {applicationStrings} from \"../../../static/labels\";\r\nimport {Form} from \"react-bootstrap\";\r\nimport {CustomLegend} from \"../../charthelper/CustomLegend\";\r\nimport {PieChartConfigurationForm} from \"../../charthelper/PieChartConfigurationForm\";\r\nimport {initialChartConfigData} from \"../../../config/ApplicationSetting\";\r\nimport {ApplicationDataContextStore} from \"../../../contexts/ApplicationDataContext\";\r\nimport {CarbDataChartProps} from \"../../../types/livedata/ChartPropsData\";\r\nimport {GeneralChartConfigDirectCompareWithSubCharts} from \"../../../types/livedata/ChartConfigData\";\r\nimport {getNutrientData} from \"../../../service/nutrientdata/NutrientDataRetriever\";\r\nimport {\r\n    getCarbBaseChartData,\r\n    getCarbDetailsChartData,\r\n    getCarbsBaseLegend,\r\n    getCarbsDetailsLegend\r\n} from \"../../../service/chartdata/CarbsChartDataService\";\r\n\r\nexport default function CarbsDataChart(props: CarbDataChartProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const languageContext = useContext(LanguageContext)\r\n    const lang = languageContext.language\r\n\r\n    let chartConfig = props.directCompareConfig\r\n        ? props.directCompareConfig\r\n        : applicationContext\r\n            ? applicationContext.applicationData.foodDataPanel.chartConfigData.carbsChartConfig\r\n            : initialChartConfigData.carbsChartConfig\r\n\r\n    const initialExpand100 = props.directCompareConfig\r\n        ? applicationContext?.applicationData.directCompareDataPanel.directCompareConfigChart.carbsChartConfig.expand100\r\n        : chartConfig.expand100\r\n\r\n    const initialHideRemainders = props.directCompareConfig\r\n        ? applicationContext?.applicationData.directCompareDataPanel.directCompareConfigChart.carbsChartConfig.hideRemainders\r\n        : chartConfig.hideRemainders\r\n\r\n    const [chartType, setChartType] = useState<string>(chartConfig.chartType)\r\n    const [showLegend, setShowLegend] = useState<boolean>(chartConfig.showLegend)\r\n    const [hideRemainders, setShowHideRemainders] = useState<boolean>(initialHideRemainders ? initialHideRemainders : false)\r\n    const [expand100, setExpand100] = useState<boolean>(initialExpand100 ? initialExpand100 : false)\r\n    const [subChart, setSubChart] = useState<string>(chartConfig.subChart ? chartConfig.subChart : CARBS_DATA_BASE)\r\n\r\n    useEffect(() => {\r\n        if (props.directCompareConfig) {\r\n            setChartType(chartConfig.chartType)\r\n            setShowLegend(chartConfig.showLegend)\r\n            setSubChart(chartConfig.subChart ? chartConfig.subChart : CARBS_DATA_BASE)\r\n        }\r\n\r\n        updateChartConfig()\r\n    }, [chartType, showLegend, hideRemainders, expand100, subChart, props])\r\n\r\n    const updateChartConfig = () => {\r\n        if (applicationContext && !props.directCompareConfig) {\r\n            const currentConfig = applicationContext.applicationData.foodDataPanel.chartConfigData.carbsChartConfig\r\n            if (chartType !== currentConfig.chartType\r\n                || subChart !== currentConfig.subChart\r\n                || hideRemainders !== currentConfig.hideRemainders\r\n                || expand100 !== currentConfig.expand100\r\n                || showLegend !== currentConfig.showLegend) {\r\n                const newChartConfig = {\r\n                    ...applicationContext.applicationData.foodDataPanel.chartConfigData,\r\n                    carbsChartConfig: {\r\n                        chartType: chartType,\r\n                        showLegend: showLegend,\r\n                        hideRemainders: hideRemainders,\r\n                        expand100: expand100,\r\n                        subChart: subChart\r\n                    }\r\n                }\r\n                applicationContext.setFoodDataPanelData.updateFoodDataPanelChartConfig(newChartConfig)\r\n            }\r\n        } else if (applicationContext) {\r\n            const currentConfig = applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.carbsChartConfig\r\n            if (hideRemainders !== currentConfig.hideRemainders\r\n                || expand100 !== currentConfig.expand100) {\r\n                applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.carbsChartConfig.expand100 = expand100\r\n                applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.carbsChartConfig.hideRemainders = hideRemainders\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleExpand100Change = () => {\r\n        setExpand100(!expand100)\r\n    }\r\n\r\n    const handleHideRemaindersCheckbox = () => {\r\n        setShowHideRemainders(!hideRemainders)\r\n    }\r\n\r\n    const handleChartSelectionChange = (event: any) => {\r\n        const value = event.target.value\r\n\r\n        if (applicationContext && props.directCompareConfig) {\r\n            const currentSettings = applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart\r\n\r\n            const carbsChartConfig: GeneralChartConfigDirectCompareWithSubCharts = props.directCompareConfig.chartIndex === 1\r\n                ? {\r\n                    chartType: chartType,\r\n                    showLegend: showLegend,\r\n                    hideRemainders: true,\r\n                    expand100: true,\r\n                    subChart1: event.target.value,\r\n                    subChart2: currentSettings.carbsChartConfig.subChart2\r\n                }\r\n                : {\r\n                    chartType: chartType,\r\n                    showLegend: showLegend,\r\n                    hideRemainders: true,\r\n                    expand100: true,\r\n                    subChart1: currentSettings.carbsChartConfig.subChart1,\r\n                    subChart2: event.target.value\r\n                }\r\n\r\n            const newChartConfig = {\r\n                ...currentSettings,\r\n                carbsChartConfig: carbsChartConfig\r\n            }\r\n            applicationContext.setDirectCompareData.updateDirectCompareChartConfig(newChartConfig)\r\n        } else {\r\n            setSubChart(value)\r\n        }\r\n    }\r\n\r\n    const createBasicChartData = () => {\r\n        const nutrientData = getNutrientData(props.selectedFoodItem)\r\n        const totalAmount = getNutrientData(props.selectedFoodItem).baseData.carbohydrates;\r\n        const chartDisplayData = getCarbBaseChartData(nutrientData, hideRemainders, totalAmount, lang)\r\n\r\n        if (!chartDisplayData) {\r\n            return\r\n        }\r\n\r\n        return {\r\n            labels: chartDisplayData.labels,\r\n            datasets: [{\r\n                data: chartDisplayData.values,\r\n                backgroundColor: chartDisplayData.colors,\r\n                borderWidth: 2,\r\n                borderColor: '#555',\r\n            }]\r\n        }\r\n    }\r\n\r\n\r\n    const createDetailChartData = () => {\r\n        const nutrientData = getNutrientData(props.selectedFoodItem)\r\n        const totalAmount = getNutrientData(props.selectedFoodItem).baseData.carbohydrates;\r\n        const chartDisplayData = getCarbDetailsChartData(nutrientData, hideRemainders, totalAmount, lang)\r\n\r\n        if (!chartDisplayData) {\r\n            return\r\n        }\r\n\r\n        return {\r\n            labels: chartDisplayData.labels,\r\n            datasets: [{\r\n                data: chartDisplayData.values,\r\n                backgroundColor: chartDisplayData.colors,\r\n                borderWidth: 2,\r\n                borderColor: '#555',\r\n            }]\r\n        };\r\n    }\r\n\r\n\r\n    const handleRadioButtonClick = (event: any) => {\r\n        const value = event.target.value\r\n        setChartType(value)\r\n    }\r\n\r\n    const handleLegendCheckbox = () => {\r\n        setShowLegend(!showLegend)\r\n        setShowLegend(!showLegend)\r\n    }\r\n\r\n    const getOptions = () => {\r\n        let title;\r\n\r\n        if (subChart === Constants.CARBS_DATA_BASE) {\r\n            title = applicationStrings.label_charttype_carbs_base[lang];\r\n        } else if (subChart === Constants.CARBS_DATA_DETAIL) {\r\n            title = applicationStrings.label_charttype_carbs_detail[lang];\r\n        }\r\n\r\n        if (chartType === CHART_TYPE_BAR) {\r\n            return expand100 ? getBarChartOptions(title, \"%\", 100) : getBarChartOptions(title, \"%\");\r\n        } else {\r\n            return getPieChartOptions(title, \"%\");\r\n        }\r\n    }\r\n\r\n\r\n    const renderChartSelector = () => {\r\n        return (\r\n            <Form>\r\n                <Form.Label>\r\n                    <b>{applicationStrings.label_datatype[lang]}:</b>\r\n                </Form.Label>\r\n                <Form.Check inline={false}\r\n                            className={\"form-radiobutton\"}\r\n                            label={applicationStrings.label_charttype_carbs_base[lang]}\r\n                            type=\"radio\"\r\n                            value={Constants.CARBS_DATA_BASE}\r\n                            checked={subChart === Constants.CARBS_DATA_BASE}\r\n                            onChange={handleChartSelectionChange}>\r\n                </Form.Check>\r\n                <Form.Check inline={false}\r\n                            className={\"form-radiobutton\"}\r\n                            label={applicationStrings.label_charttype_carbs_detail[lang]}\r\n                            type=\"radio\"\r\n                            value={Constants.CARBS_DATA_DETAIL}\r\n                            checked={subChart === Constants.CARBS_DATA_DETAIL}\r\n                            onChange={handleChartSelectionChange}>\r\n                </Form.Check>\r\n                <hr/>\r\n                <Form.Check inline={false}\r\n                            className=\"form-radiobutton\"\r\n                            label={applicationStrings.checkbox_expand100g[lang]}\r\n                            type=\"checkbox\"\r\n                            disabled={chartType === Constants.CHART_TYPE_PIE}\r\n                            checked={expand100}\r\n                            onChange={handleExpand100Change}>\r\n                </Form.Check>\r\n                <Form.Check inline={false}\r\n                            className=\"form-radiobutton\"\r\n                            label={applicationStrings.checkbox_chartoption_hideRemainders[lang]}\r\n                            type=\"checkbox\"\r\n                            disabled={subChart === Constants.CARBS_DATA_DETAIL}\r\n                            checked={hideRemainders}\r\n                            onChange={handleHideRemaindersCheckbox}>\r\n                </Form.Check>\r\n            </Form>\r\n        )\r\n    }\r\n\r\n\r\n    const renderChart = (data: any) => {\r\n        const chartClass = props.directCompareUse ? \"col-12 chart-area-dc\" : \"col-12 chart-area\"\r\n\r\n        if (!data) {\r\n            return (\r\n                <div className={chartClass}>\r\n                    {applicationStrings.label_noData[lang]}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className={chartClass}>\r\n                {chartType === CHART_TYPE_PIE &&\r\n                <Pie data={data}\r\n                     key={'chart carbs'}\r\n                     options={getOptions()}\r\n                />\r\n                }\r\n                {chartType === CHART_TYPE_BAR &&\r\n                <Bar data={data}\r\n                     key={'chart carbs'}\r\n                     options={getOptions()}\r\n                />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    const chartColType = chartType === CHART_TYPE_PIE ? \"col-6\" : \"col-8\";\r\n    const detailChartData = createDetailChartData()\r\n    const basicChartData = createBasicChartData()\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\" key={\"carbs container\"}>\r\n                <div className=\"col-3 text-align-center\">\r\n                    {renderChartSelector()}\r\n                </div>\r\n                <div className={chartColType}>\r\n                    {subChart === Constants.CARBS_DATA_BASE &&\r\n                    renderChart(basicChartData)\r\n                    }\r\n                    {subChart === Constants.CARBS_DATA_DETAIL &&\r\n                    renderChart(detailChartData)\r\n                    }\r\n                </div>\r\n\r\n                {showLegend && chartType === Constants.CHART_TYPE_PIE &&\r\n                <div className=\"col-3\">\r\n                    {subChart === Constants.CARBS_DATA_BASE && basicChartData &&\r\n                    <CustomLegend legendData={getCarbsBaseLegend(basicChartData.labels, lang)}/>\r\n                    }\r\n                    {subChart === Constants.CARBS_DATA_DETAIL && detailChartData &&\r\n                    <CustomLegend legendData={getCarbsDetailsLegend(detailChartData.labels, lang)}/>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n            {!props.directCompareConfig &&\r\n            <div className=\"row chart-control-button-bar\">\r\n                <PieChartConfigurationForm chartType={chartType}\r\n                                           showLegend={showLegend}\r\n                                           handleRadioButtonClick={handleRadioButtonClick}\r\n                                           handleLegendCheckboxClick={handleLegendCheckbox}/>\r\n\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n\r\n\r\n}","import * as Constants from \"../config/Constants\";\r\nimport {applicationStrings} from \"../static/labels\";\r\nimport {autoRound} from \"./calculation/MathService\";\r\nimport FoodItem from \"../types/nutrientdata/FoodItem\";\r\nimport FoodClass from \"../types/nutrientdata/FoodClass\";\r\nimport {getNameFromFoodNameList} from \"./nutrientdata/NameTypeService\";\r\nimport NameType from \"../types/nutrientdata/NameType\";\r\nimport {getNutrientDataForFoodItem} from \"./nutrientdata/NutrientDataRetriever\";\r\nimport getName from \"./LanguageService\";\r\nimport {\r\n    NUTRIENT_BASE_DATA_INDEX,\r\n    NUTRIENT_CARBS_INDEX,\r\n    NUTRIENT_LIPIDS_INDEX,\r\n    NUTRIENT_MINERAL_INDEX,\r\n    NUTRIENT_PROTEIN_INDEX,\r\n    NUTRIENT_VITAMIN_INDEX\r\n} from \"../config/Constants\";\r\nimport ReactSelectOption, {ReactSelectStringValueOption} from \"../types/ReactSelectOption\";\r\n\r\n\r\nexport interface ChartItem {\r\n    name: string\r\n    value: number\r\n    id?: number   // Possibly, the food item ID to which the bar refers to (juxtaposition chart)\r\n}\r\n\r\n/**\r\n * Returns a list of all ranking categories.\r\n */\r\nexport function getNutrientGroups(language: string): Array<ReactSelectOption> {\r\n    return [\r\n        {value: NUTRIENT_BASE_DATA_INDEX, label: applicationStrings.label_chart_nutrientComposition[language]},\r\n        {value: NUTRIENT_VITAMIN_INDEX, label: applicationStrings.label_nutrient_vit[language]},\r\n        {value: NUTRIENT_MINERAL_INDEX, label: applicationStrings.label_nutrient_min[language]},\r\n        {value: NUTRIENT_LIPIDS_INDEX, label: applicationStrings.label_nutrient_lipids_long[language]},\r\n        {value: NUTRIENT_CARBS_INDEX, label: applicationStrings.label_nutrient_carbohydrates[language]},\r\n        {value: NUTRIENT_PROTEIN_INDEX, label: applicationStrings.label_chart_proteins[language]},\r\n    ];\r\n}\r\n\r\n/**\r\n * Returns the nutrient group of a nutrient value.\r\n * @param groupIndex The group index (constant).\r\n * @param language The language to use.\r\n */\r\nexport function getNutrientGroup(nutrientValue: string, language: string): ReactSelectOption | undefined {\r\n    const groupIndex = getNutrientGroupFromValue(nutrientValue, language)\r\n    return getNutrientGroups(language).find(group => group.value === groupIndex)\r\n}\r\n\r\n/**\r\n * Given a nutrient value (constant), this function returns the nutrient group index to which the nutrient belongs.\r\n * @param nutrientValue A nutrient value (constant).\r\n * @return The nutrient group index (e.g. Base Data, Vitamin Data etc.).\r\n */\r\nexport function getNutrientGroupFromValue(nutrientValue: string, language: string): number {\r\n    const isNutrientInGroup = (nutrientValue: string, nutrientGroup: Array<ReactSelectStringValueOption>): boolean => {\r\n        return nutrientGroup.find(entry => entry.value === nutrientValue) !== undefined\r\n    }\r\n\r\n    if(isNutrientInGroup(nutrientValue, getVitaminCategoryValues(language))) {\r\n        return NUTRIENT_VITAMIN_INDEX\r\n    }\r\n\r\n    if(isNutrientInGroup(nutrientValue, getMineralCategoryValues(language))) {\r\n        return NUTRIENT_MINERAL_INDEX\r\n    }\r\n\r\n    if(isNutrientInGroup(nutrientValue, getLipidCategoryValues(language))) {\r\n        return NUTRIENT_LIPIDS_INDEX\r\n    }\r\n\r\n    if(isNutrientInGroup(nutrientValue, getCarbohydrateCategoryValues(language))) {\r\n        return NUTRIENT_CARBS_INDEX\r\n    }\r\n\r\n    if(isNutrientInGroup(nutrientValue, getProteinCategoryValues(language))) {\r\n        return NUTRIENT_PROTEIN_INDEX\r\n    }\r\n\r\n    return -1\r\n}\r\n\r\n\r\n/**\r\n * Returns the list of all selectable vitamins.\r\n */\r\nexport function getBaseCategoryValues(language: string): Array<ReactSelectStringValueOption> {\r\n    return [\r\n        {value: Constants.DATA_ENERGY, label: applicationStrings.label_nutrient_energy[language]},\r\n        {value: Constants.DATA_WATER, label: applicationStrings.label_nutrient_water[language]},\r\n        {value: Constants.DATA_CARBS, label: applicationStrings.label_nutrient_carbohydrates[language]},\r\n        {value: Constants.DATA_LIPIDS, label: applicationStrings.label_nutrient_lipids_long[language]},\r\n        {value: Constants.DATA_PROTEINS, label: applicationStrings.label_nutrient_proteins[language]},\r\n        {value: Constants.DATA_CAFFEINE, label: applicationStrings.label_nutrient_caffeine[language]},\r\n        {value: Constants.DATA_ALCOHOL, label: applicationStrings.label_nutrient_alcohol[language]},\r\n        {value: Constants.DATA_ASH, label: applicationStrings.label_nutrient_ash[language]},\r\n    ];\r\n}\r\n\r\n\r\n/**\r\n * Returns the list of all selectable vitamin values.\r\n */\r\nexport function getVitaminCategoryValues(language: string): Array<ReactSelectStringValueOption> {\r\n    return [\r\n        {value: Constants.DATA_VITAMINS_A, label: applicationStrings.label_nutrient_vit_a[language]},\r\n        {value: Constants.DATA_VITAMINS_B1, label: applicationStrings.label_nutrient_vit_b1[language]},\r\n        {value: Constants.DATA_VITAMINS_B2, label: applicationStrings.label_nutrient_vit_b2[language]},\r\n        {value: Constants.DATA_VITAMINS_B3, label: applicationStrings.label_nutrient_vit_b3[language]},\r\n        {value: Constants.DATA_VITAMINS_B5, label: applicationStrings.label_nutrient_vit_b5[language]},\r\n        {value: Constants.DATA_VITAMINS_B6, label: applicationStrings.label_nutrient_vit_b6[language]},\r\n        {value: Constants.DATA_VITAMINS_B9, label: applicationStrings.label_nutrient_vit_b9[language]},\r\n        {value: Constants.DATA_VITAMINS_B12, label: applicationStrings.label_nutrient_vit_b12[language]},\r\n        {value: Constants.DATA_VITAMINS_C, label: applicationStrings.label_nutrient_vit_c[language]},\r\n        {value: Constants.DATA_VITAMINS_D, label: applicationStrings.label_nutrient_vit_d[language]},\r\n        {value: Constants.DATA_VITAMINS_E, label: applicationStrings.label_nutrient_vit_e[language]},\r\n        {value: Constants.DATA_VITAMINS_K, label: applicationStrings.label_nutrient_vit_k[language]},\r\n    ];\r\n}\r\n\r\n\r\n/**\r\n * Returns the list of all selectable mineral values.\r\n */\r\nexport function getMineralCategoryValues(language: string): Array<ReactSelectStringValueOption> {\r\n    return [\r\n        {value: Constants.DATA_MINERAL_CALCIUM, label: applicationStrings.label_nutrient_min_calcium[language]},\r\n        {value: Constants.DATA_MINERAL_IRON, label: applicationStrings.label_nutrient_min_iron[language]},\r\n        {value: Constants.DATA_MINERAL_MAGNESIUM, label: applicationStrings.label_nutrient_min_magnesium[language]},\r\n        {value: Constants.DATA_MINERAL_PHOSPHORUS, label: applicationStrings.label_nutrient_min_phosphorus[language]},\r\n        {value: Constants.DATA_MINERAL_POTASSIUM, label: applicationStrings.label_nutrient_min_potassium[language]},\r\n        {value: Constants.DATA_MINERAL_SODIUM, label: applicationStrings.label_nutrient_min_sodium[language]},\r\n        {value: Constants.DATA_MINERAL_ZINC, label: applicationStrings.label_nutrient_min_zinc[language]},\r\n        {value: Constants.DATA_MINERAL_SELENIUM, label: applicationStrings.label_nutrient_min_selenium[language]},\r\n        {value: Constants.DATA_MINERAL_MANGANESE, label: applicationStrings.label_nutrient_min_manganese[language]},\r\n        {value: Constants.DATA_MINERAL_COPPER, label: applicationStrings.label_nutrient_min_copper[language]},\r\n    ];\r\n}\r\n\r\n\r\n/**\r\n * Returns the list of all selectable mineral values.\r\n */\r\nexport function getLipidCategoryValues(language: string): Array<ReactSelectStringValueOption> {\r\n    return [\r\n        {value: Constants.DATA_LIPIDS_SATURATED, label: applicationStrings.label_nutrient_lipids_saturated[language]},\r\n        {\r\n            value: Constants.DATA_LIPIDS_MONO_UNSATURATED,\r\n            label: applicationStrings.label_nutrient_lipids_unsaturated_mono[language]\r\n        },\r\n        {\r\n            value: Constants.DATA_LIPIDS_POLY_UNSATURATED,\r\n            label: applicationStrings.label_nutrient_lipids_unsaturated_poly[language]\r\n        },\r\n        {\r\n            value: Constants.DATA_LIPIDS_TRANSFATTY_ACIDS,\r\n            label: applicationStrings.label_nutrient_lipids_unsaturated[language]\r\n        },\r\n    ];\r\n}\r\n\r\n\r\n/**\r\n * Returns the list of all selectable carbohydrate values.\r\n */\r\nexport function getCarbohydrateCategoryValues(language: string): Array<ReactSelectStringValueOption> {\r\n    return [\r\n        {value: Constants.DATA_CARBS_DIETARY_FIBERS, label: applicationStrings.label_nutrient_dietaryFibers[language]},\r\n        {value: Constants.DATA_CARBS_SUGAR, label: applicationStrings.label_nutrient_sugar[language]},\r\n        {value: Constants.DATA_CARBS_GLUCOSE, label: applicationStrings.label_nutrient_carbohydrates_glucose[language]},\r\n        {\r\n            value: Constants.DATA_CARBS_FRUCTOSE,\r\n            label: applicationStrings.label_nutrient_carbohydrates_fructose[language]\r\n        },\r\n        {\r\n            value: Constants.DATA_CARBS_GALACTOSE,\r\n            label: applicationStrings.label_nutrient_carbohydrates_galactose[language]\r\n        },\r\n        {value: Constants.DATA_CARBS_SUCROSE, label: applicationStrings.label_nutrient_carbohydrates_sucrose[language]},\r\n        {value: Constants.DATA_CARBS_LACTOSE, label: applicationStrings.label_nutrient_carbohydrates_lactose[language]},\r\n        {value: Constants.DATA_CARBS_MALTOSE, label: applicationStrings.label_nutrient_carbohydrates_maltose[language]},\r\n        {value: Constants.DATA_CARBS_STARCH, label: applicationStrings.label_nutrient_carbohydrates_starch[language]},\r\n    ];\r\n}\r\n\r\n\r\n/**\r\n * Returns the list of all protein values.\r\n */\r\nexport function getProteinCategoryValues(language: string): Array<ReactSelectStringValueOption> {\r\n    return [\r\n        {value: Constants.DATA_PROTEIN_ALANINE, label: applicationStrings.label_nutrient_proteins_alanine[language]},\r\n        {value: Constants.DATA_PROTEIN_ARGININE, label: applicationStrings.label_nutrient_proteins_arginine[language]},\r\n        {\r\n            value: Constants.DATA_PROTEIN_ASPARTIC_ACID,\r\n            label: applicationStrings.label_nutrient_proteins_asparticAcid[language]\r\n        },\r\n        {value: Constants.DATA_PROTEIN_CYSTINE, label: applicationStrings.label_nutrient_proteins_cystine[language]},\r\n        {\r\n            value: Constants.DATA_PROTEIN_GLUTAMIC_ACID,\r\n            label: applicationStrings.label_nutrient_proteins_glutamicAcid[language]\r\n        },\r\n        {value: Constants.DATA_PROTEIN_GLYCINE, label: applicationStrings.label_nutrient_proteins_glysine[language]},\r\n        {\r\n            value: Constants.DATA_PROTEIN_HISTIDINE,\r\n            label: applicationStrings.label_nutrient_proteins_histidine[language]\r\n        },\r\n        {\r\n            value: Constants.DATA_PROTEIN_ISOLEUCINE,\r\n            label: applicationStrings.label_nutrient_proteins_isoleucine[language]\r\n        },\r\n        {value: Constants.DATA_PROTEIN_LEUCINE, label: applicationStrings.label_nutrient_proteins_leucine[language]},\r\n        {value: Constants.DATA_PROTEIN_LYSINE, label: applicationStrings.label_nutrient_proteins_lysine[language]},\r\n        {\r\n            value: Constants.DATA_PROTEIN_METHIONINE,\r\n            label: applicationStrings.label_nutrient_proteins_methionine[language]\r\n        },\r\n        {\r\n            value: Constants.DATA_PROTEIN_PHENYLALANINE,\r\n            label: applicationStrings.label_nutrient_proteins_phenylalanine[language]\r\n        },\r\n        {value: Constants.DATA_PROTEIN_PROLINE, label: applicationStrings.label_nutrient_proteins_proline[language]},\r\n        {value: Constants.DATA_PROTEIN_SERINE, label: applicationStrings.label_nutrient_proteins_serine[language]},\r\n        {\r\n            value: Constants.DATA_PROTEIN_THREONINE,\r\n            label: applicationStrings.label_nutrient_proteins_threonine[language]\r\n        },\r\n        {\r\n            value: Constants.DATA_PROTEIN_TRYPTOPHAN,\r\n            label: applicationStrings.label_nutrient_proteins_tryptophan[language]\r\n        },\r\n        {value: Constants.DATA_PROTEIN_TYROSINE, label: applicationStrings.label_nutrient_proteins_tyrosine[language]},\r\n        {value: Constants.DATA_PROTEIN_VALINE, label: applicationStrings.label_nutrient_proteins_valine[language]},\r\n    ];\r\n}\r\n\r\n\r\nexport function getElementsOfRankingGroup(rankingGroup: number, language: string): Array<ReactSelectStringValueOption> {\r\n    switch (rankingGroup) {\r\n        case NUTRIENT_BASE_DATA_INDEX:\r\n            return getBaseCategoryValues(language)\r\n        case NUTRIENT_VITAMIN_INDEX:\r\n            return getVitaminCategoryValues(language)\r\n        case NUTRIENT_MINERAL_INDEX:\r\n            return getMineralCategoryValues(language)\r\n        case NUTRIENT_LIPIDS_INDEX:\r\n            return getLipidCategoryValues(language)\r\n        case NUTRIENT_CARBS_INDEX:\r\n            return getCarbohydrateCategoryValues(language)\r\n        case NUTRIENT_PROTEIN_INDEX:\r\n            return getProteinCategoryValues(language)\r\n        default:\r\n            return getBaseCategoryValues(language)  // Fallback\r\n    }\r\n}\r\n\r\n\r\nexport function getOrderedFoodList(foodList: Array<FoodItem>, foodClassesList: Array<FoodClass>, selectedCategory: number,\r\n                                   selectedValue: any, use100gram: number, language: string, foodNamesList: Array<NameType>,\r\n                                   conditions: Array<NameType>): Array<ChartItem> {\r\n    let chartItems: Array<ChartItem> = [];\r\n\r\n    for (let i = 0; i < foodList.length; i++) {\r\n        let foodItem: FoodItem = foodList[i];\r\n        const foodClassId = foodClassesList.find(foodClass => foodClass.id === foodItem.foodClass)\r\n        const category = foodClassId ? foodClassId.category : foodClassId\r\n\r\n        if (selectedCategory !== 0 && (category !== selectedCategory)) {\r\n            continue;  // Skip this food item, as it does not belong to the selected category\r\n        }\r\n\r\n        let value = getValueOfFoodItem(foodItem, selectedValue);\r\n        if (value === null || value === 0) {\r\n            continue;  // Skip all food items, which do not have the specified value\r\n        }\r\n\r\n        let portionAmount\r\n\r\n        if (!use100gram) {\r\n            const defaultPortion = foodItem.defaultPortionId\r\n            const portionObject = foodItem.portionData?.find(portionObject => portionObject.portionType === defaultPortion)\r\n            portionAmount = portionObject ? portionObject.amount : 100\r\n            value = getPortionValue(value, portionAmount);\r\n        } else {\r\n            value = autoRound(value)\r\n        }\r\n\r\n        let name = getNameFromFoodNameList(foodNamesList, foodItem.nameId!!, language)\r\n\r\n        if(foodItem.conditionId !== 100) {\r\n            const condition = conditions.find(condition => condition.id === foodItem.conditionId)\r\n            if(condition) {\r\n                const conditionName = getName(condition, language)\r\n                name = name + \", \" + conditionName\r\n            }\r\n        }\r\n\r\n        if(!use100gram) {\r\n            name = name + \" (\" + portionAmount + \"g )\"\r\n        }\r\n\r\n        const chartItem: ChartItem = {\r\n            name: name ? name : \"\",\r\n            value: value\r\n        };\r\n\r\n        chartItems.push(chartItem);\r\n    }\r\n\r\n    return sortChartItems(chartItems);\r\n}\r\n\r\n\r\nexport function sortChartItems(chartItems: Array<ChartItem>): Array<ChartItem> {\r\n    return chartItems.sort((obj1, obj2) => {\r\n        if (obj1.value > obj2.value) {\r\n            return -1;\r\n        } else if (obj1.value < obj2.value) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport function getValueOfFoodItem(foodItem: FoodItem, selectedValue: string, sourceToUse = 0, supplementData = false): number | null {\r\n    let value\r\n    const nutrientData = getNutrientDataForFoodItem(foodItem, sourceToUse, supplementData)\r\n\r\n    const { baseData, vitaminData, mineralData, lipidData, carbohydrateData, proteinData} = nutrientData;\r\n\r\n    if (proteinData === null) {\r\n        return 0;\r\n    }\r\n\r\n    // Base Data\r\n\r\n    if (selectedValue === Constants.DATA_ENERGY) {\r\n        value = baseData.energy;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_WATER) {\r\n        value = baseData.water;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_CARBS) {\r\n        value = baseData.carbohydrates;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_LIPIDS) {\r\n        value = baseData.lipids;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_PROTEINS) {\r\n        value = baseData.proteins;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_ASH) {\r\n        value = baseData.ash;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_CAFFEINE) {\r\n        value = baseData.caffeine;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_ALCOHOL) {\r\n        value = baseData.alcohol;\r\n    }\r\n\r\n\r\n    // Vitamins\r\n\r\n    if (selectedValue === Constants.DATA_VITAMINS_A) {\r\n        value = vitaminData.a;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_VITAMINS_B1) {\r\n        value = vitaminData.b1;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_VITAMINS_B2) {\r\n        value = vitaminData.b2;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_VITAMINS_B3) {\r\n        value = vitaminData.b3;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_VITAMINS_B5) {\r\n        value = vitaminData.b5;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_VITAMINS_B6) {\r\n        value = vitaminData.b6;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_VITAMINS_B9) {\r\n        value = vitaminData.b9;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_VITAMINS_B12) {\r\n        value = vitaminData.b12;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_VITAMINS_C) {\r\n        value = vitaminData.c;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_VITAMINS_D) {\r\n        value = vitaminData.d;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_VITAMINS_E) {\r\n        value = vitaminData.e;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_VITAMINS_K) {\r\n        value = vitaminData.k;\r\n    }\r\n\r\n\r\n    // Minerals\r\n\r\n    if (selectedValue === Constants.DATA_MINERAL_CALCIUM) {\r\n        value = mineralData.calcium;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_MINERAL_IRON) {\r\n        value = mineralData.iron;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_MINERAL_MAGNESIUM) {\r\n        value = mineralData.magnesium;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_MINERAL_PHOSPHORUS) {\r\n        value = mineralData.phosphorus;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_MINERAL_POTASSIUM) {\r\n        value = mineralData.potassium;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_MINERAL_SODIUM) {\r\n        value = mineralData.sodium;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_MINERAL_ZINC) {\r\n        value = mineralData.zinc;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_MINERAL_SELENIUM) {\r\n        value = mineralData.selenium;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_MINERAL_COPPER) {\r\n        value = mineralData.copper;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_MINERAL_MANGANESE) {\r\n        value = mineralData.manganese;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_LIPIDS_SATURATED) {\r\n        value = lipidData.saturated;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_LIPIDS_MONO_UNSATURATED) {\r\n        value = lipidData.unsaturatedMono;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_LIPIDS_POLY_UNSATURATED) {\r\n        value = lipidData.unsaturatedPoly;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_LIPIDS_TRANSFATTY_ACIDS) {\r\n        value = lipidData.transFattyAcids;\r\n    }\r\n\r\n    // Carbohydrates\r\n\r\n    if (selectedValue === Constants.DATA_CARBS_DIETARY_FIBERS) {\r\n        value = baseData.dietaryFibers;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_CARBS_SUGAR) {\r\n        value = carbohydrateData.sugar;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_CARBS_GLUCOSE) {\r\n        value = carbohydrateData.glucose;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_CARBS_FRUCTOSE) {\r\n        value = carbohydrateData.fructose;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_CARBS_GALACTOSE) {\r\n        value = carbohydrateData.galactose;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_CARBS_SUCROSE) {\r\n        value = carbohydrateData.sucrose;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_CARBS_LACTOSE) {\r\n        value = carbohydrateData.lactose;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_CARBS_MALTOSE) {\r\n        value = carbohydrateData.maltose;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_CARBS_STARCH) {\r\n        value = carbohydrateData.starch;\r\n    }\r\n\r\n\r\n    // Proteins\r\n\r\n    if (selectedValue === Constants.DATA_PROTEIN_ALANINE) {\r\n        value = proteinData.alanine;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_PROTEIN_ARGININE) {\r\n        value = proteinData.arginine;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_PROTEIN_ASPARTIC_ACID) {\r\n        value = proteinData.asparticAcid;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_PROTEIN_CYSTINE) {\r\n        value = proteinData.cystine;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_PROTEIN_GLUTAMIC_ACID) {\r\n        value = proteinData.glutamicAcid;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_PROTEIN_GLYCINE) {\r\n        value = proteinData.glycine;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_PROTEIN_HISTIDINE) {\r\n        value = proteinData.histidine;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_PROTEIN_ISOLEUCINE) {\r\n        value = proteinData.isoleucine;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_PROTEIN_LEUCINE) {\r\n        value = proteinData.leucine;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_PROTEIN_LYSINE) {\r\n        value = proteinData.lysine;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_PROTEIN_METHIONINE) {\r\n        value = proteinData.methionine;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_PROTEIN_PHENYLALANINE) {\r\n        value = proteinData.phenylalanine;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_PROTEIN_PROLINE) {\r\n        value = proteinData.proline;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_PROTEIN_SERINE) {\r\n        value = proteinData.serine;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_PROTEIN_THREONINE) {\r\n        value = proteinData.threonine;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_PROTEIN_TRYPTOPHAN) {\r\n        value = proteinData.tryptophan;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_PROTEIN_TYROSINE) {\r\n        value = proteinData.tyrosine;\r\n    }\r\n\r\n    if (selectedValue === Constants.DATA_PROTEIN_VALINE) {\r\n        value = proteinData.valine;\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\n\r\nfunction getPortionValue(value, portionSize) {\r\n    const portionValue = value / 100 * portionSize;\r\n    return autoRound(portionValue);\r\n}","import {determineFoodRequirementRatio, determineProteinRequirementRatio} from \"./DietaryRequirementService\";\r\nimport {UserData} from \"../../types/livedata/UserData\";\r\nimport * as Constants from \"../../config/Constants\";\r\n\r\n/**\r\n * Determines the maximum vitamin or mineral or protein value of a food item (referring to the daily dietary requirements).\r\n */\r\nexport function getMaximumValue(dataSet: any, amount: number, requirementData: any, userData: UserData, proteins?: boolean) {\r\n    let maxValue = 0\r\n    for (let dataSetKey in dataSet) {\r\n        if (requirementData[dataSetKey]) {\r\n            const ratioValue = proteins === true\r\n                ? determineProteinRequirementRatio(requirementData[dataSetKey], dataSet[dataSetKey], amount, userData)\r\n                : determineFoodRequirementRatio(requirementData[dataSetKey], dataSet[dataSetKey], amount, userData)\r\n            if (ratioValue > maxValue) {\r\n                maxValue = ratioValue\r\n            }\r\n        }\r\n    }\r\n    return maxValue\r\n}\r\n\r\n\r\n/**\r\n * Given two data sets of values, this method determines the attributes that has values for both objects. It\r\n * can be used to remove all data attributes (columns) where at least one of the two data sets does not provide\r\n * a value.\r\n * @param dataSet1\r\n * @param dataSet2\r\n */\r\nexport function getOverlappingValues(dataSet1: any, dataSet2: any): string[] {\r\n    const overlapping: string[] = []\r\n    for (const dataSetKey in dataSet1) {\r\n        const value = dataSet1[dataSetKey]\r\n        if((value !== null && value !== undefined) && (dataSet2[dataSetKey] !== null && dataSet2[dataSetKey] !== undefined)) {\r\n            overlapping.push(dataSetKey)\r\n        }\r\n    }\r\n\r\n    return overlapping\r\n}\r\n\r\n\r\nexport function nullifyNonOverlappingValues(dataSet: any, overlappingAttributes: string[]): any {\r\n    const newDataset: any = {}\r\n    for (const dataSetKey in dataSet) {\r\n        if(!overlappingAttributes.includes(dataSetKey)) {\r\n            newDataset[dataSetKey] = null\r\n        } else {\r\n            newDataset[dataSetKey] = dataSet[dataSetKey]\r\n        }\r\n    }\r\n\r\n    return newDataset\r\n}\r\n\r\n/**\r\n * Returns the unit of a nutrient. This unit refers to the default unit of the Food Data Central data sheets (resp.\r\n * the Food Compare Catalog)\r\n * @param selectedValue The selected nutrient\r\n * @param transformToDietaryRequirements Optionally, the specification that the daily requirements are used as unit\r\n * @return The unit (g, mg or %).\r\n */\r\nexport const getUnit = (selectedValue: string, transformToDietaryRequirements?: boolean) => {\r\n    if (selectedValue === Constants.DATA_ENERGY) {\r\n        return \"kcal\";\r\n    } else if (selectedValue === Constants.DATA_WATER\r\n        || selectedValue === Constants.DATA_LIPIDS\r\n        || selectedValue === Constants.DATA_CARBS\r\n        || selectedValue === Constants.DATA_CARBS_SUGAR\r\n        || selectedValue === Constants.DATA_PROTEINS\r\n        || selectedValue === Constants.DATA_ASH\r\n        || selectedValue === Constants.DATA_CARBS_DIETARY_FIBERS\r\n        || selectedValue === Constants.DATA_LIPIDS_SATURATED\r\n        || selectedValue === Constants.DATA_LIPIDS_MONO_UNSATURATED\r\n        || selectedValue === Constants.DATA_LIPIDS_POLY_UNSATURATED\r\n        || selectedValue === Constants.DATA_LIPIDS_TRANSFATTY_ACIDS) {\r\n        return \"g\";\r\n    } else if (transformToDietaryRequirements) {\r\n        return \"%\";\r\n    } else {\r\n        return \"mg\";\r\n    }\r\n}","import {JuxtapositionChartProps} from \"../../types/livedata/ChartPropsData\";\r\nimport FoodDataCorpus from \"../../types/nutrientdata/FoodDataCorpus\";\r\nimport {ChartItem, getElementsOfRankingGroup, getValueOfFoodItem, sortChartItems} from \"../RankingService\";\r\nimport {\r\n    COMPARISON_REFERENCE_ALL,\r\n    COMPARISON_REFERENCE_ALL_IN_CATEGORY,\r\n    COMPARISON_REFERENCE_SELECTED_TABS,\r\n    LANGUAGE_DE\r\n} from \"../../config/Constants\";\r\nimport FoodItem from \"../../types/nutrientdata/FoodItem\";\r\nimport SelectedFoodItem from \"../../types/livedata/SelectedFoodItem\";\r\nimport {getUnit} from \"../calculation/NutrientCalculationService\";\r\nimport {JuxtapositionTableEntry} from \"../../types/livedata/JuxtapositionTableEntry\";\r\nimport {autoRound, calculateMedian} from \"../calculation/MathService\";\r\n\r\nexport interface JuxtapostionChartData {\r\n    chartItems: Array<ChartItem>\r\n    nutrientName: string\r\n    unit: string\r\n}\r\n\r\n/**\r\n * Creates the chart data for a set of nutrient data. The set comprises the chart data for exactly one\r\n * group, such as base data, vitamins, lipids etc.\r\n * @param props The juxtaposition chart props containing settings information for chart data creation.\r\n * @param foodDataCorpus An instance of the Food Compare food data corpus.\r\n * @param referenceData The reference data to use.\r\n * @param language The currently set language.\r\n * @return A list of juxtaposition chart data objects that are used to create the different juxtaposition charts\r\n * for each nutrient in the selected group.\r\n */\r\nexport function createChartDataForJuxtapostionChart(props: JuxtapositionChartProps, foodDataCorpus: FoodDataCorpus,\r\n                                                    referenceData: Array<FoodItem>, language: string): Array<JuxtapostionChartData> {\r\n        const chartData: Array<JuxtapostionChartData> = []\r\n        const valuesInGroup = getElementsOfRankingGroup(props.selectedGroup, language)\r\n\r\n        if (!valuesInGroup) {\r\n            throw new Error(\"No group values available\")\r\n        }\r\n\r\n        valuesInGroup.forEach(valueInGroup => {\r\n            let chartItems: Array<ChartItem> = []\r\n            const nutrientName = valueInGroup.label\r\n            const unit = getUnit(valueInGroup.value)\r\n            referenceData.forEach(foodItem => {\r\n                const value = getValueOfFoodItem(foodItem, valueInGroup.value)\r\n                const nameKey = foodDataCorpus.foodNames.find(foodName => foodName.id === foodItem.nameId)\r\n                const name = language === LANGUAGE_DE ? nameKey?.germanName : nameKey?.englishName\r\n                const fooditemCondition = props.selectedFoodItem.foodItem.conditionId\r\n                const condition = foodDataCorpus.conditions.find(condition => condition.id === fooditemCondition)\r\n                const conditionName = condition !== undefined && condition.id !== 100\r\n                    ? language === LANGUAGE_DE\r\n                        ? condition.germanName\r\n                        : condition.englishName\r\n                    : null\r\n                const fullName = conditionName !== null ? `${name} (${conditionName})` : name\r\n                if (value !== null && value !== undefined) {\r\n                    chartItems.push({\r\n                        name: fullName ?? '',\r\n                        value: value,\r\n                        id: foodItem.id\r\n                    })\r\n                }\r\n            })\r\n\r\n            chartItems = sortChartItems(chartItems)\r\n            const atLeastOneValueAboveZero = Math.max(...chartItems.map(item => item.value)) > 0\r\n\r\n            if(atLeastOneValueAboveZero) {\r\n                chartData.push({\r\n                    nutrientName: nutrientName,\r\n                    unit: unit,\r\n                    chartItems: chartItems\r\n                })\r\n            }\r\n        })\r\n\r\n    return chartData\r\n}\r\n\r\n/**\r\n * Creates the table data for a set of nutrient data. The set comprises the chart data for exactly one\r\n * group, such as base data, vitamins, lipids etc.\r\n * @param props The juxtaposition chart props containing settings information for chart data creation.\r\n * @param foodDataCorpus An instance of the Food Compare food data corpus.\r\n * @param referenceData The reference data to use.\r\n * @param language The currently set language.\r\n * @return The data table object ready for the table to display (a list of JuxtapositionTableEntry objects, each\r\n * object representing one row in the table).\r\n */\r\nexport function createJuxtapositionTableData(props: JuxtapositionChartProps, foodDataCorpus: FoodDataCorpus,\r\n                                             referenceData: Array<FoodItem>, language: string): Array<JuxtapositionTableEntry> {\r\n    const tableData: Array<JuxtapositionTableEntry> = []\r\n    const valuesInGroup = getElementsOfRankingGroup(props.selectedGroup, language)\r\n\r\n    if (!valuesInGroup) {\r\n        throw new Error(\"No group values available\")\r\n    }\r\n\r\n    valuesInGroup.forEach(valueInGroup => {\r\n        const value = getValueOfFoodItem(props.selectedFoodItem.foodItem, valueInGroup.value)\r\n        const allValues: Array<number> = []\r\n        referenceData.forEach(foodItem => {\r\n            const value = getValueOfFoodItem(foodItem, valueInGroup.value)\r\n            if(value !== null) {\r\n                allValues.push(value)\r\n            }\r\n        })\r\n\r\n        // Do not show nutrient elements, if the selected food item does not have this value.\r\n        if(allValues.length === 0 || value === null) {\r\n            return\r\n        }\r\n\r\n        const minValue = Math.min(...allValues)\r\n        const maxValue = Math.max(...allValues)\r\n        const averageValue = allValues.reduce((a,b) => a + b, 0) / allValues.length\r\n\r\n        const sorted = allValues.sort((a, b) => b-a)\r\n        const centerValue = sorted.length / 2\r\n        const medianValue = calculateMedian(allValues)\r\n\r\n        const rank = sorted.findIndex(num => num === value) + 1\r\n\r\n        const label = valueInGroup.label\r\n        const unit = getUnit(valueInGroup.value)\r\n\r\n        const tableRow: JuxtapositionTableEntry = {\r\n            label: label,\r\n            value: `${value} ${unit}`,\r\n            rank: `${rank} / ${allValues.length}`,\r\n            min: `${minValue} ${unit}`,\r\n            max: `${maxValue} ${unit}`,\r\n            average: `${autoRound(averageValue)} ${unit}`,\r\n            median: `${medianValue} ${unit}`,\r\n        }\r\n\r\n        tableData.push(tableRow)\r\n    })\r\n\r\n    return tableData\r\n}\r\n\r\n/**\r\n * Returns a set of food items that serve as database for the juxtaposition chart (comparison base).\r\n * @param selectedReference The selected reference value, indicating which data reference should be used.\r\n * @param foodDataCorpus The food data corpus of Food Compare.\r\n * @param selectedFoodItem The selected food item in the data panel.\r\n * @param selectedFoodItemsInPanel All food items currently added to the data panel.\r\n * @return A list of food items that serve as data basis for the juxtaposition charts.\r\n */\r\nexport function getFoodItemsForComparison(selectedReference: number,\r\n                                          foodDataCorpus: FoodDataCorpus,\r\n                                          selectedFoodItem: SelectedFoodItem,\r\n                                          selectedFoodItemsInPanel: Array<SelectedFoodItem>): Array<FoodItem> {\r\n    const allFoodItems = foodDataCorpus.foodItems\r\n\r\n    switch (selectedReference) {\r\n        case COMPARISON_REFERENCE_ALL_IN_CATEGORY:\r\n            const selectedFoodClass = foodDataCorpus.foodClasses.find(\r\n                foodClass => foodClass.id === selectedFoodItem.foodItem.foodClass\r\n            )\r\n            if(selectedFoodClass === undefined) {\r\n                return allFoodItems\r\n            }\r\n            const category = selectedFoodClass.category\r\n            return foodDataCorpus.foodItems.filter(foodItem => {\r\n                const foodClass = foodDataCorpus.foodClasses.find(foodClass => foodClass.id === foodItem.foodClass)\r\n                return foodClass !== undefined ? foodClass.category === category : false\r\n            })\r\n        case COMPARISON_REFERENCE_SELECTED_TABS:\r\n            return selectedFoodItemsInPanel.map(selectedFoodItem => selectedFoodItem.foodItem)\r\n        case COMPARISON_REFERENCE_ALL:\r\n        default:\r\n            return allFoodItems\r\n    }\r\n}\r\n","import {JuxtapositionChartProps} from \"../../../types/livedata/ChartPropsData\";\r\nimport {color_chart_black, color_line_blue, color_line_red} from \"../../../config/ChartConfig\";\r\nimport React, {useContext} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../../../contexts/ApplicationDataContext\";\r\nimport {\r\n    createChartDataForJuxtapostionChart, getFoodItemsForComparison,\r\n    JuxtapostionChartData\r\n} from \"../../../service/chartdata/JuxtapositionDataService\";\r\nimport {LanguageContext} from \"../../../contexts/LangContext\";\r\nimport {Bar} from \"react-chartjs-2\";\r\nimport {\r\n    getBarChartOptionsForJuxtaposition\r\n} from \"../../../service/ChartConfigurationService\";\r\nimport {CHART_SIZE_LARGE, CHART_SIZE_MEDIUM, CHART_SIZE_SMALL} from \"../../../config/Constants\";\r\nimport {shortenName} from \"../../../service/nutrientdata/NameTypeService\";\r\n\r\n\r\nexport function JuxtapositionChart(props: JuxtapositionChartProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const language = useContext(LanguageContext).language\r\n\r\n    if (applicationContext === null) {\r\n        throw new Error(\"Application context is unavailable.\")\r\n    }\r\n\r\n    const calculateChartData = (): Array<JuxtapostionChartData> => {\r\n        const selectedFoodItemsInPanel = applicationContext.applicationData.foodDataPanel.selectedFoodItems\r\n        const foodDataCorpus = applicationContext.foodDataCorpus\r\n        const {selectedReference, selectedFoodItem} = props\r\n        const referenceData = getFoodItemsForComparison(selectedReference, foodDataCorpus, selectedFoodItem,\r\n            selectedFoodItemsInPanel)\r\n\r\n        return createChartDataForJuxtapostionChart(props, foodDataCorpus, referenceData, language)\r\n    }\r\n\r\n    const chartData = calculateChartData()\r\n\r\n    const showLabels = applicationContext.applicationData.foodDataPanel.juxtapositionConfigData.showLabels\r\n\r\n    const getOptions = (title: string, unit: string, nutrientIndex: number) => {\r\n        let options = getBarChartOptionsForJuxtaposition(title, unit)\r\n\r\n        const barIndexOfSelectedFoodItem = chartData[nutrientIndex].chartItems.findIndex(\r\n            chartItem => chartItem.id === props.selectedFoodItem.id\r\n        )\r\n\r\n        const color = showLabels ? color_chart_black : color_line_red\r\n        const maxRotation = showLabels ? 90 : 0\r\n        const minRotation = showLabels ? 90 : 0\r\n\r\n        const numberOfItemsInChart = chartData[nutrientIndex].chartItems.length\r\n        const maxNumberOfTicks = 60\r\n\r\n        const ticks = {\r\n            autoSkip: false,\r\n            color: color,\r\n            minRotation: minRotation,\r\n            maxRotation: maxRotation,\r\n            callback: function (value, index) {\r\n                const label = showLabels ? chartData[nutrientIndex].chartItems[index].name : \"\"\r\n                const marker = showLabels ? \"►\" : \"▲\"\r\n\r\n                if(numberOfItemsInChart <= maxNumberOfTicks) {   // Not too many bars in chart => you can print any label then\r\n                    return index === barIndexOfSelectedFoodItem ? marker : shortenName(label, 18)\r\n                } else { // Too many bars in chart => print only every nth label\r\n                    const skip = Math.ceil(numberOfItemsInChart / maxNumberOfTicks)\r\n                    return (index % skip === 0 || index === barIndexOfSelectedFoodItem)\r\n                        ? index === barIndexOfSelectedFoodItem\r\n                            ? marker\r\n                            : shortenName(label, 18)\r\n                        : \"\"\r\n                }\r\n            }\r\n        }\r\n\r\n        options = {\r\n            ...options, scales: {\r\n                ...options.scales, x: {\r\n                    ...options.scales.x,\r\n                    ticks: ticks\r\n                }\r\n            },\r\n            animation: false\r\n        }\r\n\r\n        return options\r\n    }\r\n\r\n\r\n    const chartHeightCategory = applicationContext.applicationData.foodDataPanel.juxtapositionConfigData.chartSize\r\n    let height\r\n    switch (chartHeightCategory) {\r\n        case CHART_SIZE_SMALL:\r\n            height = 11\r\n            break\r\n        default:\r\n        case CHART_SIZE_MEDIUM:\r\n            height = 19\r\n            break\r\n        case CHART_SIZE_LARGE:\r\n            height = 27\r\n            break\r\n    }\r\n\r\n    if(showLabels) {\r\n        height += 11\r\n    }\r\n\r\n    const renderChartsOfGroup = () => {\r\n        return chartData.map((chartData, nutrientIndex) => {\r\n            const labels: string[] = []\r\n            const data: number[] = []\r\n            const colors: string[] = []\r\n            chartData.chartItems.forEach((chartItem) => {\r\n                const name = chartItem.name\r\n                const color = chartItem.id === props.selectedFoodItem.id ? color_line_red : color_line_blue\r\n                labels.push(name);\r\n                data.push(chartItem.value);\r\n                colors.push(color)\r\n            })\r\n\r\n            const chartDataObj = {\r\n                labels: labels,\r\n                datasets: [{\r\n                    label: \"\",\r\n                    data: data,\r\n                    backgroundColor: colors,\r\n                    borderWidth: 2,\r\n                    maxBarThickness: 50\r\n                }]\r\n            }\r\n\r\n            const options = getOptions(chartData.nutrientName, chartData.unit, nutrientIndex)\r\n\r\n            return (\r\n                <div key={`juxchartdiv-${chartData.nutrientName}`}>\r\n                    <div className=\"smooth-scroll\">\r\n                        <div>\r\n                            <div style={{height: `${height}vh`}}>\r\n                                <Bar key={`juxchart-${chartData.nutrientName}`}\r\n                                     data={chartDataObj}\r\n                                     options={options}\r\n                                />\r\n                            </div>\r\n                            <hr/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>{renderChartsOfGroup()}</div>\r\n        </div>\r\n    )\r\n\r\n}","import {JuxtapositionChartProps} from \"../../../types/livedata/ChartPropsData\";\r\nimport {applicationStrings} from \"../../../static/labels\";\r\nimport {isMobileDevice} from \"../../../service/WindowDimension\";\r\nimport {BootstrapTable, TableHeaderColumn} from 'react-bootstrap-table';\r\nimport React, {useContext, useEffect, useState} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../../../contexts/ApplicationDataContext\";\r\nimport {LanguageContext} from \"../../../contexts/LangContext\";\r\nimport {JuxtapositionTableEntry} from \"../../../types/livedata/JuxtapositionTableEntry\";\r\nimport {\r\n    createJuxtapositionTableData,\r\n    getFoodItemsForComparison\r\n} from \"../../../service/chartdata/JuxtapositionDataService\";\r\n\r\nexport function JuxtapositionTable(props: JuxtapositionChartProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const language = useContext(LanguageContext).language\r\n\r\n    if (applicationContext === null) {\r\n        throw new Error(\"Application context is unavailable.\")\r\n    }\r\n\r\n    const [tableData, setTableData] = useState<Array<JuxtapositionTableEntry>>([])\r\n\r\n    useEffect(() => {\r\n        updateTable()\r\n    }, [applicationContext.applicationData.foodDataPanel.juxtapositionConfigData, props.selectedFoodItem])\r\n\r\n    const updateTable = () => {\r\n        const selectedFoodItemsInPanel = applicationContext.applicationData.foodDataPanel.selectedFoodItems\r\n        const foodDataCorpus = applicationContext.foodDataCorpus\r\n        const {selectedReference, selectedFoodItem} = props\r\n        const referenceData = getFoodItemsForComparison(selectedReference, foodDataCorpus, selectedFoodItem,\r\n            selectedFoodItemsInPanel)\r\n\r\n        const newTableData = createJuxtapositionTableData(props, foodDataCorpus, referenceData, language)\r\n        setTableData(newTableData)\r\n    }\r\n\r\n    const dataExists = tableData.length > 0\r\n    const tableClass = isMobileDevice() ? \"table-style-m\" : \"table-style\"\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {dataExists &&\r\n                <BootstrapTable trClassName={tableClass} data={tableData} striped hover>\r\n                    <TableHeaderColumn isKey dataField='label' width={\"220px\"}>Element</TableHeaderColumn>\r\n                    <TableHeaderColumn dataField='value'>{applicationStrings.label_juxtaposition_table_value[language]}\r\n                    </TableHeaderColumn>\r\n                    <TableHeaderColumn dataField='rank'>\r\n                        {applicationStrings.label_juxtaposition_table_rank[language]}\r\n                    </TableHeaderColumn>\r\n                    <TableHeaderColumn dataField='min'>\r\n                        {applicationStrings.label_juxtaposition_table_min[language]}\r\n                    </TableHeaderColumn>\r\n                    <TableHeaderColumn dataField='max'>\r\n                        {applicationStrings.label_juxtaposition_table_max[language]}\r\n                    </TableHeaderColumn>\r\n                    <TableHeaderColumn dataField='average'>\r\n                        {applicationStrings.label_juxtaposition_table_avg[language]}\r\n                    </TableHeaderColumn>\r\n                    <TableHeaderColumn dataField='median'>\r\n                        {applicationStrings.label_juxtaposition_table_median[language]}\r\n                    </TableHeaderColumn>\r\n                </BootstrapTable>\r\n                }\r\n                {!dataExists &&\r\n                <div className=\"text-center\">{applicationStrings.label_noData[language]}</div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useContext, useState} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../../../contexts/ApplicationDataContext\";\r\nimport {LanguageContext} from \"../../../contexts/LangContext\";\r\nimport {Form, FormGroup, Modal} from \"react-bootstrap\";\r\nimport {applicationStrings} from \"../../../static/labels\";\r\nimport {\r\n    CHART_SIZE_LARGE,\r\n    CHART_SIZE_MEDIUM,\r\n    CHART_SIZE_SMALL,\r\n} from \"../../../config/Constants\";\r\nimport {isMobileDevice} from \"../../../service/WindowDimension\";\r\nimport Select from 'react-select';\r\nimport ReactSelectOption from \"../../../types/ReactSelectOption\";\r\n\r\nexport interface JuxtapositionSettingsProps {\r\n    onHide: () => void,\r\n}\r\n\r\nexport function JustapositionSettings(props: JuxtapositionSettingsProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const language = useContext(LanguageContext).language\r\n\r\n    if(!applicationContext) {\r\n        throw Error(\"Application context is unavailable.\")\r\n    }\r\n\r\n    const currentSettings = applicationContext.applicationData.foodDataPanel.juxtapositionConfigData\r\n    const [chartSize, setChartSize] = useState<number>(currentSettings.chartSize)\r\n    const [showLabels, setShowLabels] = useState<boolean>(currentSettings.showLabels)\r\n\r\n    const saveData = () => {\r\n        const newJuxtapositionConfigData = {\r\n            ...applicationContext.applicationData.foodDataPanel.juxtapositionConfigData,\r\n            chartSize: chartSize,\r\n            showLabels: showLabels\r\n        }\r\n\r\n        applicationContext.setFoodDataPanelData.updateJuxtapositionConfig(newJuxtapositionConfigData)\r\n        props.onHide()\r\n    }\r\n\r\n    const renderMenu = () => {\r\n        const optionsChartSize: Array<ReactSelectOption> = [\r\n            {label: applicationStrings.label_juxtaposition_settings_chartsize_s[language], value: CHART_SIZE_SMALL},\r\n            {label: applicationStrings.label_juxtaposition_settings_chartsize_m[language], value: CHART_SIZE_MEDIUM},\r\n            {label: applicationStrings.label_juxtaposition_settings_chartsize_l[language], value: CHART_SIZE_LARGE},\r\n        ]\r\n\r\n        const chartSizeOption = optionsChartSize[chartSize]\r\n\r\n        const classRow = isMobileDevice() ? \"form-row-m\" : \"form-row\"\r\n\r\n        return <div>\r\n            <form>\r\n                <FormGroup controlId=\"formBasicText\">\r\n                    <div className=\"row\">\r\n                        <div className={classRow}>\r\n                            <Form.Label>\r\n                                {applicationStrings.label_juxtaposition_settings_chartsize[language]}:\r\n                            </Form.Label>\r\n                            <Select options={optionsChartSize}\r\n                                    value={chartSizeOption}\r\n                                    isSearchable={false}\r\n                                    onChange={(option) => setChartSize(option.value)}\r\n                            />\r\n                        </div>\r\n                        <div className={classRow}>\r\n                            <Form.Check inline className=\"form-radiobutton\"\r\n                                        checked={showLabels}\r\n                                        label={applicationStrings.label_juxtaposition_settings_showLabels[language]}\r\n                                        onChange={() => setShowLabels(!showLabels)}>\r\n                            </Form.Check>\r\n                        </div>\r\n                    </div>\r\n                </FormGroup>\r\n            </form>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <Modal show={true}>\r\n            <Modal.Header>\r\n                <h5 className=\"modal-title\"><b>{applicationStrings.modal_settings_title[language]}</b></h5>\r\n                <button type=\"button\"\r\n                        className=\"btn-close\"\r\n                        data-dismiss=\"modal\"\r\n                        aria-label=\"Close\"\r\n                        onClick={() => saveData()}>\r\n                </button>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div style={{padding: \"20px\"}}>\r\n                    {renderMenu()}\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <button type=\"button\"\r\n                        className=\"btn btn-primary\"\r\n                        onClick={() => saveData()}>\r\n                    {applicationStrings.button_close[language]}\r\n                </button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n\r\n}","import {ChartProps} from \"../../../types/livedata/ChartPropsData\";\r\nimport React, {useContext, useEffect, useState} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../../../contexts/ApplicationDataContext\";\r\nimport {LanguageContext} from \"../../../contexts/LangContext\";\r\nimport {getNutrientGroups} from \"../../../service/RankingService\";\r\nimport {applicationStrings} from \"../../../static/labels\";\r\nimport {customSelectStyles} from \"../../../config/UI_Config\";\r\nimport Select from 'react-select';\r\nimport {\r\n    COMPARISON_REFERENCE_ALL,\r\n    COMPARISON_REFERENCE_ALL_IN_CATEGORY, COMPARISON_REFERENCE_SELECTED_TABS, DISPLAYMODE_CHART\r\n} from \"../../../config/Constants\";\r\nimport {JuxtapositionChart} from \"./JuxtapositionChart\";\r\nimport {JuxtapositionTable} from \"./JuxtapositionTable\";\r\nimport {JustapositionSettings} from \"./JustapositionSettings\";\r\n\r\nexport default function JuxtapostionContainer(props: ChartProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const language = useContext(LanguageContext).language\r\n\r\n    if (!applicationContext) {\r\n        throw new Error(\"ApplicationContext unavailable.\")\r\n    }\r\n\r\n    const [showSettingsModal, setShowSettingsModal] = useState<boolean>(false)\r\n\r\n    const referenceList = [\r\n        {value: COMPARISON_REFERENCE_ALL, label: applicationStrings.label_reference_all[language]},\r\n        {value: COMPARISON_REFERENCE_ALL_IN_CATEGORY, label: applicationStrings.label_reference_category[language]}\r\n    ]\r\n\r\n    const numberOfTabs = applicationContext.applicationData.foodDataPanel.selectedFoodItems.length\r\n    if(numberOfTabs > 1) {\r\n        referenceList.push({value: COMPARISON_REFERENCE_SELECTED_TABS, label: applicationStrings.label_reference_panel[language]})\r\n    }\r\n\r\n    const updateQueryParam = (): void => {\r\n        const selectedGroup = applicationContext.applicationData.foodDataPanel.juxtapositionConfigData?.selectedGroup?.value\r\n        if (selectedGroup && window.history.replaceState) {  // Update Query string without triggering a re-render caused by the react router\r\n            const url = window.location.protocol + \"//\" + window.location.host + window.location.pathname + window.location.search\r\n            let newUrl = url\r\n            if(url.includes(\"group=\")) {  // Replace the group part at the end of the search string\r\n                newUrl = url.substring(0, url.indexOf(\"group=\")-1)\r\n            }\r\n            newUrl = `${newUrl}&group=${selectedGroup}`\r\n            window.history.replaceState({path: newUrl},'', newUrl);\r\n        }\r\n    }\r\n\r\n    const handleGroupChange = (selectedOption: any) => {\r\n        const newJuxtapositionConfigData = {\r\n            ...applicationContext.applicationData.foodDataPanel.juxtapositionConfigData,\r\n            selectedGroup: selectedOption\r\n        }\r\n        applicationContext.setFoodDataPanelData.updateJuxtapositionConfig(newJuxtapositionConfigData)\r\n    }\r\n\r\n    const handleComparisonReferenceChange = (selectedOption) => {\r\n        const newJuxtapositionConfigData = {\r\n            ...applicationContext.applicationData.foodDataPanel.juxtapositionConfigData,\r\n            selectedComparisonReference: selectedOption\r\n        }\r\n        applicationContext.setFoodDataPanelData.updateJuxtapositionConfig(newJuxtapositionConfigData)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const numberOfFoodItemsInPanel = applicationContext.applicationData.foodDataPanel.selectedFoodItems.length\r\n        const {juxtapositionConfigData} =  applicationContext.applicationData.foodDataPanel\r\n        const compareToFoodItemsInPanel =\r\n            juxtapositionConfigData.selectedComparisonReference?.value === COMPARISON_REFERENCE_SELECTED_TABS\r\n        if(numberOfFoodItemsInPanel === 1 && compareToFoodItemsInPanel) {\r\n            const newJuxtapositionConfigData = {\r\n                ...applicationContext.applicationData.foodDataPanel.juxtapositionConfigData,\r\n                selectedComparisonReference: referenceList[0]\r\n            }\r\n            applicationContext.setFoodDataPanelData.updateJuxtapositionConfig(newJuxtapositionConfigData)\r\n        }\r\n        updateQueryParam()\r\n    }, [applicationContext.applicationData.foodDataPanel.selectedFoodItems.length,\r\n        applicationContext.applicationData.foodDataPanel.juxtapositionConfigData])\r\n\r\n    useEffect(() => {\r\n        const params = new URLSearchParams(window.location.search);\r\n        const groupParam = params.get('group');\r\n        if(groupParam !== null) {\r\n            const group = rankingList.find(entry => entry.value === Number(groupParam))\r\n            if(group) {\r\n                handleGroupChange(group)\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    const getRankingGroupsList = () => {\r\n        return getNutrientGroups(language);\r\n    }\r\n\r\n    const {\r\n        selectedGroup,\r\n        selectedComparisonReference\r\n    } = applicationContext.applicationData.foodDataPanel.juxtapositionConfigData\r\n\r\n    const rankingList = getRankingGroupsList()\r\n    const group = selectedGroup ?? rankingList[0]\r\n\r\n    const reference = selectedComparisonReference ?? referenceList[1]\r\n\r\n    if(props.selectedFoodItem.aggregated === true) {\r\n        return <div>\r\n            <p style={{maxHeight: \"437px\", minHeight: \"437px\", textAlign: \"center\"}}>{applicationStrings.label_juxtaposition_unavailable[language]}</p>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className={\"juxtaposition-data\"}>\r\n            {showSettingsModal &&\r\n                <JustapositionSettings onHide={() => setShowSettingsModal(false)}/>\r\n            }\r\n            <div className={\"container row align-items-end\"}>\r\n                <div className={\"col-4\"}>\r\n                    <span className={\"form-label\"}>{applicationStrings.label_reference[language]}:</span>\r\n                    <Select className=\"form-control-sm\"\r\n                            options={referenceList}\r\n                            value={reference}\r\n                            defaultValue={referenceList[0]}\r\n                            styles={customSelectStyles}\r\n                            onChange={handleComparisonReferenceChange}\r\n                    />\r\n                </div>\r\n                <div className={\"col-4\"}>\r\n                    <span className={\"form-label\"}>{applicationStrings.label_group[language]}:</span>\r\n                    <Select className=\"form-control-sm\"\r\n                            options={rankingList}\r\n                            value={group}\r\n                            defaultValue={rankingList[0]}\r\n                            styles={customSelectStyles}\r\n                            onChange={handleGroupChange}\r\n                    />\r\n                </div>\r\n                <div className={\"col-2\"}>\r\n                    <button className={\"btn btn-link\"} onClick={() => setShowSettingsModal(true)}>\r\n                        {applicationStrings.label_juxtaposition_settings_btn[language]}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <hr/>\r\n            <div style={{paddingTop: \"1vh\", paddingBottom: \"1vh\", paddingLeft: \"1vw\", paddingRight: \"0.75vw\"}}>\r\n                {props.displayMode === DISPLAYMODE_CHART ?\r\n                    <JuxtapositionChart selectedGroup={group.value} selectedReference={reference.value} selectedFoodItem={props.selectedFoodItem}/>\r\n                    :\r\n                    <JuxtapositionTable selectedGroup={group.value} selectedReference={reference.value} selectedFoodItem={props.selectedFoodItem}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import BaseDataChart from \"./charts/BaseDataChart\";\r\nimport EnergyDataChart from \"./charts/EnergyDataChart\";\r\nimport {\r\n    CHART_MINERALS,\r\n    CHART_VITAMINS,\r\n    TAB_BASE_DATA,\r\n    TAB_CARBS_DATA,\r\n    TAB_ENERGY_DATA, TAB_JUXTAPOSITION,\r\n    TAB_LIPIDS_DATA,\r\n    TAB_MINERAL_DATA,\r\n    TAB_PROTEINS_DATA,\r\n    TAB_VITAMIN_DATA\r\n} from \"../../config/Constants\";\r\nimport MineralVitaminChart from \"./charts/MineralVitaminChart\";\r\nimport LipidsDataChart from \"./charts/LipidsDataChart\";\r\nimport ProteinDataChart from \"./charts/ProteinDataChart\";\r\nimport CarbsDataChart from \"./charts/CarbsDataChart\";\r\nimport {ChartProps} from \"../../types/livedata/ChartPropsData\";\r\nimport React, {useContext} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport JuxtapostionContainer from \"./juxtaposition/JuxtapositionContainer\";\r\n\r\nexport function ChartPanel(props: ChartProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    if (!applicationContext) {\r\n        return <div/>\r\n    }\r\n\r\n    const selectedDataTab = applicationContext.applicationData.foodDataPanel.selectedDataPage\r\n\r\n    let chart = <div>Nothing to show</div>;\r\n    if (selectedDataTab === TAB_BASE_DATA) {\r\n        chart = <BaseDataChart selectedFoodItem={props.selectedFoodItem}/>\r\n    } else if (selectedDataTab === TAB_ENERGY_DATA) {\r\n        chart = <EnergyDataChart selectedFoodItem={props.selectedFoodItem}/>\r\n    } else if (selectedDataTab === TAB_VITAMIN_DATA) {\r\n        chart = <MineralVitaminChart selectedFoodItem={props.selectedFoodItem} selectedSubChart={CHART_VITAMINS}/>\r\n    } else if (selectedDataTab === TAB_MINERAL_DATA) {\r\n        chart = <MineralVitaminChart selectedFoodItem={props.selectedFoodItem} selectedSubChart={CHART_MINERALS}/>\r\n    } else if (selectedDataTab === TAB_LIPIDS_DATA) {\r\n        chart = <LipidsDataChart selectedFoodItem={props.selectedFoodItem}/>\r\n    } else if (selectedDataTab === TAB_CARBS_DATA) {\r\n        chart = <CarbsDataChart selectedFoodItem={props.selectedFoodItem}/>\r\n    } else if (selectedDataTab === TAB_PROTEINS_DATA) {\r\n        chart = <ProteinDataChart selectedFoodItem={props.selectedFoodItem}/>\r\n    }  else if (selectedDataTab === TAB_JUXTAPOSITION) {\r\n        chart = <JuxtapostionContainer selectedFoodItem={props.selectedFoodItem} displayMode={props.displayMode}/>\r\n    }\r\n\r\n    return (\r\n        <div style={{paddingTop: \"2vh\"}}>\r\n            {chart}\r\n        </div>\r\n    )\r\n}","import {FoodTableDataObject} from \"../../types/livedata/SelectedFoodItemData\";\r\nimport {BootstrapTable, TableHeaderColumn} from 'react-bootstrap-table';\r\nimport React, {useContext} from \"react\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport 'react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport {DISPLAYMODE_CHART, TAB_MINERAL_DATA, TAB_PROTEINS_DATA, TAB_VITAMIN_DATA} from \"../../config/Constants\";\r\nimport {isMobileDevice} from \"../../service/WindowDimension\";\r\n\r\ninterface FoodDataTableProps {\r\n    tableData: Array<FoodTableDataObject>\r\n    portionSize: number\r\n    dataPage: string\r\n}\r\n\r\nexport function FoodDataTable(props: FoodDataTableProps) {\r\n    const dataExists = props.tableData && props.tableData.length > 0;\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const language = useContext(LanguageContext)\r\n\r\n    const changeToChartMode = () => {\r\n        applicationContext?.setFoodDataPanelData.setSelectedDisplayMode(DISPLAYMODE_CHART)\r\n    }\r\n\r\n    const formatDataCell = (cell, row) => {\r\n        if(!cell) {\r\n            return cell\r\n        }\r\n\r\n        if (!cell.includes(\"&&\")) {\r\n            return cell\r\n        }\r\n\r\n        const firstLineStype = {paddingBottom: \"6px\", display: 'block'}\r\n        const indentStyle = {paddingLeft: \"8px\"}\r\n\r\n        return <div>{cell.split(\"&&\").map((element, index) => (\r\n            <div key={`table-inner-cell-${row.label}-${index}`}>\r\n                {index > 0 ?\r\n                    <span style={indentStyle}>\r\n                    {element}\r\n                    </span>\r\n                    :\r\n                    <span style={firstLineStype}>\r\n                    {element}\r\n                </span>\r\n                }\r\n            </div>)\r\n        )}</div>\r\n    }\r\n\r\n    const labelPortion = `${applicationStrings.label_per_portion[language.language]} (${props.portionSize} g)`\r\n    const tableClass = isMobileDevice() ? \"table-style-m\" : \"table-style\"\r\n\r\n    const shouldShowDietaryRequirements = props.dataPage === TAB_VITAMIN_DATA || props.dataPage === TAB_MINERAL_DATA\r\n        || props.dataPage === TAB_PROTEINS_DATA\r\n\r\n    return (\r\n        <div className={\"table-data\"}>\r\n            <div>\r\n                {dataExists &&\r\n                <BootstrapTable trClassName={tableClass} data={props.tableData} striped hover>\r\n                    <TableHeaderColumn isKey dataField='label' dataFormat={formatDataCell}>Element</TableHeaderColumn>\r\n                    <TableHeaderColumn dataField='value_100g'\r\n                                       width={\"9vw\"}\r\n                                       dataFormat={formatDataCell}>{applicationStrings.label_per_100g[language.language]}\r\n                    </TableHeaderColumn>\r\n                    <TableHeaderColumn dataField='value_portion'\r\n                                       width={\"10vw\"}\r\n                                       dataFormat={formatDataCell}>{labelPortion}\r\n                    </TableHeaderColumn>\r\n                    {shouldShowDietaryRequirements &&\r\n                    <TableHeaderColumn dataField='dailyRequirement'\r\n                                       width={\"12vw\"}\r\n                                       dataFormat={formatDataCell}>{applicationStrings.label_requirement[language.language]}\r\n                    </TableHeaderColumn>\r\n                    }\r\n                </BootstrapTable>\r\n                }\r\n                {!dataExists &&\r\n                <div className=\"text-center\">{applicationStrings.label_noData[language.language]}</div>\r\n                }\r\n            </div>\r\n            <div style={{paddingTop: \"25px\"}}>\r\n                <button className={\"btn btn-link\"} onClick={changeToChartMode}>\r\n                    {applicationStrings.label_chart_view[language.language]}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import FoodItem, {PortionData} from \"../../types/nutrientdata/FoodItem\";\r\nimport NameType from \"../../types/nutrientdata/NameType\";\r\nimport {ReactSelectFoodItemOption} from \"../../types/ReactSelectOption\";\r\nimport getName, {} from \"../LanguageService\";\r\nimport FoodClass from \"../../types/nutrientdata/FoodClass\";\r\nimport SelectedFoodItem from \"../../types/livedata/SelectedFoodItem\";\r\n\r\n\r\n/**\r\n * Auxiliary method to get the food item from a given food list or null.\r\n * @param foodItemId Food Item Id\r\n * @param foodItems The list of food items\r\n */\r\nexport function getFoodItem(foodItemId: number, foodItems: Array<FoodItem>): FoodItem | null {\r\n    const index = foodItems.findIndex(foodItem => foodItem.id === foodItemId)\r\n    if(index >= 0) {\r\n        return foodItems[index]\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\n/**\r\n * Makes the select list (component) for food items.\r\n * @param foodItems The list of all food items.\r\n * @param foodClass The selected food class.\r\n * @param foodNames The list of all food names.\r\n * @param conditions The list of all conditions.\r\n * @param language The given language.\r\n */\r\nexport function getFoodItemsSelectList(foodItems: Array<FoodItem>, foodClass: number, foodNames: Array<NameType>,\r\n                                       conditions: Array<NameType>, language: string): Array<ReactSelectFoodItemOption> {\r\n    const filteredFoodItems = getFoodItemsOfFoodClass(foodItems, foodClass)\r\n    const reactSelectOptions: Array<ReactSelectFoodItemOption> = []\r\n\r\n    if(filteredFoodItems && filteredFoodItems.length > 0) {\r\n        filteredFoodItems.forEach(foodItem => {\r\n            let foodName = getFoodItemName(foodItem, foodNames, language)\r\n            const condition = conditions.find(condition => condition.id === foodItem.conditionId)\r\n            const conditionName = condition ? getName(condition, language) : null\r\n\r\n            if(conditionName && foodItem.conditionId !== 100) {   // Exclude the \"general\" condition\r\n                foodName = `${foodName} (${conditionName})`\r\n            }\r\n\r\n            reactSelectOptions.push({\r\n                value: foodItem,\r\n                label: foodName ?? ''\r\n            })\r\n        })\r\n    }\r\n\r\n    // If more than 5 items are in the list, we sort them lexicographically (otherwise by default).\r\n    if(reactSelectOptions.length > 5) {\r\n        reactSelectOptions.sort((obj1, obj2) => obj1.label.localeCompare(obj2.label))\r\n    }\r\n\r\n    return reactSelectOptions\r\n}\r\n\r\n/**\r\n * Central method to retrieve the food name of an food item in a given language.\r\n * @param foodItem The food item object.\r\n * @param foodNames The list of food items.\r\n * @param language The given language.\r\n * @param verbose Specifies whether the verbose name should be returned or just the simple one.\r\n */\r\nexport function getFoodItemName(foodItem: FoodItem, foodNames: Array<NameType>, language: string, verbose = false): string | null {\r\n    const nameId = foodItem.nameId\r\n    if(!nameId || nameId > foodNames.length) {\r\n        return null\r\n    }\r\n    const nameType = foodNames[nameId-1]\r\n    return getName(nameType, language, verbose)\r\n}\r\n\r\n\r\n/**\r\n * Returns all food items that belong to a food class.\r\n * @param foodItems The list of all food items.\r\n * @param foodClassId The ID of the selected food class.\r\n */\r\nexport function getFoodItemsOfFoodClass(foodItems: Array<FoodItem>, foodClassId: number): Array<FoodItem> {\r\n    return foodItems.filter(foodItem => {\r\n        if(foodItem.foodClass === foodClassId) {\r\n            return foodItem\r\n        } else {\r\n            return null\r\n        }\r\n    })\r\n}\r\n\r\n\r\n/**\r\n * Creates a selected food item object (an object selected from the food selector modal and displayed on the food data panel) out of\r\n * a food item, a food class and a portion data object.\r\n * @param foodItem\r\n * @param foodClass\r\n * @param portion\r\n */\r\nexport function makeSelectedFoodItemObject(\r\n    foodItem: FoodItem | undefined,\r\n    foodClass: FoodClass | undefined,\r\n    portion: PortionData | undefined,\r\n    portionAmount: number,\r\n    supplementData: boolean,\r\n    combineData: boolean,\r\n    selectedSource?: number\r\n): SelectedFoodItem | null  {\r\n    if (!foodItem || !foodClass || !portion) {\r\n        return null\r\n    }\r\n\r\n    if (portion.portionType === 0) {\r\n        portion.amount = portionAmount\r\n    }\r\n\r\n    return {\r\n        foodItem: foodItem,\r\n        foodClass: foodClass,\r\n        portion: {...portion},\r\n        selectedSource: selectedSource ? selectedSource : foodItem.nutrientDataList[0].source.id,\r\n        supplementData: supplementData,\r\n        combineData: combineData\r\n    }\r\n}","import NutrientStatistics, {FoodItemStatistics} from \"../../types/livedata/NutrientStatistics\";\r\nimport FoodItem from \"../../types/nutrientdata/FoodItem\";\r\nimport {getElementsOfRankingGroup, getNutrientGroups, getValueOfFoodItem} from \"../RankingService\";\r\nimport {\r\n    NUTRIENT_BASE_DATA_INDEX,\r\n    NUTRIENT_CARBS_INDEX,\r\n    NUTRIENT_LIPIDS_INDEX,\r\n    NUTRIENT_MINERAL_INDEX,\r\n    NUTRIENT_PROTEIN_INDEX,\r\n    NUTRIENT_VITAMIN_INDEX,\r\n} from \"../../config/Constants\";\r\n\r\nexport function getStatisticalNutrientInformation(nutrient: string, foodItems: Array<FoodItem>, preferredSource):\r\n    NutrientStatistics {\r\n    let min: number | null = null\r\n    let max: number | null = null\r\n    let sum: number | null = null\r\n    let allValues: Array<number> = []\r\n\r\n    foodItems.forEach(foodItem => {\r\n        const value = getValueOfFoodItem(foodItem, nutrient, preferredSource, true)\r\n        if(value !== null) {\r\n            allValues.push(value)\r\n            if(min === null || value < min) {\r\n                min = value\r\n            }\r\n            if(max === null || value > max) {\r\n                max =  value\r\n            }\r\n            if(sum === null) {\r\n                sum = value\r\n            } else {\r\n                sum += value\r\n            }\r\n        }\r\n    })\r\n\r\n    const averageAmount = sum ? sum / allValues.length : null\r\n    const sortedValues = allValues.sort((a, b) => a-b)\r\n    const centerValue = sortedValues.length / 2\r\n    const median = sortedValues[Math.floor(centerValue)]\r\n\r\n    return {\r\n        minimumAmount: min,\r\n        maximumAmount: max,\r\n        averageAmount: averageAmount,\r\n        median: median,\r\n        allValuesSorted: sortedValues\r\n    }\r\n\r\n}\r\n\r\nexport function countNumberOfAvailableValues(foodItem: FoodItem, sourceId: number): FoodItemStatistics {\r\n    const lang = \"en\" // Language does not matter when we count nutrient values\r\n    const groups = getNutrientGroups(lang)\r\n\r\n    let baseValues = 0\r\n    let carbValues = 0\r\n    let lipidValues = 0\r\n    let proteinValues = 0\r\n    let vitaminValues = 0\r\n    let mineralValues = 0\r\n\r\n    groups.forEach(group => {\r\n        const valuesInGroup = getElementsOfRankingGroup(group.value, lang)\r\n        if(!valuesInGroup) {\r\n            return\r\n        }\r\n\r\n        const nutrientValuesInFoodItem = valuesInGroup.filter((nutrient ) => {\r\n            const value = getValueOfFoodItem(foodItem, nutrient.value, sourceId, false)\r\n            return value !== null\r\n        })\r\n\r\n        switch (group.value) {\r\n            case NUTRIENT_BASE_DATA_INDEX:\r\n                baseValues = nutrientValuesInFoodItem ? nutrientValuesInFoodItem.length : 0\r\n                break;\r\n            case NUTRIENT_LIPIDS_INDEX:\r\n                lipidValues = nutrientValuesInFoodItem ? nutrientValuesInFoodItem.length : 0\r\n                break;\r\n            case NUTRIENT_CARBS_INDEX:\r\n                carbValues = nutrientValuesInFoodItem ? nutrientValuesInFoodItem.length : 0\r\n                break;\r\n            case NUTRIENT_PROTEIN_INDEX:\r\n                proteinValues = nutrientValuesInFoodItem ? nutrientValuesInFoodItem.length : 0\r\n                break;\r\n            case NUTRIENT_VITAMIN_INDEX:\r\n                vitaminValues = nutrientValuesInFoodItem ? nutrientValuesInFoodItem.length : 0\r\n                break;\r\n            case NUTRIENT_MINERAL_INDEX:\r\n                mineralValues = nutrientValuesInFoodItem ? nutrientValuesInFoodItem.length : 0\r\n                break;\r\n        }\r\n    })\r\n\r\n    return {\r\n        baseDataValues: baseValues,\r\n        carbDataValues: carbValues,\r\n        lipidDataValues: lipidValues,\r\n        proteinDataValues: proteinValues,\r\n        vitaminDataValues: vitaminValues,\r\n        mineralDataValues: mineralValues,\r\n        getTotalNumberOfValues: () => {return baseValues + carbValues + lipidValues + proteinValues + vitaminValues + mineralValues}\r\n    }\r\n\r\n}","import React, {useContext} from \"react\";\r\nimport {LanguageContext} from \"../../../contexts/LangContext\";\r\nimport {BootstrapTable, TableHeaderColumn} from 'react-bootstrap-table';\r\nimport SelectedFoodItem from \"../../../types/livedata/SelectedFoodItem\";\r\nimport {ApplicationDataContextStore} from \"../../../contexts/ApplicationDataContext\";\r\nimport {getNameFromFoodNameList} from \"../../../service/nutrientdata/NameTypeService\";\r\nimport {applicationStrings} from \"../../../static/labels\";\r\nimport getName from \"../../../service/LanguageService\";\r\nimport {isMobileDevice} from \"../../../service/WindowDimension\";\r\nimport {canSupplementData, getNutrientData, getSourceName} from \"../../../service/nutrientdata/NutrientDataRetriever\";\r\nimport {Button} from \"react-bootstrap\";\r\nimport {getFoodItemName} from \"../../../service/nutrientdata/FoodItemsService\";\r\nimport {NutrientData} from \"../../../types/nutrientdata/FoodItem\";\r\nimport {round} from \"../../../service/calculation/MathService\";\r\nimport {countNumberOfAvailableValues} from \"../../../service/nutrientdata/NutrientStatisticsService\";\r\n\r\ninterface InfoDataProps {\r\n    selectedFoodItem: SelectedFoodItem,\r\n    directCompare?: boolean\r\n}\r\n\r\ninterface RowElement {\r\n    key: string,\r\n    value: string\r\n}\r\n\r\nexport function InfoData(props: InfoDataProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const languageContext = useContext(LanguageContext)\r\n    const lang = languageContext.language\r\n\r\n    const createRow = (key: string, value: any): RowElement => {\r\n        return {\r\n            key: key,\r\n            value: value\r\n        }\r\n    }\r\n\r\n    const getGeneralTableData = (): Array<RowElement> => {\r\n        if (!applicationContext) {\r\n            return []\r\n        }\r\n\r\n        const foodNameId = props.selectedFoodItem.foodItem.nameId\r\n        const foodName = foodNameId ? getNameFromFoodNameList(applicationContext.foodDataCorpus.foodNames, foodNameId, lang, true) : ''\r\n\r\n        const foodClass = props.selectedFoodItem.foodClass;\r\n        const foodClassNameId = foodClass ? foodClass.nameKey : null\r\n\r\n        const sourceName = getSourceName(props.selectedFoodItem.selectedSource)\r\n        const sourceItemId = getNutrientData(props.selectedFoodItem).sourceItemId\r\n\r\n        const source = `United States Department of Agriculture (USDA)`;\r\n        const sourceLine2 = `${sourceName}, ID = ${sourceItemId}`;\r\n        const foodClassName = foodClassNameId ? getNameFromFoodNameList(applicationContext.foodDataCorpus.foodNames, foodClassNameId, lang) : null;\r\n\r\n        const categoryId = foodClass ? foodClass.category : null\r\n        const category = categoryId ? applicationContext.foodDataCorpus.categories.find(category => category.id === categoryId) : null\r\n        const categoryName = category ? getName(category, lang) : null;\r\n\r\n        const conditionId = props.selectedFoodItem.foodItem.conditionId\r\n        const condition = applicationContext.foodDataCorpus.conditions.find(condition => condition.id === conditionId)\r\n        const conditionName = condition ? getName(condition, lang) : null;\r\n\r\n        const tableDataGeneral: Array<RowElement> = [];\r\n\r\n        const canSupplement = canSupplementData(props.selectedFoodItem.foodItem.nutrientDataList)\r\n        let calculationLabel = applicationStrings.label_info_calculation_none;\r\n\r\n        if(props.selectedFoodItem.supplementData && props.selectedFoodItem.combineData) {\r\n            calculationLabel = applicationStrings.label_info_calculation_supplemented_combined\r\n        } else {\r\n            if(props.selectedFoodItem.supplementData) {\r\n                if(canSupplement) {\r\n                    calculationLabel = applicationStrings.label_info_calculation_supplemented\r\n                } else {\r\n                    calculationLabel = applicationStrings.label_info_calculation_supplement_impossible\r\n                }\r\n            }\r\n            if(props.selectedFoodItem.combineData) {\r\n                calculationLabel = applicationStrings.label_info_calculation_combined\r\n            }\r\n        }\r\n\r\n        tableDataGeneral.push(\r\n            createRow(`${applicationStrings.label_info_foodName[lang]}:`, foodName)\r\n        );\r\n        tableDataGeneral.push(\r\n            createRow(`${applicationStrings.label_info_preparation[lang]}:`, conditionName)\r\n        );\r\n        tableDataGeneral.push(\r\n            createRow(`${applicationStrings.label_info_foodId[lang]}:`, props.selectedFoodItem.foodItem.id)\r\n        );\r\n        tableDataGeneral.push(\r\n            createRow(`${applicationStrings.label_info_foodClass[lang]}:`, foodClassName)\r\n        );\r\n        tableDataGeneral.push(\r\n            createRow(`${applicationStrings.label_info_category[lang]}:`, categoryName)\r\n        );\r\n        tableDataGeneral.push(\r\n            createRow(`${applicationStrings.label_info_source[lang]}:`, source)\r\n        );\r\n        tableDataGeneral.push(\r\n            createRow(\"\", sourceLine2)\r\n        );\r\n        tableDataGeneral.push(\r\n            createRow(`${applicationStrings.label_info_calculation[lang]}:`, calculationLabel[lang])\r\n        );\r\n\r\n        return tableDataGeneral;\r\n    }\r\n\r\n    const getTableDataPortion = () => {\r\n        const foodPortion = props.selectedFoodItem.portion;\r\n        const portionValue = `${foodPortion.amount} g`;\r\n\r\n        const portionObject = applicationContext?.foodDataCorpus.portionTypes.find(portion => portion.id === foodPortion.portionType)\r\n        if (portionObject) {\r\n            const portionName = foodPortion.portionType !== 0 ? getName(portionObject, lang) : applicationStrings.portion_individual[lang];\r\n            const tableDataPortion: Array<RowElement> = [];\r\n\r\n            tableDataPortion.push(\r\n                createRow(`${applicationStrings.label_info_portionType[lang]}:`, portionName)\r\n            );\r\n\r\n            tableDataPortion.push(\r\n                createRow(`${applicationStrings.label_portion[lang]}:`, portionValue)\r\n            );\r\n\r\n            return tableDataPortion\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n\r\n    const getDebugData = () => {\r\n        const nutrientData = props.selectedFoodItem.foodItem.nutrientDataList\r\n        const source1 = nutrientData[0]\r\n        const source2 = nutrientData.length == 2 ? nutrientData[1] : null\r\n\r\n        const makeNutrientValuesLine = (dataObj: NutrientData) => {\r\n            return \"E: \" + round(dataObj.baseData.energy, 1) + \", \"\r\n                + \"W: \" + round(dataObj.baseData.water, 1) + \", \"\r\n                + \"C: \" + round(dataObj.baseData.carbohydrates, 1) + \", \"\r\n                + \"L: \" + round(dataObj.baseData.lipids, 1) + \", \"\r\n                + \"P: \" + round(dataObj.baseData.proteins, 1)\r\n        }\r\n\r\n        const makeAvailableNutrientValuesLine = (nutrientData: NutrientData) => {\r\n            const valuesStatistics = countNumberOfAvailableValues(props.selectedFoodItem.foodItem, nutrientData.source.id)\r\n            return `B: ${valuesStatistics.baseDataValues}, \r\n                L: ${valuesStatistics.lipidDataValues},\r\n                C: ${valuesStatistics.carbDataValues},\r\n                P: ${valuesStatistics.proteinDataValues},\r\n                V: ${valuesStatistics.vitaminDataValues},\r\n                M: ${valuesStatistics.mineralDataValues},\r\n                SUM: ${valuesStatistics.getTotalNumberOfValues()}`\r\n        }\r\n\r\n        const tableDataDebug: Array<RowElement> = [];\r\n        tableDataDebug.push(createRow(`Key data ${source1.source.name}`, makeNutrientValuesLine(source1)))\r\n        if (source2) {\r\n            tableDataDebug.push(createRow(`Key data ${source2.source.name}`, makeNutrientValuesLine(source2)))\r\n\r\n        }\r\n\r\n        if (source2) {  // Empty line between the two sources if two sources exist\r\n            tableDataDebug.push(createRow(\" \", \" \"))\r\n        }\r\n\r\n        tableDataDebug.push(createRow(`Avail. data ${source1.source.name}`, makeAvailableNutrientValuesLine(source1)))\r\n        if (source2) {\r\n            tableDataDebug.push(createRow(`Avail. data ${source2.source.name}`, makeAvailableNutrientValuesLine(source2)))\r\n        }\r\n\r\n        return tableDataDebug\r\n    }\r\n\r\n\r\n    const makeTableDataCombinedFood = () => {\r\n        if (!applicationContext) {\r\n            return\r\n        }\r\n\r\n        const compositeList = props.selectedFoodItem?.compositeSubElements ?? []\r\n        const tableData: Array<RowElement> = []\r\n        const {foodNames} = applicationContext.foodDataCorpus\r\n\r\n        for (let i = 0; i < compositeList.length; i++) {\r\n            const foodItem = compositeList[i].foodItem\r\n            let name = getFoodItemName(foodItem, foodNames, lang)\r\n            const portion = compositeList[i].portion.amount\r\n            const conditionId = compositeList[i].foodItem.conditionId\r\n\r\n            if (conditionId !== 100) {\r\n                const condition = applicationContext.foodDataCorpus.conditions.find(condition => condition.id === conditionId)\r\n                const conditionName = condition ? getName(condition, lang) : null;\r\n                name += `(${conditionName})`\r\n            }\r\n            tableData.push(\r\n                createRow(`${name}\r\n        :\r\n            `, `${portion}\r\n            g`)\r\n            )\r\n        }\r\n\r\n        return tableData;\r\n    }\r\n\r\n    const tableClass = isMobileDevice() ? \"table-style-m\" : \"table-style\"\r\n\r\n    const renderSubTable = (data) => {\r\n        return (\r\n            <div>\r\n                <BootstrapTable trClassName={tableClass} bordered={false} data={data}>\r\n                    <TableHeaderColumn className=\"table-header-no-top-border\" dataField='key' isKey width=\"20vw\"/>\r\n                    <TableHeaderColumn className=\"table-header-no-top-border\" dataField='value'/>\r\n                </BootstrapTable>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const onLinkClick = () => {\r\n        const sourceItemId = getNutrientData(props.selectedFoodItem).sourceItemId\r\n        const usdaLink = `\r\n            https://fdc.nal.usda.gov/fdc-app.html#/food-details/${sourceItemId}/nutrients`\r\n        const link = window.open(usdaLink, '_blank')\r\n        if (link) {\r\n            link.focus()\r\n        } else {\r\n            window.location.href = usdaLink\r\n        }\r\n    }\r\n\r\n    const isCompositeFoodElement = props.selectedFoodItem.aggregated === true\r\n    const containerClass = props.directCompare ? \"tab-info-directcompare\" : \"tab-info\"\r\n\r\n    return (\r\n        <div className={containerClass}>\r\n            <div>\r\n                {!isCompositeFoodElement &&\r\n                <div>\r\n                    <div>\r\n                        {applicationContext?.debug &&\r\n                        <div style={{paddingBottom: \"4vh\"}}>\r\n                            {renderSubTable(getDebugData())}\r\n                        </div>\r\n                        }\r\n                        <div>\r\n                            {renderSubTable(getGeneralTableData())}\r\n                        </div>\r\n                        <div style={{paddingTop: \"3vh\"}}>\r\n                            <h5>{applicationStrings.label_info_portion[lang]}</h5>\r\n                            {renderSubTable(getTableDataPortion())}\r\n                        </div>\r\n                    </div>\r\n                    <div style={{paddingTop: \"2vh\", paddingBottom: \"1.2vh\"}}>\r\n                        <Button variant={'link'} active={true} onClick={onLinkClick}>\r\n                            {applicationStrings.label_usda_reference[lang]}\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                }\r\n                {isCompositeFoodElement && props.selectedFoodItem?.compositeSubElements &&\r\n                <div>\r\n                    <h5>{applicationStrings.label_info_composite[lang]}</h5>\r\n                    {renderSubTable(makeTableDataCombinedFood())}\r\n                </div>\r\n                }\r\n                {isCompositeFoodElement && !props.selectedFoodItem?.compositeSubElements &&\r\n                <div>\r\n                    {applicationStrings.label_noData[lang]}\r\n                </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}","import {FoodTableDataObject} from \"../../types/livedata/SelectedFoodItemData\";\r\nimport {DISPLAYMODE_TABLE, TAB_INFO, TAB_JUXTAPOSITION} from \"../../config/Constants\";\r\nimport {ChartPanel} from \"./ChartPanel\";\r\nimport SelectedFoodItem from \"../../types/livedata/SelectedFoodItem\";\r\nimport {FoodDataTable} from \"./FoodDataTable\";\r\nimport {InfoData} from \"./charts/InfoData\";\r\nimport React, {useContext} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\n\r\ninterface FoodDataPageBodyProps {\r\n    tableData: Array<FoodTableDataObject>\r\n    selectedFoodItem: SelectedFoodItem,\r\n    dataPage: string\r\n}\r\n\r\nexport default function FoodDataPageBody(props: FoodDataPageBodyProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n\r\n    if(!applicationContext) {\r\n        return <div/>\r\n    }\r\n\r\n    const {displayMode, selectedDataPage}  = applicationContext.applicationData.foodDataPanel\r\n\r\n    const renderDataPage = () => {\r\n        return (\r\n            <div className=\"d-flex flex-column\">\r\n                {(displayMode === DISPLAYMODE_TABLE && selectedDataPage !== TAB_JUXTAPOSITION) ?\r\n                <div >\r\n                    <FoodDataTable tableData={props.tableData}\r\n                                   portionSize={props.selectedFoodItem.portion.amount}\r\n                                   dataPage={props.dataPage}\r\n                    />\r\n                </div>\r\n                :\r\n                <div>\r\n                    <ChartPanel selectedFoodItem={props.selectedFoodItem} displayMode={displayMode} />\r\n                </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={\"food-analyzer-chartpanel\"}>\r\n            {selectedDataPage === TAB_INFO &&\r\n                 <InfoData selectedFoodItem={props.selectedFoodItem}/>\r\n            }\r\n            {selectedDataPage !== TAB_INFO &&\r\n                renderDataPage()\r\n            }\r\n        </div>\r\n    )\r\n\r\n}","import React, {ReactElement, useContext} from \"react\";\r\nimport {applicationStrings} from \"../static/labels\";\r\nimport {HelpText} from \"../service/HelpService\";\r\nimport {Modal} from \"react-bootstrap\";\r\nimport {LanguageContext} from \"../contexts/LangContext\";\r\n\r\ninterface HelpModalProps {\r\n    helpText: HelpText,\r\n    size?,\r\n    style?,\r\n    closeHelpModal: () => void\r\n}\r\n\r\nexport function HelpModal(props: HelpModalProps): ReactElement {\r\n    const language = useContext(LanguageContext).language\r\n\r\n    if (!props.helpText) {\r\n        return (<div>No data available.</div>);\r\n    }\r\n\r\n    return (\r\n        <Modal className={\"help-modal\"}\r\n               size={props.size ? props.size : \"sm\"}\r\n               show={true}\r\n               onHide={props.closeHelpModal}\r\n               backdrop=\"static\"\r\n               style={props.style ? props.style : {}}\r\n        >\r\n            <Modal.Header>\r\n                <h5 className=\"modal-title\">{props.helpText.title}</h5>\r\n                <button type=\"button\"\r\n                        className=\"btn-close\"\r\n                        data-dismiss=\"modal\"\r\n                        aria-label=\"Close\"\r\n                        onClick={props.closeHelpModal}>\r\n                </button>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div dangerouslySetInnerHTML={{__html: props.helpText.content}}\r\n                      style={{overflowY: \"auto\", maxHeight: \"66vh\"}}\r\n                />\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <button type=\"button\"\r\n                        className=\"btn btn-primary\"\r\n                        onClick={props.closeHelpModal}>\r\n                    {applicationStrings.button_close[language]}\r\n                </button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}","import {LANGUAGE_EN} from \"../config/Constants\";\r\n\r\nexport interface HelpText {\r\n    title: string,\r\n    content: string\r\n}\r\n\r\nexport function getHelpText(helpModalId: number, languageId: string): HelpText | null {\r\n    const helpFile = require(\"../static/help/help.json\");\r\n    const entry = helpFile.entries.find( (entry) => entry.id === helpModalId);\r\n\r\n    if(entry) {\r\n        const languageSection = languageId === LANGUAGE_EN ? entry.en : entry.de;\r\n        const title = languageSection.title;\r\n        const contentArray = languageSection.content;\r\n\r\n        let content = \"\";\r\n        for(let i=0; i < contentArray.length; i++) {\r\n            content += contentArray[i];\r\n            if(i < (contentArray.length-1)) {\r\n                content += \"<br />\"\r\n            }\r\n        }\r\n\r\n        return {\r\n            title: title,\r\n            content: content\r\n        };\r\n    }\r\n\r\n    return null\r\n}","import {Button, ButtonGroup} from \"react-bootstrap\";\r\nimport {\r\n    TAB_BASE_DATA,\r\n    TAB_CARBS_DATA,\r\n    TAB_ENERGY_DATA,\r\n    TAB_INFO, TAB_JUXTAPOSITION,\r\n    TAB_LIPIDS_DATA,\r\n    TAB_MINERAL_DATA,\r\n    TAB_PROTEINS_DATA,\r\n    TAB_VITAMIN_DATA\r\n} from \"../../config/Constants\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {useContext} from \"react\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport {isMobileDevice} from \"../../service/WindowDimension\";\r\n\r\ninterface ChartMenuPanelProps {\r\n    dataPage: string\r\n    setDataPage: (id: string) => void\r\n    verticalArrangement: boolean\r\n}\r\n\r\nexport function ChartMenuPanel(props: ChartMenuPanelProps) {\r\n    const languageContext = useContext(LanguageContext)\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n\r\n    const handlePageButtonClick = (value: string) => {\r\n        props.setDataPage(value)\r\n    }\r\n\r\n    const variant = \"link\"\r\n\r\n    const makeButtonLabel = (buttonText): JSX.Element => {\r\n        const classNameSpan = props.verticalArrangement ? \"float-start\" : \"\"\r\n        return <span className={classNameSpan}>{buttonText}</span>\r\n    }\r\n\r\n    const rowClass = props.verticalArrangement ? \"d-flex\" : \"d-flex flex-row flex-wrap\"\r\n\r\n    const labelMinerals = isMobileDevice()\r\n        ? applicationStrings.label_nutrient_min_m[languageContext.language]\r\n        : applicationStrings.label_nutrient_min[languageContext.language]\r\n\r\n    const labelCarbs = isMobileDevice()\r\n        ? applicationStrings.label_nutrient_carbohydrates_m[languageContext.language]\r\n        : applicationStrings.label_nutrient_carbohydrates[languageContext.language]\r\n\r\n    return (\r\n        <div>\r\n            <ButtonGroup className={rowClass} vertical={props.verticalArrangement}>\r\n                <Button className=\"btn sidebar-link\"\r\n                        onClick={() => handlePageButtonClick(TAB_BASE_DATA)}\r\n                        variant={variant}\r\n                        active={props.dataPage === TAB_BASE_DATA}>\r\n                    {makeButtonLabel(applicationStrings.label_overview[languageContext.language])}\r\n                </Button>\r\n                <Button className=\"btn sidebar-link\"\r\n                        onClick={() => handlePageButtonClick(TAB_ENERGY_DATA)}\r\n                        variant={variant}\r\n                        active={props.dataPage === TAB_ENERGY_DATA}>\r\n                    {makeButtonLabel(applicationStrings.label_nutrient_energy[languageContext.language])}\r\n                </Button>\r\n                <Button className=\"btn sidebar-link\"\r\n                        onClick={() => handlePageButtonClick(TAB_VITAMIN_DATA)}\r\n                        variant={variant}\r\n                        active={props.dataPage === TAB_VITAMIN_DATA}>\r\n                    {makeButtonLabel(applicationStrings.label_nutrient_vit[languageContext.language])}\r\n                </Button>\r\n                <Button className=\"btn sidebar-link\"\r\n                        onClick={() => handlePageButtonClick(TAB_MINERAL_DATA)}\r\n                        variant={variant}\r\n                        active={props.dataPage === TAB_MINERAL_DATA}>\r\n                    {makeButtonLabel(labelMinerals)}\r\n                </Button>\r\n                <Button className=\"btn sidebar-link\"\r\n                        onClick={() => handlePageButtonClick(TAB_LIPIDS_DATA)}\r\n                        variant={variant}\r\n                        active={props.dataPage === TAB_LIPIDS_DATA}>\r\n                    {makeButtonLabel(applicationStrings.label_nutrient_lipids[languageContext.language])}\r\n                </Button>\r\n                <Button className=\"btn sidebar-link\"\r\n                        onClick={() => handlePageButtonClick(TAB_CARBS_DATA)}\r\n                        variant={variant}\r\n                        active={props.dataPage === TAB_CARBS_DATA}>\r\n                    {makeButtonLabel(labelCarbs)}\r\n                </Button>\r\n                <Button className=\"btn sidebar-link\"\r\n                        onClick={() => handlePageButtonClick(TAB_PROTEINS_DATA)}\r\n                        variant={variant}\r\n                        active={props.dataPage === TAB_PROTEINS_DATA}>\r\n                    {makeButtonLabel(applicationStrings.label_nutrient_proteins[languageContext.language])}\r\n                </Button>\r\n                {props.verticalArrangement &&\r\n                    <Button className=\"btn sidebar-link\"\r\n                            onClick={() => handlePageButtonClick(TAB_JUXTAPOSITION)}\r\n                            variant={variant}\r\n                            active={props.dataPage === TAB_JUXTAPOSITION}>\r\n                        {makeButtonLabel(applicationStrings.label_juxtaposition[languageContext.language])}\r\n                    </Button>\r\n                }\r\n                <Button className=\"btn sidebar-link\"\r\n                        onClick={() => handlePageButtonClick(TAB_INFO)}\r\n                        variant={variant}\r\n                        active={props.dataPage === TAB_INFO}>\r\n                    {makeButtonLabel(applicationStrings.label_info[languageContext.language])}\r\n                </Button>\r\n            </ButtonGroup>\r\n        </div>\r\n    );\r\n\r\n}","import React, {useContext} from \"react\";\r\nimport {Form, FormGroup, Modal} from \"react-bootstrap\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {isMobileDevice} from \"../../service/WindowDimension\";\r\nimport {\r\n    OPTION_NO,\r\n    OPTION_YES,\r\n    UNIT_GRAM,\r\n    UNIT_MICROGRAM,\r\n    UNIT_MILLIGRAM\r\n} from \"../../config/Constants\";\r\nimport Select from 'react-select';\r\nimport ReactSelectOption from \"../../types/ReactSelectOption\";\r\n\r\ninterface SettingsProps {\r\n    onHide: () => void\r\n}\r\n\r\nexport default function SettingsModal(props: SettingsProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const language = useContext(LanguageContext).language\r\n\r\n    const handleUnitVitaminsChange = (selectionOption: ReactSelectOption) => {\r\n        if (applicationContext) {\r\n            let dataSettings = {...applicationContext.dataSettings, unitVitamins: selectionOption.value}\r\n            applicationContext.setDataSettings(dataSettings)\r\n        }\r\n    }\r\n\r\n    const handleUnitProteinsChange = (selectionOption: ReactSelectOption) => {\r\n        if (applicationContext) {\r\n            let dataSettings = {...applicationContext.dataSettings, unitProteins: selectionOption.value}\r\n            applicationContext.setDataSettings(dataSettings)\r\n        }\r\n    }\r\n\r\n    const handleIncludeProvitaminsChange = (selectionOption: ReactSelectOption) => {\r\n        if (applicationContext) {\r\n            let dataSettings = {...applicationContext.dataSettings, includeProvitamins: selectionOption.value}\r\n            applicationContext.setDataSettings(dataSettings)\r\n        }\r\n    }\r\n\r\n    const renderMenu = () => {\r\n        const optionsVitamins: Array<ReactSelectOption> = [\r\n            {label: applicationStrings._milligram[language], value: UNIT_MILLIGRAM},\r\n            {label: applicationStrings._microgram[language], value: UNIT_MICROGRAM},\r\n        ]\r\n        const selectedUnitVitamins = applicationContext?.dataSettings.unitVitamins\r\n        const selectedOptionVitamins = optionsVitamins.find(option => option.value === selectedUnitVitamins)\r\n\r\n        const optionsProteins: Array<ReactSelectOption> = [\r\n            {label: applicationStrings._gram[language], value: UNIT_GRAM},\r\n            {label: applicationStrings._milligram[language], value: UNIT_MILLIGRAM},\r\n        ]\r\n        const selectedUnitProteins = applicationContext?.dataSettings.unitProteins\r\n        const selectedOptionProteins = optionsProteins.find(option => option.value === selectedUnitProteins)\r\n\r\n        const optionsProvitamins: Array<ReactSelectOption> = [\r\n            {label: applicationStrings._option_yes[language], value: OPTION_YES},\r\n            {label: applicationStrings._option_no[language], value: OPTION_NO},\r\n        ]\r\n        const includeProvitamins = applicationContext?.dataSettings.includeProvitamins\r\n        const selectedOptionProvitamins = optionsProvitamins.find(option => option.value === includeProvitamins)\r\n\r\n        const classRow = isMobileDevice() ? \"form-row-m\" : \"form-row\"\r\n\r\n        return <div>\r\n            <form>\r\n                <FormGroup controlId=\"formBasicText\">\r\n                    <div className=\"row\">\r\n                        <div className={classRow}>\r\n                            <Form.Label>\r\n                                {applicationStrings.modal_settings_label_unit_vitamins[language]}:\r\n                            </Form.Label>\r\n                            <Select options={optionsVitamins}\r\n                                    value={selectedOptionVitamins}\r\n                                    isSearchable={false}\r\n                                    onChange={(value) => handleUnitVitaminsChange(value)}\r\n                            />\r\n                        </div>\r\n                        <div className={classRow}>\r\n                            <Form.Label>\r\n                                {applicationStrings.modal_settings_label_unit_proteins[language]}:\r\n                            </Form.Label>\r\n                            <Select options={optionsProteins}\r\n                                    value={selectedOptionProteins}\r\n                                    isSearchable={false}\r\n                                    onChange={(value) => handleUnitProteinsChange(value)}\r\n                            />\r\n                        </div>\r\n                        <div className={classRow}>\r\n                            <Form.Label>\r\n                                {applicationStrings.modal_settings_label_provitamins[language]}:\r\n                            </Form.Label>\r\n                            <Select options={optionsProvitamins}\r\n                                    value={selectedOptionProvitamins}\r\n                                    isSearchable={false}\r\n                                    onChange={(value) => handleIncludeProvitaminsChange(value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </FormGroup>\r\n            </form>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <Modal show={true}>\r\n            <Modal.Header>\r\n                <h5 className=\"modal-title\"><b>{applicationStrings.modal_settings_title[language]}</b></h5>\r\n                <button type=\"button\"\r\n                        className=\"btn-close\"\r\n                        data-dismiss=\"modal\"\r\n                        aria-label=\"Close\"\r\n                        onClick={props.onHide}>\r\n                </button>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div style={{padding: \"20px\"}}>\r\n                    {renderMenu()}\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <button type=\"button\"\r\n                        className=\"btn btn-primary\"\r\n                        onClick={props.onHide}>\r\n                    {applicationStrings.button_close[language]}\r\n                </button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n\r\n}","import React, {useContext, useState} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport {Button} from \"react-bootstrap\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {FaBookOpen, FaChartBar, FaQuestionCircle, FaThList, FaTimes, FaTools} from \"react-icons/fa\";\r\nimport {\r\n    DISPLAYMODE_CHART,\r\n    DISPLAYMODE_TABLE,\r\n    PATH_FOODDATA_PANEL,\r\n    TAB_BASE_DATA,\r\n    TAB_CARBS_DATA,\r\n    TAB_ENERGY_DATA,\r\n    TAB_INFO, TAB_JUXTAPOSITION,\r\n    TAB_LIPIDS_DATA,\r\n    TAB_MINERAL_DATA,\r\n    TAB_PROTEINS_DATA,\r\n    TAB_VITAMIN_DATA\r\n} from \"../../config/Constants\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport {getNameFromFoodNameList, shortenName} from \"../../service/nutrientdata/NameTypeService\";\r\nimport SelectedFoodItem from \"../../types/livedata/SelectedFoodItem\";\r\nimport FoodDataPageBody from \"./FoodDataPageBody\";\r\nimport {FoodTableDataObject} from \"../../types/livedata/SelectedFoodItemData\";\r\nimport {HelpModal} from \"../HelpModal\";\r\nimport {getHelpText, HelpText} from \"../../service/HelpService\";\r\nimport getName from \"../../service/LanguageService\";\r\nimport {ChartMenuPanel} from \"./ChartMenuPanel\";\r\nimport {getSourceName} from \"../../service/nutrientdata/NutrientDataRetriever\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport {isMobileDevice} from \"../../service/WindowDimension\";\r\nimport SettingsModal from \"./SettingsModal\";\r\n\r\nimport {VitaminsBook} from \"./VitaminBook\";\r\nimport nutrientBook from \"../../static/nutrientBook.json\";\r\nimport {BookDataEntry} from \"../../types/BookData\";\r\n\r\n\r\ninterface FoodDataPageHeaderProps {\r\n    setDisplayMode: (id: string) => void\r\n    setDataPage: (id: string) => void\r\n    selectedFoodItem: SelectedFoodItem\r\n    tableData: Array<FoodTableDataObject>\r\n}\r\n\r\nexport default function FoodDataPageHeader(props: FoodDataPageHeaderProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const languageContext = useContext(LanguageContext)\r\n    const history = useHistory()\r\n\r\n    const [helpModalId, setHelpModalId] = useState<number>(0)\r\n    const [showBookModal, setShowBookModal] = useState<boolean>(false)\r\n    const [showSettingsModal, setShowSettingsModal] = useState<boolean>(false)\r\n\r\n    if (applicationContext === null) {\r\n        return <div/>\r\n    }\r\n\r\n    const displayMode = applicationContext.applicationData.foodDataPanel.displayMode\r\n    const dataPage = applicationContext.applicationData.foodDataPanel.selectedDataPage\r\n\r\n    const handleRadioButtonClick = (value: string) => {\r\n        props.setDisplayMode(value)\r\n    }\r\n\r\n    const closeTab = () => {\r\n        const id = (props.selectedFoodItem.foodItem.id)\r\n        const remainingItems = applicationContext.applicationData.foodDataPanel.selectedFoodItems.length - 1\r\n        applicationContext.setFoodDataPanelData.removeItemFromFoodDataPanel(id)\r\n\r\n        if (remainingItems === 0) {\r\n            history.push({pathName: PATH_FOODDATA_PANEL})\r\n        }\r\n    }\r\n\r\n    const openHelpMenu = () => {\r\n        switch (dataPage) {\r\n            case TAB_BASE_DATA:\r\n                setHelpModalId(1)\r\n                return;\r\n            case TAB_ENERGY_DATA:\r\n                setHelpModalId(2)\r\n                return;\r\n            case TAB_VITAMIN_DATA:\r\n                setHelpModalId(3)\r\n                return;\r\n            case TAB_MINERAL_DATA:\r\n                setHelpModalId(4)\r\n                return;\r\n            case TAB_LIPIDS_DATA:\r\n                setHelpModalId(5)\r\n                return;\r\n            case TAB_INFO:\r\n                setHelpModalId(6)\r\n                return;\r\n            case TAB_CARBS_DATA:\r\n                setHelpModalId(7)\r\n                return;\r\n            case TAB_PROTEINS_DATA:\r\n                setHelpModalId(8)\r\n                return;\r\n            case TAB_JUXTAPOSITION:\r\n                setHelpModalId(11)\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    const openSettingsMenu = () => {\r\n        setShowSettingsModal(true)\r\n    }\r\n\r\n    const openVitaminMineralBook = () => {\r\n        setShowBookModal(true)\r\n    }\r\n\r\n    const enabledDisplayButtonClasses = \"button-displaymode-enabled\"\r\n    const disabledDisplayButtonClasses = \"button-displaymode-disabled\"\r\n\r\n    const chartButtonClasses = displayMode === DISPLAYMODE_CHART ? enabledDisplayButtonClasses\r\n        : disabledDisplayButtonClasses;\r\n\r\n    const tablesButtonClasses = displayMode === DISPLAYMODE_TABLE ? enabledDisplayButtonClasses\r\n        : disabledDisplayButtonClasses;\r\n\r\n    const foodNamesList = applicationContext.foodDataCorpus.foodNames;\r\n\r\n\r\n    let foodName\r\n    if (props.selectedFoodItem.foodItem.nameId) {\r\n        foodName = getNameFromFoodNameList(foodNamesList, props.selectedFoodItem.foodItem.nameId, languageContext.language)\r\n    } else {\r\n        foodName = props.selectedFoodItem.title !== undefined ? props.selectedFoodItem.title : 'Individual'\r\n    }\r\n\r\n    let fullName\r\n    const portionSize = props.selectedFoodItem.portion.amount\r\n\r\n    if (!props.selectedFoodItem.foodItem.aggregated) {\r\n        const condition = applicationContext.foodDataCorpus.conditions.find(condition => condition.id === props.selectedFoodItem.foodItem.conditionId)\r\n        const conditionName = condition ? getName(condition, languageContext.language) : \"\"\r\n        if (isMobileDevice()) {\r\n            foodName = shortenName(foodName, 16)\r\n        }\r\n        fullName = condition?.id !== 100\r\n            ? `${foodName} (${conditionName}, ${portionSize} g)`\r\n            : `${foodName} (${portionSize} g)`\r\n    } else {\r\n        fullName = `${foodName} (${portionSize} g)`\r\n    }\r\n\r\n    const helpText: HelpText | null = helpModalId > 0 ? getHelpText(helpModalId, languageContext.language) : null\r\n    const sourceString = getSourceName(props.selectedFoodItem.selectedSource)\r\n    const selectedDataPage = applicationContext.applicationData.foodDataPanel.selectedDataPage\r\n    const sourceToolTip = `${applicationStrings.tooltip_source[languageContext.language]} ${sourceString}`\r\n\r\n    let bookToolTip = null\r\n    let bookData: BookDataEntry[] = []\r\n    switch (selectedDataPage) {\r\n        case TAB_VITAMIN_DATA:\r\n            bookToolTip = applicationStrings.tooltip_icon_vitamins[languageContext.language]\r\n            bookData = nutrientBook.vitamins\r\n            break;\r\n        case TAB_MINERAL_DATA:\r\n            bookToolTip = applicationStrings.tooltip_icon_minerals[languageContext.language]\r\n            bookData = nutrientBook.minerals\r\n            break;\r\n    }\r\n\r\n    const shouldShowBookIcon = selectedDataPage === TAB_VITAMIN_DATA || selectedDataPage == TAB_MINERAL_DATA\r\n\r\n    const smallHelpDialogTabs = [TAB_BASE_DATA, TAB_INFO, TAB_VITAMIN_DATA, TAB_MINERAL_DATA]\r\n\r\n    const helpModalSize = smallHelpDialogTabs.includes(selectedDataPage)\r\n        ? \"sm\"\r\n        : \"lg\"\r\n\r\n    const headerLabelClass = fullName.length <= 48\r\n        ? \"header-label\"\r\n        : \"header-label-small\"\r\n\r\n    return (\r\n        <div style={{paddingBottom: \"6px\"}}>\r\n            {helpText !== null &&\r\n            <HelpModal helpText={helpText}\r\n                       size={helpModalSize}\r\n                       closeHelpModal={() => setHelpModalId(0)}\r\n            />\r\n            }\r\n            {showBookModal &&\r\n            <VitaminsBook selectedDataTab={selectedDataPage} bookData={bookData}\r\n                          closeBookModal={() => setShowBookModal(false)}/>\r\n            }\r\n            {showSettingsModal &&\r\n            <SettingsModal onHide={() => setShowSettingsModal(false)}/>\r\n            }\r\n            <div className={\"d-flex flex-nowrap\"}>\r\n                <div className=\"col-2\">\r\n                    <div className={\"card\"}>\r\n                        <div className=\"card-body\" style={{paddingLeft: \"0.65vw\"}}>\r\n                            <ChartMenuPanel verticalArrangement={true} setDataPage={props.setDataPage}\r\n                                            dataPage={selectedDataPage}/>\r\n                            <div className={\"d-flex card\"} style={{marginTop: \"2vh\", backgroundColor: \"#eeeeee\"}}>\r\n                                <div className={\"text-center food-analyzer-sourcebox\"} data-tip={sourceToolTip}>\r\n                                    {sourceString}\r\n                                    <ReactTooltip/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={\"col-10\"}>\r\n                    <div className=\"d-flex flex-row justify-content-between\" style={{marginTop: \"1vh\"}}>\r\n                        <div style={{paddingTop: \"0.75vh\", paddingLeft: \"1vw\"}}>\r\n                            <div className={headerLabelClass}>\r\n                                <b>{fullName}</b>\r\n                            </div>\r\n                        </div>\r\n                        <div className={\"d-flex flex-row align-items-start\"} style={{paddingLeft: \"0.75vw\", paddingRight: \"0.25vw\"}}>\r\n                            {shouldShowBookIcon &&\r\n                            <Button className={\"button-foodPanelHead\"}\r\n                                    onClick={() => openVitaminMineralBook()}\r\n                                    data-tip={bookToolTip}>\r\n                                <ReactTooltip/>\r\n                                <FaBookOpen/>\r\n                            </Button>\r\n                            }\r\n                            <div className=\"btn-group\" role=\"group\">\r\n                                <Button className={chartButtonClasses}\r\n                                        onClick={() => handleRadioButtonClick(DISPLAYMODE_CHART)}\r\n                                        active={displayMode === DISPLAYMODE_CHART}\r\n                                        data-for={\"datapanel-chart\"}\r\n                                        data-tip={applicationStrings.tooltip_icon_charts[languageContext.language]}>\r\n                                    <ReactTooltip id={\"datapanel-chart\"}/>\r\n                                    <FaChartBar/>\r\n                                </Button>\r\n                                <Button className={tablesButtonClasses}\r\n                                        onClick={() => handleRadioButtonClick(DISPLAYMODE_TABLE)}\r\n                                        active={displayMode === DISPLAYMODE_TABLE}\r\n                                        data-for={\"datapanel-table\"}\r\n                                        data-tip={applicationStrings.tooltip_icon_table[languageContext.language]}>\r\n                                    <ReactTooltip id=\"datapanel-table\"/>\r\n                                    <FaThList/>\r\n                                </Button>\r\n                            </div>\r\n                            <div className={\"d-flex flex-row\"} style={{paddingLeft: \"0.5vw\"}}>\r\n                                <Button className={\"button-foodPanelHead\"}\r\n                                        onClick={openSettingsMenu}\r\n                                        data-for={\"datapanel-settings\"}\r\n                                        data-tip={applicationStrings.tooltip_icon_settings[languageContext.language]}>\r\n                                    <ReactTooltip id=\"datapanel-settings\" globalEventOff=\"click\"/>\r\n                                    <FaTools/>\r\n                                </Button>\r\n                                <Button className={\"button-foodPanelHead\"}\r\n                                        onClick={openHelpMenu}>\r\n                                    <FaQuestionCircle/>\r\n                                </Button>\r\n                                <Button className={\"button-foodPanelHead\"}\r\n                                        onClick={closeTab}\r\n                                        data-for={\"datapanel-close\"}\r\n                                        data-tip={applicationStrings.tooltip_icon_close[languageContext.language]}>\r\n                                    <ReactTooltip id=\"datapanel-close\"/>\r\n                                    <FaTimes/>\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <FoodDataPageBody selectedFoodItem={props.selectedFoodItem}\r\n                                      tableData={props.tableData}\r\n                                      dataPage={dataPage}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}","import * as MathService from './calculation/MathService';\r\nimport {applicationStrings} from \"../static/labels\";\r\nimport {FoodTableDataObject} from \"../types/livedata/SelectedFoodItemData\";\r\nimport {getNutrientData} from \"./nutrientdata/NutrientDataRetriever\";\r\nimport SelectedFoodItem from \"../types/livedata/SelectedFoodItem\";\r\nimport {getTotalAmountOfCarotenoids} from \"./calculation/provitaminCalculation/CarotenoidCalculationService\";\r\nimport {OPTION_YES, UNIT_GRAM, UNIT_MICROGRAM, UNIT_MILLIGRAM} from \"../config/Constants\";\r\nimport {\r\n    getTotalAmountOfExtendedVitaminE,\r\n    hasExtendedData\r\n} from \"./calculation/provitaminCalculation/ExtendedVitaminECalculationService\";\r\nimport DietaryRequirement, {RequirementData} from \"../types/nutrientdata/DietaryRequirement\";\r\nimport {determineDailyRequirement} from \"./calculation/DietaryRequirementService\";\r\nimport {UserData} from \"../types/livedata/UserData\";\r\nimport {\r\n    EC_FACTOR_TOCOTRIENOL_ALPHA, EC_FACTOR_TOCOTRIENOL_BETA, EC_FACTOR_TOCOTRIENOL_GAMMA,\r\n    EQ_FACTOR_BETA_CAROTENE,\r\n    EQ_FACTOR_OTHER_CAROTENE, EQ_FACTOR_TOCOPHEROL_BETA, EQ_FACTOR_TOCOPHEROL_DELTA, EQ_FACTOR_TOCOPHEROL_GAMMA\r\n} from \"./calculation/provitaminCalculation/ProvitaminEquivalentFactors\";\r\nimport {autoRound} from \"./calculation/MathService\";\r\nimport {DataSettings} from \"../types/livedata/DataSettings\";\r\nimport {calculateEnergyData} from \"./calculation/EnergyService\";\r\n\r\nexport interface TableCalculationParams {\r\n    selectedFoodItem: SelectedFoodItem\r\n    portion: number\r\n    language: string\r\n    preferredSource: string\r\n    dietaryRequirement?: DietaryRequirement\r\n    userData?: UserData\r\n    dataSettings: DataSettings\r\n}\r\n\r\nexport function createBaseDataTable(params: TableCalculationParams): Array<FoodTableDataObject> {\r\n    let tableData: Array<FoodTableDataObject> = [];\r\n    const {selectedFoodItem, portion, language} = params\r\n\r\n    const {\r\n        water,\r\n        carbohydrates,\r\n        lipids,\r\n        proteins,\r\n        dietaryFibers,\r\n        ash,\r\n        alcohol,\r\n        caffeine\r\n    } = getNutrientData(selectedFoodItem).baseData\r\n    const {sugar} = getNutrientData(selectedFoodItem).carbohydrateData\r\n\r\n    if (water !== null) {\r\n        tableData.push(createTableObject(\r\n            applicationStrings.label_nutrient_water[language],\r\n            water,\r\n            portion, \"g\")\r\n        );\r\n    }\r\n\r\n    if (carbohydrates !== null) {\r\n        const carbObject = makeCarbsTableObject(carbohydrates, sugar, dietaryFibers, portion, language)\r\n        tableData.push(carbObject)\r\n    }\r\n\r\n    if (lipids !== null) {\r\n        tableData.push(createTableObject(\r\n            applicationStrings.label_nutrient_lipids[language],\r\n            lipids,\r\n            portion, \"g\")\r\n        );\r\n    }\r\n\r\n    if (proteins !== null) {\r\n        tableData.push(createTableObject(\r\n            applicationStrings.label_nutrient_proteins[language],\r\n            proteins,\r\n            portion, \"g\")\r\n        );\r\n    }\r\n\r\n    if (alcohol !== null) {\r\n        tableData.push(createTableObjectAlcohol(\r\n            applicationStrings.label_nutrient_alcohol[language],\r\n            alcohol,\r\n            portion, \"g\")\r\n        );\r\n    }\r\n\r\n    if (caffeine !== null) {\r\n        tableData.push(createTableObject(\r\n            applicationStrings.label_nutrient_caffeine[language],\r\n            caffeine / 1000,\r\n            portion, \"g\")\r\n        );\r\n    }\r\n\r\n    if (ash !== null) {\r\n        tableData.push(createTableObject(\r\n            applicationStrings.label_nutrient_ash[language],\r\n            ash,\r\n            portion, \"g\")\r\n        );\r\n    }\r\n\r\n    return tableData;\r\n}\r\n\r\n\r\nexport function createVitaminTable(params: TableCalculationParams): Array<FoodTableDataObject> {\r\n    let tableData: Array<FoodTableDataObject> = [];\r\n    const {selectedFoodItem, portion, language, dietaryRequirement, userData, dataSettings} = params\r\n    const vitRequirementData = dietaryRequirement?.vitaminRequirementData ?? null\r\n\r\n    const nutrientData = getNutrientData(selectedFoodItem)\r\n    const unit = params.dataSettings.unitVitamins === UNIT_MILLIGRAM ? \"mg\" : \"µg\"\r\n\r\n    if(!vitRequirementData || !userData) {\r\n        throw new Error(\"Vitamin Requirement Data or User Data is not available\")\r\n    }\r\n\r\n    if (nutrientData.vitaminData.a != null) {\r\n        const requirement = makeDietaryRequirementString(vitRequirementData.a, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_vit_a[language],\r\n                getVitaminOrMineralAmount(nutrientData.vitaminData.a, dataSettings),\r\n                portion,\r\n                unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    const {carotenoidData} = nutrientData.vitaminData\r\n\r\n    if (carotenoidData != null && dataSettings.includeProvitamins === OPTION_YES) {\r\n        let totalCarotenoid = getTotalAmountOfCarotenoids(carotenoidData)\r\n\r\n        if (totalCarotenoid !== null) {\r\n            if(dataSettings.unitVitamins === UNIT_MICROGRAM) {\r\n                totalCarotenoid *= 1000\r\n            }\r\n\r\n            let reqString\r\n            let requirementVitaminA = determineDailyRequirement(vitRequirementData.a, userData)\r\n            if(dataSettings.unitVitamins === UNIT_MICROGRAM) {\r\n                requirementVitaminA *= 1000\r\n            }\r\n\r\n            reqString = `${requirementVitaminA} ${unit} Vit. A ≙`\r\n\r\n            let carotenoidTableObject = createTableObject(\r\n                applicationStrings.label_nutrient_vit_carotenoid[language],\r\n                totalCarotenoid,\r\n                portion, unit, reqString\r\n            )\r\n\r\n            if (carotenoidData.caroteneAlpha !== null) {\r\n                let reqString = \"\"\r\n                if (vitRequirementData && userData) {\r\n                    const equivalentVitA = calculateProvitaminEquivalent(\r\n                        vitRequirementData.a,\r\n                        EQ_FACTOR_OTHER_CAROTENE,\r\n                        userData,\r\n                        dataSettings\r\n                    )\r\n                    reqString = `... ${applicationStrings.label_prefix_hereof[language]} ${equivalentVitA} ${unit}`\r\n                }\r\n\r\n                const label = ` ... ${applicationStrings.label_prefix_hereof[language]} ${applicationStrings.label_nutrient_vit_carotenoid_alpha[language]}`\r\n\r\n                carotenoidTableObject = appendTableDataObject(\r\n                    carotenoidTableObject,\r\n                    language,\r\n                    label,\r\n                    getVitaminOrMineralAmount(carotenoidData.caroteneAlpha, dataSettings),\r\n                    portion,\r\n                    unit,\r\n                    reqString\r\n                )\r\n            }\r\n\r\n            if (carotenoidData.caroteneBeta !== null) {\r\n                let reqString = \"\"\r\n                if (vitRequirementData && userData) {\r\n                    const equivalentVitA = calculateProvitaminEquivalent(\r\n                        vitRequirementData.a,\r\n                        EQ_FACTOR_BETA_CAROTENE,\r\n                        userData,\r\n                        dataSettings\r\n                    )\r\n                    reqString = `... ${applicationStrings.label_prefix_hereof[language]} ${equivalentVitA} ${unit}`\r\n                }\r\n\r\n                const label = ` ... ${applicationStrings.label_prefix_hereof[language]} ${applicationStrings.label_nutrient_vit_carotenoid_beta[language]}`\r\n                carotenoidTableObject = appendTableDataObject(\r\n                    carotenoidTableObject,\r\n                    language,\r\n                    label,\r\n                    getVitaminOrMineralAmount(carotenoidData.caroteneBeta, dataSettings),\r\n                    portion,\r\n                    unit,\r\n                    reqString\r\n                )\r\n            }\r\n\r\n            if (carotenoidData.cryptoxanthin !== null) {\r\n                let reqString = \"\"\r\n                if (vitRequirementData && userData) {\r\n                    const equivalentVitA = calculateProvitaminEquivalent(\r\n                        vitRequirementData.a,\r\n                        EQ_FACTOR_OTHER_CAROTENE,\r\n                        userData,\r\n                        dataSettings\r\n                    )\r\n                    reqString = `... ${applicationStrings.label_prefix_hereof[language]} ${equivalentVitA} ${unit}`\r\n                }\r\n                const label = ` ... ${applicationStrings.label_prefix_hereof[language]} ${applicationStrings.label_nutrient_vit_cryptoxanthin[language]}`\r\n                carotenoidTableObject = appendTableDataObject(\r\n                    carotenoidTableObject,\r\n                    language,\r\n                    label,\r\n                    getVitaminOrMineralAmount(carotenoidData.cryptoxanthin, dataSettings),\r\n                    portion,\r\n                    unit,\r\n                    reqString\r\n                )\r\n            }\r\n\r\n            tableData.push(carotenoidTableObject)\r\n        }\r\n    }\r\n\r\n    if (nutrientData.vitaminData.b1 != null) {\r\n        const requirement = makeDietaryRequirementString(vitRequirementData.b1, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_vit_b1[language],\r\n                getVitaminOrMineralAmount(nutrientData.vitaminData.b1, dataSettings),\r\n                portion,\r\n                unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    if (nutrientData.vitaminData.b2 != null) {\r\n        const requirement = makeDietaryRequirementString(vitRequirementData.b2, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_vit_b2[language],\r\n                getVitaminOrMineralAmount(nutrientData.vitaminData.b2, dataSettings),\r\n                portion,\r\n                unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    if (nutrientData.vitaminData.b3 != null) {\r\n        const requirement = makeDietaryRequirementString(vitRequirementData.b3, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_vit_b3[language],\r\n                getVitaminOrMineralAmount(nutrientData.vitaminData.b3, dataSettings),\r\n                portion,\r\n                unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    if (nutrientData.vitaminData.b5 != null) {\r\n        const requirement = makeDietaryRequirementString(vitRequirementData.b5, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_vit_b5[language],\r\n                getVitaminOrMineralAmount(nutrientData.vitaminData.b5, dataSettings),\r\n                portion,\r\n                unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    if (nutrientData.vitaminData.b6 != null) {\r\n        const requirement = makeDietaryRequirementString(vitRequirementData.b6, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_vit_b6[language],\r\n                getVitaminOrMineralAmount(nutrientData.vitaminData.b6, dataSettings),\r\n                portion,\r\n                unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    if (nutrientData.vitaminData.b9 != null) {\r\n        const requirement = makeDietaryRequirementString(vitRequirementData.b9, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_vit_b9[language],\r\n                getVitaminOrMineralAmount(nutrientData.vitaminData.b9, dataSettings),\r\n                portion,\r\n                unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    if (nutrientData.vitaminData.b12 != null) {\r\n        const requirement = makeDietaryRequirementString(vitRequirementData.b12, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_vit_b12[language],\r\n                getVitaminOrMineralAmount(nutrientData.vitaminData.b12, dataSettings),\r\n                portion,\r\n                unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    if (nutrientData.vitaminData.c != null) {\r\n        const requirement = makeDietaryRequirementString(vitRequirementData.c, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_vit_c[language],\r\n                getVitaminOrMineralAmount(nutrientData.vitaminData.c, dataSettings),\r\n                portion,\r\n                unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    if (nutrientData.vitaminData.d != null) {\r\n        const requirement = makeDietaryRequirementString(vitRequirementData.d, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_vit_d[language],\r\n                getVitaminOrMineralAmount(nutrientData.vitaminData.d, dataSettings),\r\n                portion,\r\n                unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    if (nutrientData.vitaminData.e != null) {\r\n        const requirement = makeDietaryRequirementString(vitRequirementData.e, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_vit_e[language],\r\n                getVitaminOrMineralAmount(nutrientData.vitaminData.e, dataSettings),\r\n                portion,\r\n                unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    const {extendedVitaminE} = nutrientData.vitaminData\r\n\r\n    if (nutrientData.vitaminData.e !== null && extendedVitaminE !== null && hasExtendedData(extendedVitaminE)\r\n            && dataSettings.includeProvitamins === OPTION_YES) {\r\n        let totalExtensions = getTotalAmountOfExtendedVitaminE(extendedVitaminE)\r\n\r\n        if (totalExtensions !== null) {\r\n            if(dataSettings.unitVitamins === UNIT_MICROGRAM) {\r\n                totalExtensions *= 1000\r\n            }\r\n\r\n            let reqString = \"\"\r\n            if (vitRequirementData && userData) {\r\n                const requirementVitaminE = determineDailyRequirement(vitRequirementData.e, userData)\r\n                reqString = `${requirementVitaminE} mg Vit. E ≙`\r\n            }\r\n\r\n            let extendedVitaminETable = createTableObject(\r\n                applicationStrings.label_nutrient_vit_e_ext[language],\r\n                totalExtensions,\r\n                portion,\r\n                unit,\r\n                reqString\r\n            )\r\n\r\n            if (extendedVitaminE.tocopherolBeta !== null) {\r\n                let reqString = \"\"\r\n                if (vitRequirementData?.e && userData) {\r\n                    const equivalentVitE = calculateProvitaminEquivalent(\r\n                        vitRequirementData.e,\r\n                        EQ_FACTOR_TOCOPHEROL_BETA,\r\n                        userData,\r\n                        dataSettings\r\n                    )\r\n                    reqString = `... ${applicationStrings.label_prefix_hereof[language]} ${equivalentVitE} ${unit}`\r\n                }\r\n                const label = ` ... ${applicationStrings.label_prefix_hereof[language]} ${applicationStrings.label_nutrient_vit_e_ext_tocopherolBeta[language]}`\r\n                extendedVitaminETable = appendTableDataObject(\r\n                    extendedVitaminETable,\r\n                    language,\r\n                    label,\r\n                    getVitaminOrMineralAmount(extendedVitaminE.tocopherolBeta, dataSettings),\r\n                    portion,\r\n                    unit,\r\n                    reqString\r\n                )\r\n            }\r\n\r\n            if (extendedVitaminE.tocopherolGamma !== null) {\r\n                let reqString = \"\"\r\n                if (vitRequirementData?.e && userData) {\r\n                    const equivalentVitE = calculateProvitaminEquivalent(\r\n                        vitRequirementData.e,\r\n                        EQ_FACTOR_TOCOPHEROL_GAMMA,\r\n                        userData,\r\n                        dataSettings\r\n                    )\r\n                    reqString = `... ${applicationStrings.label_prefix_hereof[language]} ${equivalentVitE} ${unit}`\r\n                }\r\n                const label = ` ... ${applicationStrings.label_prefix_hereof[language]} ${applicationStrings.label_nutrient_vit_e_ext_tocopherolGamma[language]}`\r\n                extendedVitaminETable = appendTableDataObject(\r\n                    extendedVitaminETable,\r\n                    language,\r\n                    label,\r\n                    getVitaminOrMineralAmount(extendedVitaminE.tocopherolGamma, dataSettings),\r\n                    portion,\r\n                    unit,\r\n                    reqString)\r\n            }\r\n\r\n            if (extendedVitaminE.tocopherolDelta !== null) {\r\n                let reqString = \"\"\r\n                if (vitRequirementData?.e && userData) {\r\n                    const equivalentVitE = calculateProvitaminEquivalent(\r\n                        vitRequirementData.e,\r\n                        EQ_FACTOR_TOCOPHEROL_DELTA,\r\n                        userData,\r\n                        dataSettings\r\n                    )\r\n                    reqString = `... ${applicationStrings.label_prefix_hereof[language]} ${equivalentVitE} ${unit}`\r\n                }\r\n                const label = ` ... ${applicationStrings.label_prefix_hereof[language]} ${applicationStrings.label_nutrient_vit_e_ext_tocopherolDelta[language]}`\r\n                extendedVitaminETable = appendTableDataObject(\r\n                    extendedVitaminETable,\r\n                    language,\r\n                    label,\r\n                    getVitaminOrMineralAmount(extendedVitaminE.tocopherolDelta, dataSettings),\r\n                    portion,\r\n                    unit,\r\n                    reqString\r\n                )\r\n            }\r\n\r\n            if (extendedVitaminE.tocotrienolAlpha !== null) {\r\n                let reqString = \"\"\r\n                if (vitRequirementData?.e && userData) {\r\n                    const equivalentVitE = calculateProvitaminEquivalent(\r\n                        vitRequirementData.e,\r\n                        EC_FACTOR_TOCOTRIENOL_ALPHA,\r\n                        userData,\r\n                        dataSettings\r\n                    )\r\n                    reqString = `... ${applicationStrings.label_prefix_hereof[language]} ${equivalentVitE} ${unit}`\r\n                }\r\n                const label = ` ... ${applicationStrings.label_prefix_hereof[language]} ${applicationStrings.label_nutrient_vit_e_ext_tocotrienolAlpha[language]}`\r\n                extendedVitaminETable = appendTableDataObject(\r\n                    extendedVitaminETable,\r\n                    language,\r\n                    label,\r\n                    getVitaminOrMineralAmount(extendedVitaminE.tocotrienolAlpha, dataSettings),\r\n                    portion,\r\n                    unit,\r\n                    reqString\r\n                )\r\n            }\r\n\r\n            if (extendedVitaminE.tocotrienolBeta !== null) {\r\n                let reqString = \"\"\r\n                if (vitRequirementData?.e && userData) {\r\n                    const equivalentVitE = calculateProvitaminEquivalent(\r\n                        vitRequirementData.e,\r\n                        EC_FACTOR_TOCOTRIENOL_BETA,\r\n                        userData,\r\n                        dataSettings\r\n                    )\r\n                    reqString = `... ${applicationStrings.label_prefix_hereof[language]} ${equivalentVitE} ${unit}`\r\n                }\r\n                const label = ` ... ${applicationStrings.label_prefix_hereof[language]} ${applicationStrings.label_nutrient_vit_e_ext_tocotrienolBeta[language]}`\r\n                extendedVitaminETable = appendTableDataObject(\r\n                    extendedVitaminETable,\r\n                    language,\r\n                    label,\r\n                    getVitaminOrMineralAmount(extendedVitaminE.tocotrienolBeta, dataSettings),\r\n                    portion,\r\n                    unit,\r\n                    reqString\r\n                )\r\n            }\r\n\r\n            if (extendedVitaminE.tocotrienolGamma !== null) {\r\n                let reqString = \"\"\r\n                if (vitRequirementData?.e && userData) {\r\n                    const equivalentVitE = calculateProvitaminEquivalent(\r\n                        vitRequirementData.e,\r\n                        EC_FACTOR_TOCOTRIENOL_GAMMA,\r\n                        userData,\r\n                        dataSettings\r\n                    )\r\n                    reqString = `... ${applicationStrings.label_prefix_hereof[language]} ${equivalentVitE} ${unit}`\r\n                }\r\n                const label = ` ... ${applicationStrings.label_prefix_hereof[language]} ${applicationStrings.label_nutrient_vit_e_ext_tocotrienolGamma[language]}`\r\n                extendedVitaminETable = appendTableDataObject(\r\n                    extendedVitaminETable,\r\n                    language,\r\n                    label,\r\n                    getVitaminOrMineralAmount(extendedVitaminE.tocotrienolGamma, dataSettings),\r\n                    portion,\r\n                    unit,\r\n                    reqString\r\n                )\r\n            }\r\n\r\n            tableData.push(extendedVitaminETable)\r\n        }\r\n    }\r\n\r\n    if (nutrientData.vitaminData.k != null) {\r\n        const requirement = makeDietaryRequirementString(vitRequirementData.k, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_vit_k[language],\r\n                getVitaminOrMineralAmount(nutrientData.vitaminData.k, dataSettings),\r\n                portion,\r\n                unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    return tableData;\r\n}\r\n\r\n\r\nexport function createMineralTable(params: TableCalculationParams): Array<FoodTableDataObject> {\r\n    let tableData: Array<FoodTableDataObject> = [];\r\n    const {selectedFoodItem, portion, language, dietaryRequirement, userData, dataSettings} = params\r\n    const minRequirementData = dietaryRequirement?.mineralRequirementData\r\n\r\n    if(!minRequirementData || !userData) {\r\n        throw new Error(\"Mineral Requirement Data or User Data is not available\")\r\n    }\r\n\r\n    const unit = params.dataSettings.unitVitamins === UNIT_MILLIGRAM ? \"mg\" : \"µg\"\r\n\r\n    const firstNutrientData = getNutrientData(selectedFoodItem);\r\n\r\n    if (firstNutrientData.mineralData.calcium != null) {\r\n        const requirement = makeDietaryRequirementString(minRequirementData.calcium, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_min_calcium[language],\r\n                getVitaminOrMineralAmount(firstNutrientData.mineralData.calcium, dataSettings),\r\n                portion,\r\n                unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    if (firstNutrientData.mineralData.iron != null) {\r\n        const requirement = makeDietaryRequirementString(minRequirementData.iron, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_min_iron[language],\r\n                getVitaminOrMineralAmount(firstNutrientData.mineralData.iron, dataSettings),\r\n                portion,\r\n                unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    if (firstNutrientData.mineralData.magnesium != null) {\r\n        const requirement = makeDietaryRequirementString(minRequirementData.magnesium, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_min_magnesium[language],\r\n                getVitaminOrMineralAmount(firstNutrientData.mineralData.magnesium, dataSettings),\r\n                portion,\r\n                unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    if (firstNutrientData.mineralData.phosphorus != null) {\r\n        const requirement = makeDietaryRequirementString(minRequirementData.phosphorus, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_min_phosphorus[language],\r\n                getVitaminOrMineralAmount(firstNutrientData.mineralData.phosphorus, dataSettings),\r\n                portion,\r\n                unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    if (firstNutrientData.mineralData.potassium != null) {\r\n        const requirement = makeDietaryRequirementString(minRequirementData.potassium, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_min_potassium[language],\r\n                getVitaminOrMineralAmount(firstNutrientData.mineralData.potassium, dataSettings),\r\n                portion,\r\n                unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    if (firstNutrientData.mineralData.sodium != null) {\r\n        const requirement = makeDietaryRequirementString(minRequirementData.sodium, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_min_sodium[language],\r\n                getVitaminOrMineralAmount(firstNutrientData.mineralData.sodium, dataSettings),\r\n                portion, unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    if (firstNutrientData.mineralData.zinc != null) {\r\n        const requirement = makeDietaryRequirementString(minRequirementData.zinc, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_min_zinc[language],\r\n                getVitaminOrMineralAmount(firstNutrientData.mineralData.zinc, dataSettings),\r\n                portion,\r\n                unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    if (firstNutrientData.mineralData.copper != null) {\r\n        const requirement = makeDietaryRequirementString(minRequirementData.copper, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_min_copper[language],\r\n                getVitaminOrMineralAmount(firstNutrientData.mineralData.copper, dataSettings),\r\n                portion,\r\n                unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    if (firstNutrientData.mineralData.manganese != null) {\r\n        const requirement = makeDietaryRequirementString(minRequirementData.manganese, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_min_manganese[language],\r\n                getVitaminOrMineralAmount(firstNutrientData.mineralData.manganese, dataSettings),\r\n                portion,\r\n                unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    if (firstNutrientData.mineralData.selenium != null) {\r\n        const requirement = makeDietaryRequirementString(minRequirementData.selenium, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_min_selenium[language],\r\n                getVitaminOrMineralAmount(firstNutrientData.mineralData.selenium, dataSettings),\r\n                portion,\r\n                unit,\r\n                requirement\r\n            )\r\n        );\r\n    }\r\n\r\n    return tableData;\r\n}\r\n\r\n\r\nexport function createLipidsTable(params: TableCalculationParams): Array<FoodTableDataObject> {\r\n    let tableData: Array<FoodTableDataObject> = [];\r\n    const {selectedFoodItem, portion, language} = params\r\n    const firstNutrientData = getNutrientData(selectedFoodItem);\r\n\r\n    if (firstNutrientData.lipidData.saturated != null) {\r\n        tableData.push(createTableObject(\r\n            applicationStrings.label_nutrient_lipids_saturated[language],\r\n            firstNutrientData.lipidData.saturated,\r\n            portion, \"g\")\r\n        );\r\n    }\r\n\r\n    if (firstNutrientData.lipidData.unsaturatedMono != null) {\r\n        tableData.push(createTableObject(\r\n            applicationStrings.label_nutrient_lipids_unsaturated_mono[language],\r\n            firstNutrientData.lipidData.unsaturatedMono,\r\n            portion, \"g\")\r\n        );\r\n    }\r\n\r\n    if (firstNutrientData.lipidData.unsaturatedPoly != null) {\r\n        tableData.push(createTableObject(\r\n            applicationStrings.label_nutrient_lipids_unsaturated_poly[language],\r\n            firstNutrientData.lipidData.unsaturatedPoly,\r\n            portion, \"g\")\r\n        );\r\n    }\r\n\r\n    if (firstNutrientData.lipidData.omegaData) {\r\n        if (firstNutrientData.lipidData.omegaData.omega3 != null) {\r\n            tableData.push(createTableObject(\r\n                ` ... ${applicationStrings.label_prefix_hereof[language]} ${applicationStrings.label_nutrient_lipids_omega3[language]}`,\r\n                firstNutrientData.lipidData.omegaData.omega3,\r\n                portion, \"g\")\r\n            );\r\n        }\r\n\r\n        if (firstNutrientData.lipidData.omegaData.omega6 != null) {\r\n            tableData.push(createTableObject(\r\n                ` ... ${applicationStrings.label_prefix_hereof[language]} ${applicationStrings.label_nutrient_lipids_omega6[language]}`,\r\n                firstNutrientData.lipidData.omegaData.omega6,\r\n                portion, \"g\")\r\n            );\r\n        }\r\n    }\r\n\r\n    if (firstNutrientData.lipidData.transFattyAcids != null) {\r\n        tableData.push(createTableObject(\r\n            applicationStrings.label_nutrient_lipids_transfattyAcids[language],\r\n            firstNutrientData.lipidData.transFattyAcids,\r\n            portion, \"g\")\r\n        );\r\n    }\r\n\r\n    if (firstNutrientData.lipidData.cholesterol != null) {\r\n        tableData.push(createTableObject(\r\n            applicationStrings.label_nutrient_lipids_cholesterol[language],\r\n            firstNutrientData.lipidData.cholesterol,\r\n            portion, \"g\")\r\n        );\r\n    }\r\n\r\n    return tableData;\r\n}\r\n\r\n\r\nexport function createEnergyTable(params: TableCalculationParams): Array<FoodTableDataObject> {\r\n    let tableData: Array<FoodTableDataObject> = [];\r\n    const {selectedFoodItem, portion, language} = params\r\n\r\n    const nutrientData = getNutrientData(selectedFoodItem)\r\n    const energy = nutrientData.baseData.energy !== null ? nutrientData.baseData.energy : 0;\r\n    const energyData = calculateEnergyData(nutrientData.baseData)\r\n\r\n    const energyKj = MathService.round(4.186 * energy, 1)\r\n\r\n    let energyObject = createTableObjectEnergy(\r\n        \"Energie\",\r\n        energy,\r\n        energyKj,\r\n        portion\r\n    );\r\n\r\n    const makeBaseLabel = (key) => {\r\n        return `${applicationStrings.label_prefix_energy_in[language]} ${key}`\r\n    }\r\n\r\n    if(energyData) {\r\n        let label = makeBaseLabel(applicationStrings.label_nutrient_carbohydrates_plural[language])\r\n        const carbEnergy = energyData.carbohydrates + energyData.dietaryFibers\r\n        energyObject = appendTableDataObject(energyObject, language, label, carbEnergy, portion, \"kcal\")\r\n\r\n        label = ` ... ${applicationStrings.label_prefix_hereof_in[language]} ${applicationStrings.label_nutrient_dietaryFibers_plural[language]}`\r\n        energyObject = appendTableDataObject(energyObject, language, label, energyData.dietaryFibers, portion, \"kcal\")\r\n\r\n        label = makeBaseLabel(applicationStrings.label_nutrient_lipids[language])\r\n        energyObject = appendTableDataObject(energyObject, language, label, energyData.fat, portion, \"kcal\")\r\n\r\n        label = makeBaseLabel(applicationStrings.label_nutrient_proteins[language])\r\n        energyObject = appendTableDataObject(energyObject, language, label, energyData.proteins, portion, \"kcal\")\r\n\r\n        if(energyData.alcohol) {\r\n            label = makeBaseLabel(applicationStrings.label_nutrient_alcohol[language])\r\n            energyObject = appendTableDataObject(energyObject, language, label, energyData.alcohol, portion, \"kcal\")\r\n        }\r\n    }\r\n\r\n    tableData.push(energyObject)\r\n\r\n    return tableData;\r\n}\r\n\r\n\r\nexport function createCarbsTable(params: TableCalculationParams): Array<FoodTableDataObject> {\r\n    let tableData: Array<FoodTableDataObject> = [];\r\n    const {selectedFoodItem, portion, language} = params\r\n\r\n    const firstNutrientData = getNutrientData(selectedFoodItem);\r\n    const {carbohydrates, dietaryFibers} = firstNutrientData.baseData\r\n    const {sugar} = firstNutrientData.carbohydrateData\r\n\r\n    if (carbohydrates) {\r\n        const carbObject = makeCarbsTableObject(carbohydrates, sugar, dietaryFibers, portion, language)\r\n        tableData.push(carbObject)\r\n    }\r\n\r\n    if (firstNutrientData.carbohydrateData.glucose != null) {\r\n        tableData.push(createTableObject(\r\n            applicationStrings.label_nutrient_carbohydrates_glucose[language],\r\n            firstNutrientData.carbohydrateData.glucose,\r\n            portion, \"g\")\r\n        );\r\n    }\r\n\r\n    if (firstNutrientData.carbohydrateData.fructose != null) {\r\n        tableData.push(createTableObject(\r\n            applicationStrings.label_nutrient_carbohydrates_fructose[language],\r\n            firstNutrientData.carbohydrateData.fructose,\r\n            portion, \"g\")\r\n        );\r\n    }\r\n\r\n    if (firstNutrientData.carbohydrateData.galactose != null) {\r\n        tableData.push(createTableObject(\r\n            applicationStrings.label_nutrient_carbohydrates_galactose[language],\r\n            firstNutrientData.carbohydrateData.galactose,\r\n            portion, \"g\")\r\n        );\r\n    }\r\n\r\n    if (firstNutrientData.carbohydrateData.sucrose != null) {\r\n        tableData.push(createTableObject(\r\n            applicationStrings.label_nutrient_carbohydrates_sucrose[language],\r\n            firstNutrientData.carbohydrateData.sucrose,\r\n            portion, \"g\")\r\n        );\r\n    }\r\n\r\n    if (firstNutrientData.carbohydrateData.lactose != null) {\r\n        tableData.push(createTableObject(\r\n            applicationStrings.label_nutrient_carbohydrates_lactose[language],\r\n            firstNutrientData.carbohydrateData.lactose,\r\n            portion, \"g\")\r\n        );\r\n    }\r\n\r\n    if (firstNutrientData.carbohydrateData.maltose != null) {\r\n        tableData.push(createTableObject(\r\n            applicationStrings.label_nutrient_carbohydrates_maltose[language],\r\n            firstNutrientData.carbohydrateData.maltose,\r\n            portion, \"g\")\r\n        );\r\n    }\r\n\r\n    if (firstNutrientData.carbohydrateData.starch != null) {\r\n        tableData.push(createTableObject(\r\n            applicationStrings.label_nutrient_carbohydrates_starch[language],\r\n            firstNutrientData.carbohydrateData.starch,\r\n            portion, \"g\")\r\n        );\r\n    }\r\n\r\n    return tableData;\r\n}\r\n\r\n\r\nexport function createProteinTable(params: TableCalculationParams): Array<FoodTableDataObject> {\r\n    let tableData: Array<FoodTableDataObject> = [];\r\n    const {selectedFoodItem, portion, language, dietaryRequirement, userData, dataSettings} = params\r\n    const protRequirementData = dietaryRequirement?.proteinRequirementData ?? null\r\n\r\n    const unit = params.dataSettings.unitProteins === UNIT_MILLIGRAM ? \"mg\" : \"g\"\r\n\r\n    const proteinData = getNutrientData(selectedFoodItem).proteinData;\r\n    if (!proteinData) {\r\n        return tableData;\r\n    }\r\n\r\n    if(!protRequirementData || !userData) {\r\n        throw new Error(\"Protein Requirement Data or User Data is not available\")\r\n    }\r\n\r\n    if (proteinData.tryptophan != null) {\r\n        const requirement = calculateProteinRequirement(protRequirementData.tryptophan, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_proteins_tryptophan[language],\r\n                getProteinAmount(proteinData.tryptophan, dataSettings),\r\n                portion,\r\n                unit,\r\n                protRequirementData ? `${requirement} ${unit}` : \"\"\r\n            )\r\n        );\r\n    }\r\n\r\n    if (proteinData.threonine != null) {\r\n        const requirement = calculateProteinRequirement(protRequirementData.threonine, userData, dataSettings)\r\n        tableData.push(\r\n                createTableObject(\r\n                applicationStrings.label_nutrient_proteins_threonine[language],\r\n                getProteinAmount(proteinData.threonine, dataSettings),\r\n                portion,\r\n                    unit,\r\n                    protRequirementData ? `${requirement} ${unit}` : \"\"\r\n            )\r\n        );\r\n    }\r\n\r\n    if (proteinData.isoleucine != null) {\r\n        const requirement = calculateProteinRequirement(protRequirementData.isoleucine, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_proteins_isoleucine[language],\r\n                getProteinAmount(proteinData.isoleucine, dataSettings),\r\n                portion, unit,\r\n                protRequirementData ? `${requirement} ${unit}` : \"\"\r\n            )\r\n        );\r\n    }\r\n\r\n    if (proteinData.leucine != null) {\r\n        const requirement = calculateProteinRequirement(protRequirementData.leucine, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_proteins_leucine[language],\r\n                getProteinAmount(proteinData.leucine, dataSettings),\r\n                portion, unit,\r\n                protRequirementData ? `${requirement} ${unit}` : \"\"\r\n            )\r\n        );\r\n    }\r\n\r\n    if (proteinData.lysine != null) {\r\n        const requirement = calculateProteinRequirement(protRequirementData.lysine, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_proteins_lysine[language],\r\n                getProteinAmount(proteinData.lysine, dataSettings),\r\n                portion, unit,\r\n                protRequirementData ? `${requirement} ${unit}` : \"\"\r\n            )\r\n        );\r\n    }\r\n\r\n    if (proteinData.methionine != null) {\r\n        const requirement = calculateProteinRequirement(protRequirementData.methionine, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_proteins_methionine[language],\r\n                getProteinAmount(proteinData.methionine, dataSettings),\r\n                portion,\r\n                unit,\r\n                protRequirementData ? `${requirement} ${unit}` : \"\"\r\n            )\r\n        );\r\n    }\r\n\r\n    if (proteinData.cystine != null) {\r\n        const requirement = calculateProteinRequirement(protRequirementData.cystine, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_proteins_cystine[language],\r\n                getProteinAmount(proteinData.cystine, dataSettings),\r\n                portion,\r\n                unit,\r\n                protRequirementData ? `${requirement} ${unit}` : \"\"\r\n            )\r\n        );\r\n    }\r\n\r\n    if (proteinData.phenylalanine != null) {\r\n        const requirement = calculateProteinRequirement(protRequirementData.phenylalanine, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_proteins_phenylalanine[language],\r\n                getProteinAmount(proteinData.phenylalanine, dataSettings),\r\n                portion,\r\n                unit,\r\n                protRequirementData ? `${requirement} ${unit}` : \"\"\r\n            )\r\n        );\r\n    }\r\n\r\n    if (proteinData.tyrosine != null) {\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_proteins_tyrosine[language],\r\n                getProteinAmount(proteinData.tyrosine, dataSettings),\r\n                portion,\r\n                unit,\r\n                \"\"\r\n            )\r\n        );\r\n    }\r\n\r\n    if (proteinData.valine != null) {\r\n        const requirement = calculateProteinRequirement(protRequirementData.valine, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_proteins_valine[language],\r\n                getProteinAmount(proteinData.valine, dataSettings),\r\n                portion,\r\n                unit,\r\n                protRequirementData ? `${requirement} ${unit}` : \"\"\r\n            )\r\n        );\r\n    }\r\n\r\n    if (proteinData.arginine != null) {\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_proteins_arginine[language],\r\n                getProteinAmount(proteinData.arginine, dataSettings),\r\n                portion,\r\n                unit,\r\n                \"\"\r\n            )\r\n        );\r\n    }\r\n\r\n    if (proteinData.histidine != null) {\r\n        const requirement = calculateProteinRequirement(protRequirementData.histidine, userData, dataSettings)\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_proteins_histidine[language],\r\n                getProteinAmount(proteinData.histidine, dataSettings),\r\n                portion,\r\n                unit,\r\n                protRequirementData ? `${requirement} ${unit}` : \"\"\r\n            )\r\n        );\r\n    }\r\n\r\n    if (proteinData.alanine != null) {\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_proteins_alanine[language],\r\n                getProteinAmount(proteinData.alanine, dataSettings),\r\n                portion, unit,\r\n                \"\"\r\n            )\r\n        );\r\n    }\r\n\r\n    if (proteinData.asparticAcid != null) {\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_proteins_asparticAcid[language],\r\n                getProteinAmount(proteinData.asparticAcid, dataSettings),\r\n                portion,\r\n                unit,\r\n                \"\"\r\n            )\r\n        );\r\n    }\r\n\r\n    if (proteinData.glutamicAcid != null) {\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_proteins_glutamicAcid[language],\r\n                getProteinAmount(proteinData.glutamicAcid, dataSettings),\r\n                portion,\r\n                unit,\r\n                \"\"\r\n            )\r\n        );\r\n    }\r\n\r\n    if (proteinData.glycine != null) {\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_proteins_glysine[language],\r\n                getProteinAmount(proteinData.glycine, dataSettings),\r\n                portion,\r\n                unit,\r\n                \"\"\r\n            )\r\n        );\r\n    }\r\n\r\n    if (proteinData.proline != null) {\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_proteins_proline[language],\r\n                getProteinAmount(proteinData.proline, dataSettings),\r\n                portion,\r\n                unit,\r\n                \"\"\r\n            )\r\n        );\r\n    }\r\n\r\n    if (proteinData.serine != null) {\r\n        tableData.push(\r\n            createTableObject(\r\n                applicationStrings.label_nutrient_proteins_serine[language],\r\n                getProteinAmount(proteinData.serine, dataSettings),\r\n                portion,\r\n                unit,\r\n                \"\"\r\n            )\r\n        );\r\n    }\r\n\r\n    return tableData;\r\n}\r\n\r\n\r\nfunction createTableObject(label: string, value_100g: number, portion: number, unit: String, requirement?: string): FoodTableDataObject {\r\n    const valuePortion = calculatePortionData(value_100g, portion);\r\n    return {\r\n        label: label,\r\n        value_100g: `${MathService.autoRound(value_100g)} ${unit}`,\r\n        value_portion: `${MathService.autoRound(valuePortion)} ${unit}`,\r\n        dailyRequirement: requirement ?? \"\"\r\n    }\r\n}\r\n\r\nfunction createTableObjectEnergy(label: string, value_100g_kcal: number, value_100g_kj: number, portion: number): FoodTableDataObject {\r\n    const valuePortionKcal = calculatePortionData(value_100g_kcal, portion);\r\n    const valuePortionKj = calculatePortionData(value_100g_kj, portion);\r\n\r\n    return {\r\n        label: label,\r\n        value_100g: `${MathService.autoRound(value_100g_kcal)} kcal  (${MathService.autoRound(value_100g_kj)} kJ)`,\r\n        value_portion: `${MathService.autoRound(valuePortionKcal)} kcal  (${MathService.autoRound(valuePortionKj)} kJ)`\r\n    }\r\n}\r\n\r\nfunction createTableObjectAlcohol(label: string, value_100g: number, portion: number, unit: String): FoodTableDataObject {\r\n    const valuePortion = calculatePortionData(value_100g, portion);\r\n    if (valuePortion === null) {\r\n        return {\r\n            label: label,\r\n            value_100g: \"n/a\",\r\n            value_portion: \"n/a\",\r\n        }\r\n    }\r\n\r\n    const valueVolume100gram = value_100g * 1.267\r\n\r\n    return {\r\n        label: label,\r\n        value_100g: `${MathService.autoRound(value_100g)} ${unit}   ( = ${MathService.autoRound(valueVolume100gram)} Vol % )`,\r\n        value_portion: `${MathService.autoRound(valuePortion)} ${unit}   ( = ${MathService.autoRound(valueVolume100gram)} Vol % )`\r\n    }\r\n}\r\n\r\n\r\nexport function calculatePortionData(value: number | null, portionSize: number): number | null {\r\n    if (value === null || value === undefined) {\r\n        return null;\r\n    } else if (value === 0) {\r\n        return 0;\r\n    }\r\n    return (value / 100) * portionSize;\r\n}\r\n\r\n\r\nfunction makeCarbsTableObject(carbohydrates: number, sugar: number | null, dietaryFibers: number | null,\r\n                              portion: number, language: string): FoodTableDataObject {\r\n\r\n    // NOTE: Sometimes the sugar or dietary fibers value is above the carbs value, which is impossible (> 100 %)\r\n    if(sugar && (sugar > carbohydrates)) {\r\n        sugar = carbohydrates\r\n    }\r\n    if(dietaryFibers && (dietaryFibers > carbohydrates)) {\r\n        dietaryFibers = carbohydrates\r\n    }\r\n    if(sugar && dietaryFibers && (sugar + dietaryFibers > carbohydrates)) {  // Special case, where sug + fibers are above the 100 %\r\n        sugar = (sugar / (sugar+dietaryFibers)) * carbohydrates\r\n        dietaryFibers = (dietaryFibers / (sugar+dietaryFibers)) * carbohydrates\r\n    }\r\n\r\n    let carbObject = createTableObject(\r\n        applicationStrings.label_nutrient_carbohydrates[language],\r\n        carbohydrates,\r\n        portion, \"g\")\r\n\r\n    if (sugar !== null) {\r\n        const label = ` ... ${applicationStrings.label_prefix_hereof[language]} ${applicationStrings.label_nutrient_sugar[language]}`\r\n        carbObject = appendTableDataObject(carbObject, language, label, sugar, portion, \"g\")\r\n    }\r\n\r\n    if (dietaryFibers !== null) {\r\n        const label = ` ... ${applicationStrings.label_prefix_hereof[language]} ${applicationStrings.label_nutrient_dietaryFibers[language]}`\r\n        carbObject = appendTableDataObject(carbObject, language, label, dietaryFibers, portion, \"g\")\r\n    }\r\n\r\n    return carbObject\r\n}\r\n\r\n\r\nfunction appendTableDataObject(object: FoodTableDataObject, language: string, label: string, value: number,\r\n                               portion: number, unit: string, reqString?: string): FoodTableDataObject {\r\n    const appendedObject = {...object}\r\n    const extension = createTableObject(label, value, portion, unit, reqString)\r\n\r\n    appendedObject.label = appendedObject.label + '&&' + extension.label\r\n    appendedObject.value_100g = appendedObject.value_100g + '&&' + extension.value_100g\r\n    appendedObject.value_portion = appendedObject.value_portion + '&&' + extension.value_portion\r\n\r\n    if (reqString) {\r\n        appendedObject.dailyRequirement = appendedObject.dailyRequirement + '&&' + extension.dailyRequirement\r\n    }\r\n\r\n    return appendedObject\r\n}\r\n\r\nfunction getVitaminOrMineralAmount(amountInMg: number, dataSettings: DataSettings) {\r\n    return dataSettings.unitVitamins === UNIT_MILLIGRAM ? amountInMg : amountInMg * 1000;\r\n}\r\n\r\nfunction getProteinAmount(amountInGram: number, dataSettings: DataSettings) {\r\n    return dataSettings.unitProteins === UNIT_GRAM ? amountInGram : amountInGram * 1000;\r\n}\r\n\r\nfunction makeDietaryRequirementString(requirementData: RequirementData, userData: UserData, dataSettings: DataSettings): string {\r\n    let requirement = determineDailyRequirement(requirementData, userData)\r\n    const unit = dataSettings.unitVitamins === UNIT_MILLIGRAM ? \"mg\" : \"µg\";\r\n    if(dataSettings.unitVitamins === UNIT_MICROGRAM) {\r\n        requirement *= 1000\r\n    }\r\n\r\n    return `${requirement} ${unit}`\r\n}\r\n\r\nfunction calculateProteinRequirement(requirementMg: number, userData: UserData | undefined, dataSettings: DataSettings) {\r\n    if(userData === undefined) {\r\n        return 0\r\n    }\r\n    const requirement = (requirementMg * userData.weight)\r\n    return dataSettings.unitProteins === UNIT_MILLIGRAM ? requirement : autoRound(requirement / 1000)\r\n}\r\n\r\nfunction calculateProvitaminEquivalent(referenceVitaminRequriemtnAmount: RequirementData, equivalenceFactor: number,\r\n                                       userData: UserData, dataSettings: DataSettings): number {\r\n    const requirementVitaminA = determineDailyRequirement(referenceVitaminRequriemtnAmount, userData)\r\n    let equivalentVitA = autoRound(requirementVitaminA / equivalenceFactor)\r\n    if(dataSettings.unitVitamins === UNIT_MICROGRAM) {\r\n        equivalentVitA *= 1000;\r\n    }\r\n    return equivalentVitA\r\n}","import SelectedFoodItem from \"../../types/livedata/SelectedFoodItem\";\r\nimport React, {useContext, useEffect, useState} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport FoodDataPageHeader from \"./FoodDataPageHeader\";\r\nimport {FoodTableDataObject} from \"../../types/livedata/SelectedFoodItemData\";\r\nimport {\r\n    SOURCE_SRLEGACY,\r\n    TAB_BASE_DATA,\r\n    TAB_CARBS_DATA,\r\n    TAB_ENERGY_DATA,\r\n    TAB_LIPIDS_DATA,\r\n    TAB_MINERAL_DATA,\r\n    TAB_PROTEINS_DATA,\r\n    TAB_VITAMIN_DATA\r\n} from \"../../config/Constants\";\r\nimport {\r\n    createBaseDataTable,\r\n    createCarbsTable,\r\n    createEnergyTable,\r\n    createLipidsTable,\r\n    createMineralTable,\r\n    createProteinTable,\r\n    createVitaminTable, TableCalculationParams\r\n} from \"../../service/TableService\";\r\n\r\ninterface FoodDataPageProps {\r\n    selectedFoodItem: SelectedFoodItem,\r\n    dataPage?: string\r\n}\r\n\r\nexport default function FoodDataPage(props: FoodDataPageProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const {language} = useContext(LanguageContext)\r\n\r\n    if(applicationContext === null) {\r\n        throw new Error(\"ApplicationContext is null\")\r\n    }\r\n\r\n    useEffect(() => {\r\n        updatePage()\r\n    }, [applicationContext.dataSettings])\r\n\r\n    const selectedDataTab = applicationContext\r\n        ? applicationContext.applicationData.foodDataPanel.selectedDataPage\r\n        : TAB_BASE_DATA\r\n\r\n    const [tableData, setTableData] = useState<Array<FoodTableDataObject>>([])\r\n\r\n    const updatePage = () => {   // Central update method when any (radio) button was clicked\r\n        let tableDataList: Array<FoodTableDataObject> = [];\r\n        const {portion} = props.selectedFoodItem\r\n\r\n        const preferredSource = applicationContext ? applicationContext.applicationData.preferredSource : SOURCE_SRLEGACY\r\n        const dietaryRequirement = applicationContext?.foodDataCorpus.dietaryRequirements ?? undefined\r\n        const userData = applicationContext?.userData\r\n\r\n        const tableCalculationParams: TableCalculationParams = {\r\n            selectedFoodItem: props.selectedFoodItem,\r\n            portion: portion.amount,\r\n            language: language,\r\n            preferredSource: preferredSource,\r\n            dataSettings: applicationContext.dataSettings\r\n        }\r\n\r\n        const extendedParams = {...tableCalculationParams,\r\n            dietaryRequirement: dietaryRequirement,\r\n            userData: userData\r\n        }\r\n\r\n        if (selectedDataTab === TAB_BASE_DATA) {\r\n            tableDataList = createBaseDataTable(tableCalculationParams);\r\n        } else if (selectedDataTab === TAB_ENERGY_DATA) {\r\n            tableDataList = createEnergyTable(tableCalculationParams);\r\n        } else if (selectedDataTab === TAB_VITAMIN_DATA) {\r\n            tableDataList = createVitaminTable(extendedParams);\r\n        } else if (selectedDataTab === TAB_MINERAL_DATA) {\r\n            tableDataList = createMineralTable(extendedParams);\r\n        } else if (selectedDataTab === TAB_LIPIDS_DATA) {\r\n            tableDataList = createLipidsTable(tableCalculationParams);\r\n        } else if (selectedDataTab === TAB_CARBS_DATA) {\r\n            tableDataList = createCarbsTable(tableCalculationParams);\r\n        } else if (selectedDataTab === TAB_PROTEINS_DATA) {\r\n            tableDataList = createProteinTable(extendedParams);\r\n        }\r\n\r\n        setTableData(tableDataList)\r\n    }\r\n\r\n    useEffect(() => {\r\n            updatePage()\r\n        }, [props.selectedFoodItem,\r\n            applicationContext?.applicationData.preferredSource,\r\n            applicationContext?.applicationData.foodDataPanel.selectedDataPage,\r\n            applicationContext?.applicationData.foodDataPanel.displayMode,\r\n            applicationContext?.userData]\r\n    )\r\n\r\n    if (!applicationContext) {\r\n        return <div/>\r\n    }\r\n\r\n    const onNewDataPage = (datapage: string) => {\r\n        applicationContext.setFoodDataPanelData.setSelectedDataPage(datapage)\r\n        updatePage()\r\n    }\r\n\r\n    const onDisplayModeChange = (newMode: string) => {\r\n        applicationContext.setFoodDataPanelData.setSelectedDisplayMode(newMode)\r\n        updatePage()\r\n    }\r\n\r\n    if (applicationContext.debug) {\r\n        console.log('FoodDataPage: Render, tabledata = ', tableData)\r\n    }\r\n\r\n    return <div>\r\n        <FoodDataPageHeader setDisplayMode={onDisplayModeChange}\r\n                            setDataPage={onNewDataPage}\r\n                            selectedFoodItem={props.selectedFoodItem}\r\n                            tableData={tableData}\r\n        />\r\n    </div>\r\n\r\n}","import NameType from \"../types/nutrientdata/NameType\";\r\nimport SelectedFoodItem from \"../types/livedata/SelectedFoodItem\";\r\nimport {getNameFromFoodNameList} from \"./nutrientdata/NameTypeService\";\r\nimport FoodDataPage from \"../components/fooddatapanel/FoodDataPage\";\r\nimport React from \"react\";\r\n\r\n/**\r\n * Enriches a selected food item by its JSX container to be displayed as a tab in the food data panel\r\n * @param selectedFoodItem The already initialized selected food item\r\n * @param foodNamesList The food names list\r\n * @param language The selected language\r\n */\r\nexport function makeFoodDataPanelComponent(selectedFoodItem: SelectedFoodItem, foodNamesList: Array<NameType>, \r\n\t\tlanguage: string): SelectedFoodItem | null {\r\n    let foodName\r\n    if(selectedFoodItem.foodItem.nameId) {\r\n        foodName = getNameFromFoodNameList(foodNamesList, selectedFoodItem.foodItem.nameId, language)\r\n    } else {\r\n        foodName = selectedFoodItem.title ?? 'Unknown'\r\n    }\r\n\r\n    if (foodName === null) {\r\n        return null\r\n    }\r\n\r\n    selectedFoodItem.component = <FoodDataPage key={`page component ${selectedFoodItem.id}`} selectedFoodItem={selectedFoodItem}/>\r\n    selectedFoodItem.tab = foodName\r\n    selectedFoodItem.id = selectedFoodItem.foodItem.id\r\n\r\n    return selectedFoodItem\r\n}\r\n\r\n/**\r\n * Sets the food data page component on a given food item and returns a new copy of it.\r\n * @param foodItem A copy of a selected food item, containing the JSX Food Data Page component.\r\n */\r\nexport function setFoodDataPageComponent(foodItem: SelectedFoodItem): SelectedFoodItem {\r\n    const component = <FoodDataPage key={`page component ${foodItem.id}`} selectedFoodItem={foodItem}/>\r\n    return {...foodItem, component: component}\r\n}\r\n","import React, {Component, createContext, ReactElement} from \"react\";\r\nimport * as NutrientDataImportService from \"../service/NutrientDataImportService\";\r\nimport FoodDataCorpus from \"../types/nutrientdata/FoodDataCorpus\";\r\nimport SelectedFoodItem from \"../types/livedata/SelectedFoodItem\";\r\nimport {ApplicationData, FoodDataPanelData, RankingPanelData} from \"../types/livedata/ApplicationData\";\r\nimport {\r\n    DISPLAYMODE_CHART, OPTION_YES,\r\n    SOURCE_SRLEGACY,\r\n    TAB_BASE_DATA, UNIT_GRAM,\r\n    UNIT_MILLIGRAM\r\n} from \"../config/Constants\";\r\nimport {UserData} from \"../types/livedata/UserData\";\r\nimport {\r\n    initialChartConfigData,\r\n    initialDirectCompareConfigData, initialJuxtapositionConfigData,\r\n    initialUserDataAge,\r\n    initialUserDataBreastfeeding,\r\n    initialUserDataLeisureSports,\r\n    initialUserDataPalValue,\r\n    initialUserDataPregnant,\r\n    initialUserDataSex,\r\n    initialUserDataSize,\r\n    initialUserDataWeight\r\n} from \"../config/ApplicationSetting\";\r\nimport {getNameFromFoodNameList} from \"../service/nutrientdata/NameTypeService\";\r\nimport NameType from \"../types/nutrientdata/NameType\";\r\nimport {ChartConfigData, DirectCompareChartConfigData, JuxtapositionConfig} from \"../types/livedata/ChartConfigData\";\r\nimport ReactSelectOption from \"../types/ReactSelectOption\";\r\nimport {parseFoodCompareUri} from \"../service/uri/BaseUriService\";\r\nimport {DataSettings} from \"../types/livedata/DataSettings\";\r\nimport {setFoodDataPageComponent} from \"../service/FoodDataPanelService\";\r\nimport {NutrientCondition} from \"../types/livedata/NutrientCondition\";\r\n\r\nexport interface ApplicationDataContext {\r\n    foodDataCorpus: FoodDataCorpus\r\n    applicationData: ApplicationData\r\n    userData: UserData\r\n    dataSettings: DataSettings,\r\n    debug: boolean\r\n    ready: boolean\r\n    useAsMobile: Boolean | null\r\n}\r\n\r\nexport interface ApplicationContext extends ApplicationDataContext {\r\n    setUserData: (userData: UserData) => void\r\n    setDataSettings: (dataSettings: DataSettings) => void\r\n    setPreferredSource: (string) => void\r\n    setMobileUsage: (boolean) => void\r\n    setFoodSelectorConfig: (selectedCategory: ReactSelectOption | null, sourceSupplement: boolean, sourceCombine: boolean) => void\r\n    setDirectCompareFoodSelector1: (sourceSupplement: boolean, sourceCombine: boolean) => void\r\n    setDirectCompareFoodSelector2: (sourceSupplement: boolean, sourceCombine: boolean) => void\r\n    setFoodDataPanelData: {\r\n        setCompleteData: (FoodDataPanelData) => void\r\n        setSelectedFoodTab: (number) => void\r\n        setSelectedDataPage: (string) => void\r\n        setSelectedDisplayMode: (string) => void\r\n        addItemToFoodDataPanel: (selectedFoodItem: SelectedFoodItem) => void\r\n        setItemOfFoodDataPanel: (selectedFoodItem: SelectedFoodItem, index: number) => void\r\n        removeItemFromFoodDataPanel: (number) => void\r\n        removeAllItemsFromFoodDataPanel: () => void\r\n        updateAllFoodItemNames: (foodNames: Array<NameType>, newLanguage: string) => void\r\n        updateFoodDataPanelChartConfig: (chartConfig: ChartConfigData) => void\r\n        updateJuxtapositionConfig: (juxtapositionConfig: JuxtapositionConfig) => void\r\n    }\r\n    setDirectCompareData: {\r\n        updateDirectCompareChartConfig: (chartConfig: DirectCompareChartConfigData) => void\r\n        setSelectedDirectCompareItems: (selectedFoodItem1: SelectedFoodItem, selectedFoodItem2: SelectedFoodItem) => void\r\n        setSelectedDirectCompareDataPage: (selectedPage: string) => void\r\n    }\r\n    setRankingPanelData: (RankingPanelData) => void\r\n    setNutrientFilter: (nutrientFilter: Array<NutrientCondition>) => void\r\n}\r\n\r\nexport const ApplicationDataContextStore = createContext<ApplicationContext | null>(null)\r\n\r\nexport default class ApplicationDataContextProvider extends Component<any, ApplicationDataContext> {\r\n    setDebugState = (debug: boolean) => {\r\n        this.setState(prevState => ({\r\n            applicationData: {\r\n                ...prevState.applicationData,\r\n                    debug: debug\r\n            }\r\n        }))\r\n    }\r\n\r\n    setSelectedFoodDataPanelTab = (selectedTab: number) => {\r\n        this.setState(prevState => ({\r\n            applicationData: {\r\n                ...prevState.applicationData,\r\n                foodDataPanel: {...prevState.applicationData.foodDataPanel, selectedFoodItemIndex: selectedTab}\r\n            }\r\n        }))\r\n    }\r\n\r\n    setSelectedDisplayMode = (displayMode: string) => {\r\n        this.setState(prevState => ({\r\n            applicationData: {\r\n                ...prevState.applicationData,\r\n                foodDataPanel: {...prevState.applicationData.foodDataPanel, displayMode: displayMode}\r\n            }\r\n        }))\r\n    }\r\n\r\n    setSelectedFoodDataPanelPage = (selectedPage: string) => {\r\n        this.setState(prevState => ({\r\n            applicationData: {\r\n                ...prevState.applicationData,\r\n                foodDataPanel: {...prevState.applicationData.foodDataPanel, selectedDataPage: selectedPage}\r\n            }\r\n        }))\r\n    }\r\n\r\n    addItemToFoodDataPanel = (foodItem: SelectedFoodItem) => {\r\n        const newItems = Object.assign(this.state.applicationData.foodDataPanel.selectedFoodItems)\r\n        newItems.push(foodItem)\r\n        this.setState(prevState => ({\r\n            applicationData: {\r\n                ...prevState.applicationData,\r\n                foodDataPanel: {...prevState.applicationData.foodDataPanel, selectedFoodItems: newItems}\r\n            }\r\n        }))\r\n    }\r\n\r\n    setItemOfFoodDataPanel = (updatedSelectedFoodItem: SelectedFoodItem, selectedIndex: number) => {\r\n        const updatedItems = this.state.applicationData.foodDataPanel.selectedFoodItems.map((item, index) => {\r\n                if(selectedIndex === index) {\r\n                    const updatedElement = {...item,\r\n                        portion: updatedSelectedFoodItem.portion,\r\n                        selectedSource: updatedSelectedFoodItem.selectedSource,\r\n                        supplementData: updatedSelectedFoodItem.supplementData,\r\n                        combineData: updatedSelectedFoodItem.combineData,\r\n                        compositeSubElements: updatedSelectedFoodItem.compositeSubElements\r\n                    }\r\n\r\n                    // Need to make a new instance of the component on the food item, as it also contains an instance of selected food item\r\n                    return setFoodDataPageComponent(updatedElement)\r\n                } else {\r\n                    return item\r\n                }\r\n            }\r\n        )\r\n\r\n        this.setState(prevState => ({\r\n            applicationData: {\r\n                ...prevState.applicationData,\r\n                foodDataPanel: {...prevState.applicationData.foodDataPanel, selectedFoodItems: updatedItems}\r\n            }\r\n        }))\r\n    }\r\n\r\n    setCompleteFoodDataPanel = (foodDataPanelData: FoodDataPanelData) => {\r\n        this.setState(prevState => ({\r\n            applicationData: {\r\n                ...prevState.applicationData,\r\n                foodDataPanel: foodDataPanelData\r\n            }\r\n        }))\r\n    }\r\n\r\n    removeItemFromFoodDataPanel = (foodItemId: number) => {\r\n        const newItems = this.state.applicationData.foodDataPanel.selectedFoodItems.filter(\r\n            selectedFoodItem => selectedFoodItem.foodItem.id !== foodItemId\r\n        )\r\n\r\n        let newIndex = 0\r\n        let currentIndex = this.state.applicationData.foodDataPanel.selectedFoodItemIndex\r\n\r\n        if (newItems.length > 0) {\r\n            if (currentIndex < newItems.length) {\r\n                newIndex = currentIndex\r\n            } else {\r\n                newIndex = newItems.length - 1\r\n            }\r\n        }\r\n\r\n        this.setState(prevState => ({\r\n            applicationData: {\r\n                ...prevState.applicationData,\r\n                foodDataPanel: {\r\n                    ...prevState.applicationData.foodDataPanel,\r\n                    selectedFoodItems: newItems,\r\n                    selectedFoodItemIndex: newIndex\r\n                }\r\n            }\r\n        }))\r\n    }\r\n\r\n    removeAllItemsFromFoodDataPanel = () => {\r\n        this.setState(prevState => ({\r\n            applicationData: {\r\n                ...prevState.applicationData,\r\n                foodDataPanel: {\r\n                    ...prevState.applicationData.foodDataPanel,\r\n                    selectedFoodItems: [],\r\n                    selectedFoodItemIndex: 0\r\n                }\r\n            }\r\n        }))\r\n    }\r\n\r\n    updateAllFoodItemNames = (foodNames: Array<NameType>, newLanguage: string) => {\r\n        const selectedFoodItems = this.state.applicationData.foodDataPanel.selectedFoodItems\r\n        const newFoodItems = selectedFoodItems.map(selectedFoodItem => {\r\n            const foodName = selectedFoodItem.foodItem.nameId\r\n                ? getNameFromFoodNameList(foodNames, selectedFoodItem.foodItem.nameId, newLanguage)\r\n                : \"Individual\"\r\n            if (foodName) {\r\n                selectedFoodItem = {...selectedFoodItem, tab: foodName}\r\n            }\r\n            return selectedFoodItem\r\n        })\r\n\r\n        this.setState(prevState => ({\r\n            applicationData: {\r\n                ...prevState.applicationData,\r\n                foodDataPanel: {\r\n                    ...prevState.applicationData.foodDataPanel,\r\n                    selectedFoodItems: newFoodItems,\r\n                }\r\n            }\r\n        }))\r\n    }\r\n\r\n    updateFoodDataPanelChartConfig = (chartConfig: ChartConfigData) => {\r\n        this.setState(prevState => ({\r\n            applicationData: {\r\n                ...prevState.applicationData,\r\n                foodDataPanel: {\r\n                    ...prevState.applicationData.foodDataPanel,\r\n                    chartConfigData: chartConfig\r\n                }\r\n            }\r\n        }))\r\n    }\r\n\r\n    updateJuxtaPositionConfig = (juxtapositionConfigData: JuxtapositionConfig) => {\r\n        this.setState(prevState => ({\r\n            applicationData: {\r\n                ...prevState.applicationData,\r\n                foodDataPanel: {\r\n                    ...prevState.applicationData.foodDataPanel,\r\n                    juxtapositionConfigData: juxtapositionConfigData\r\n                }\r\n            }\r\n        }))\r\n    }\r\n\r\n\r\n    setSelectedDirectCompareItems = (selectedFoodItem1: SelectedFoodItem, selectedFoodItem2: SelectedFoodItem) => {\r\n        this.setState(prevState => ({\r\n            applicationData: {\r\n                ...prevState.applicationData,\r\n                directCompareDataPanel: {\r\n                    ...prevState.applicationData.directCompareDataPanel,\r\n                    selectedFoodItem1: selectedFoodItem1,\r\n                    selectedFoodItem2: selectedFoodItem2\r\n                }\r\n            }\r\n        }))\r\n    }\r\n\r\n    setSelectedDirectCompareDataPage = (selectedPage: string) => {\r\n        this.setState(prevState => ({\r\n            applicationData: {\r\n                ...prevState.applicationData,\r\n                directCompareDataPanel: {\r\n                    ...prevState.applicationData.directCompareDataPanel,\r\n                    selectedDataPage: selectedPage\r\n                }\r\n            }\r\n        }))\r\n    }\r\n\r\n    updateDirectCompareChartConfig = (chartConfig: DirectCompareChartConfigData) => {\r\n        this.setState(prevState => ({\r\n            applicationData: {\r\n                ...prevState.applicationData,\r\n                directCompareDataPanel: {\r\n                    ...this.state.applicationData.directCompareDataPanel,\r\n                    directCompareConfigChart: chartConfig\r\n                }\r\n            }\r\n        }))\r\n    }\r\n\r\n    setUserData = (userData: UserData) => {\r\n        this.setState(() => ({\r\n            userData: {\r\n                ...userData\r\n            }\r\n        }))\r\n    }\r\n\r\n    setFoodDataPanelData = (foodDataPanelData: FoodDataPanelData) => {\r\n        this.setState( ()=> ({\r\n            applicationData: {...this.state.applicationData, foodDataPanel: foodDataPanelData}\r\n        }))\r\n    }\r\n\r\n    setDataSettings = (dataSettings: DataSettings) => {\r\n        this.setState(() => ({\r\n            dataSettings: {\r\n                ...dataSettings\r\n            }\r\n        }))\r\n    }\r\n\r\n    setPreferredSource = (source: string) => {\r\n        this.setState(prevState => ({\r\n            applicationData: {\r\n                ...prevState.applicationData, preferredSource: source\r\n            }\r\n        }))\r\n    }\r\n\r\n    setFoodSelectorConfig = (selectedCategory: ReactSelectOption | null, sourceSupplement: boolean, sourceCombine: boolean) => {\r\n        this.setState(prevState => ({\r\n                applicationData: {\r\n                    ...prevState.applicationData, foodSelector: {\r\n                        ...prevState.applicationData.foodSelector,\r\n                        selectedCategory: selectedCategory,\r\n                        sourceSupplement: sourceSupplement,\r\n                        sourceCombine: sourceCombine\r\n                    }\r\n                }\r\n            }\r\n        ))\r\n    }\r\n\r\n    setDirectCompareFoodSelectorConfig1 = (sourceSupplement: boolean, sourceCombine: boolean) => {\r\n        this.setState(prevState => ({\r\n                applicationData: {\r\n                    ...prevState.applicationData, directCompareDataPanel: {\r\n                        ...prevState.applicationData.directCompareDataPanel,\r\n                        foodSelector1: {\r\n                            sourceSupplement: sourceSupplement,\r\n                            sourceCombine: sourceCombine\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        ))\r\n    }\r\n\r\n    setDirectCompareFoodSelectorConfig2 = (sourceSupplement: boolean, sourceCombine: boolean) => {\r\n        this.setState(prevState => ({\r\n                applicationData: {\r\n                    ...prevState.applicationData, directCompareDataPanel: {\r\n                        ...prevState.applicationData.directCompareDataPanel,\r\n                        foodSelector2: {\r\n                            sourceSupplement: sourceSupplement,\r\n                            sourceCombine: sourceCombine\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        ))\r\n    }\r\n\r\n    setRankingPanelData = (rankingPanelData: RankingPanelData): void => {\r\n        this.setState(prevState => ({\r\n                applicationData: {\r\n                    ...prevState.applicationData, rankingPanelData: rankingPanelData\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    setNutrientFilter = (nutrientFilter: Array<NutrientCondition>): void => {\r\n        this.setState(prevState => ({\r\n                applicationData: {\r\n                    ...prevState.applicationData, nutrientFilter: nutrientFilter\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    isDebugMode(): boolean {\r\n        const uriData: string | null = parseFoodCompareUri()\r\n        return !(uriData !== \"test\" && uriData !== \"debug\")\r\n    }\r\n\r\n    state: ApplicationDataContext = {\r\n        foodDataCorpus: {\r\n            categories: [],\r\n            conditions: [],\r\n            portionTypes: [],\r\n            sources: [],\r\n            foodNames: [],\r\n            foodClasses: [],\r\n            foodItems: [],\r\n            dietaryRequirements: null,\r\n        },\r\n        applicationData: {\r\n            foodDataPanel: {\r\n                selectedFoodItems: [],\r\n                selectedDataPage: TAB_BASE_DATA,\r\n                displayMode: DISPLAYMODE_CHART,\r\n                selectedFoodItemIndex: 0,\r\n                chartConfigData: initialChartConfigData,\r\n                juxtapositionConfigData: initialJuxtapositionConfigData\r\n            },\r\n            directCompareDataPanel: {\r\n                selectedFoodItem1: null,\r\n                selectedFoodItem2: null,\r\n                selectedDataPage: TAB_BASE_DATA,\r\n                directCompareConfigChart: initialDirectCompareConfigData,\r\n                foodSelector1: {\r\n                    sourceSupplement: true,\r\n                    sourceCombine: false\r\n                },\r\n                foodSelector2: {\r\n                    sourceSupplement: true,\r\n                    sourceCombine: false\r\n                }\r\n            },\r\n            rankingPanelData: {\r\n                selectedFoodCategory: null,\r\n                selectedGroup: null,\r\n                selectedElement: null,\r\n                use100gram: true,\r\n                showDietaryRequirements: false\r\n            },\r\n            foodSelector: {\r\n                selectedCategory: null,\r\n                sourceSupplement: true,\r\n                sourceCombine: false,\r\n            },\r\n            preferredSource: SOURCE_SRLEGACY,\r\n            nutrientFilter: []\r\n        },\r\n        userData: {\r\n            age: initialUserDataAge,\r\n            size: initialUserDataSize,\r\n            weight: initialUserDataWeight,\r\n            sex: initialUserDataSex,\r\n            pregnant: initialUserDataPregnant,\r\n            breastFeeding: initialUserDataBreastfeeding,\r\n            palValue: initialUserDataPalValue,\r\n            leisureSports: initialUserDataLeisureSports,\r\n            initialValues: true\r\n        },\r\n        dataSettings: {\r\n          unitVitamins: UNIT_MILLIGRAM,\r\n          unitProteins: UNIT_GRAM,\r\n          includeProvitamins: OPTION_YES\r\n        },\r\n        debug: this.isDebugMode(),\r\n        ready: false,\r\n        useAsMobile: null\r\n    }\r\n\r\n    UNSAFE_componentWillMount() {\r\n        const foodDataCorpus = NutrientDataImportService.loadFoodDataCorpus()\r\n        this.setState({\r\n            foodDataCorpus: foodDataCorpus,\r\n            ready: true\r\n        })\r\n    }\r\n\r\n    render(): ReactElement {\r\n        const value = {\r\n            applicationData: this.state.applicationData,\r\n            foodDataCorpus: this.state.foodDataCorpus,\r\n            userData: this.state.userData,\r\n            dataSettings: this.state.dataSettings,\r\n            debug: this.state.debug,\r\n            ready: this.state.ready,\r\n            useAsMobile: this.state.useAsMobile,\r\n            setUserData: this.setUserData,\r\n            setDataSettings: this.setDataSettings,\r\n            setPreferredSource: this.setPreferredSource,\r\n            setMobileUsage: (usage: boolean) => {\r\n                this.setState({...this.state, useAsMobile: usage})\r\n            },\r\n            setFoodDataPanelData: {\r\n                setCompleteData: this.setCompleteFoodDataPanel,\r\n                setSelectedFoodTab: this.setSelectedFoodDataPanelTab,\r\n                setSelectedDataPage: this.setSelectedFoodDataPanelPage,\r\n                setSelectedDisplayMode: this.setSelectedDisplayMode,\r\n                addItemToFoodDataPanel: this.addItemToFoodDataPanel,\r\n                setItemOfFoodDataPanel: this.setItemOfFoodDataPanel,\r\n                removeItemFromFoodDataPanel: this.removeItemFromFoodDataPanel,\r\n                removeAllItemsFromFoodDataPanel: this.removeAllItemsFromFoodDataPanel,\r\n                updateAllFoodItemNames: this.updateAllFoodItemNames,\r\n                updateFoodDataPanelChartConfig: this.updateFoodDataPanelChartConfig,\r\n                updateJuxtapositionConfig: this.updateJuxtaPositionConfig\r\n            },\r\n            setDirectCompareData: {\r\n                updateDirectCompareChartConfig: this.updateDirectCompareChartConfig,\r\n                setSelectedDirectCompareDataPage: this.setSelectedDirectCompareDataPage,\r\n                setSelectedDirectCompareItems: this.setSelectedDirectCompareItems\r\n            },\r\n            setFoodSelectorConfig: this.setFoodSelectorConfig,\r\n            setRankingPanelData: this.setRankingPanelData,\r\n            setDirectCompareFoodSelector1: this.setDirectCompareFoodSelectorConfig1,\r\n            setDirectCompareFoodSelector2: this.setDirectCompareFoodSelectorConfig2,\r\n            setNutrientFilter: this.setNutrientFilter\r\n        }\r\n\r\n        return (\r\n            <ApplicationDataContextStore.Provider value={value}>\r\n                {this.props.children}\r\n            </ApplicationDataContextStore.Provider>\r\n        )\r\n    }\r\n\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.9db91515.png\";","export default __webpack_public_path__ + \"static/media/text.1276973d.png\";","import logo from '../static/image/logo.png'\r\nimport text from '../static/image/text.png'\r\nimport {Button, Form} from \"react-bootstrap\";\r\nimport {\r\n    LANGUAGE_DE,\r\n    LANGUAGE_EN,\r\n    PATH_FOODDATA_PANEL,\r\n    PATH_HOME,\r\n    PATH_CONTACT,\r\n    PATH_USERSETTINGS,\r\n    PATH_DIRECT_COMPARE,\r\n    PATH_FOODCOMPARE,\r\n    SOURCE_SRLEGACY,\r\n    PATH_RANKING,\r\n    SOURCE_FNDDS, PATH_INFO\r\n} from \"../config/Constants\";\r\nimport React, {useContext} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../contexts/ApplicationDataContext\";\r\nimport {applicationStrings} from \"../static/labels\";\r\nimport {LanguageContext} from \"../contexts/LangContext\";\r\nimport {Link} from 'react-router-dom';\r\nimport {useLocation} from 'react-router-dom';\r\nimport {isMobileDevice} from \"../service/WindowDimension\";\r\n\r\n\r\nexport default function Header() {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const {language, userLanguageChange} = useContext(LanguageContext)\r\n    const location = useLocation();\r\n\r\n    if (applicationContext === null) {\r\n        return <div/>\r\n    }\r\n\r\n    const handleLanguageButtonClick = (event: any): void => {\r\n        userLanguageChange(event.target.value)\r\n        applicationContext.setFoodDataPanelData.updateAllFoodItemNames(applicationContext.foodDataCorpus.foodNames, event.target.value)\r\n    }\r\n\r\n    const handleSourceButtonClick = (event: any): void => {\r\n        applicationContext.setPreferredSource(event.target.value)\r\n    }\r\n\r\n    let activePath = location.pathname && location.pathname !== \"/\" ? location.pathname : PATH_HOME\r\n    if (activePath.endsWith(\"/\") && activePath.length > 1) {\r\n        activePath = activePath.substring(0, activePath.length - 1)\r\n    }\r\n\r\n    if (applicationContext.debug) {\r\n        console.log('Path:', activePath)\r\n    }\r\n\r\n    const renderMenus = () => {\r\n        const menuNameAnalyze = isMobileDevice() ? applicationStrings.menu_food_data_panel_m[language] : applicationStrings.menu_food_data_panel[language]\r\n        const menuNameDirectCompare = isMobileDevice() ? applicationStrings.menu_direct_compare_m[language] : applicationStrings.menu_direct_compare[language]\r\n        const menuNameRanking = isMobileDevice() ? applicationStrings.menu_ranking_m[language] : applicationStrings.menu_ranking[language]\r\n        const menuNameSettings = isMobileDevice() ? applicationStrings.menu_settings_m[language] : applicationStrings.menu_settings[language]\r\n\r\n        const buttonContainerClass = isMobileDevice() ? \"link header-link-mobile\" : \"link header-link\"\r\n\r\n        return (\r\n            <div className={\"btn-group flex flex-wrap\"}>\r\n                <Link to={PATH_HOME}>\r\n                    <Button className={buttonContainerClass}\r\n                            value={PATH_HOME}\r\n                            variant={'link'}\r\n                            active={activePath === PATH_HOME || activePath === PATH_FOODCOMPARE}>\r\n                        {applicationStrings.menu_home[language]}\r\n                    </Button>\r\n                </Link>\r\n                <Link to={PATH_FOODDATA_PANEL}>\r\n                    <Button className={buttonContainerClass}\r\n                            value={PATH_FOODDATA_PANEL}\r\n                            variant={'link'}\r\n                            active={activePath === PATH_FOODDATA_PANEL}>\r\n                        {menuNameAnalyze}\r\n                    </Button>\r\n                </Link>\r\n                {!isMobileDevice() &&\r\n                <Link to={PATH_DIRECT_COMPARE}>\r\n                    <Button className={buttonContainerClass}\r\n                            value={PATH_DIRECT_COMPARE}\r\n                            variant={'link'}\r\n                            active={activePath === PATH_DIRECT_COMPARE}>\r\n                        {menuNameDirectCompare}\r\n                    </Button>\r\n                </Link>\r\n                }\r\n                <Link to={PATH_RANKING}>\r\n                    <Button className={buttonContainerClass}\r\n                            value={PATH_RANKING}\r\n                            variant={'link'}\r\n                            active={activePath === PATH_RANKING}>\r\n                        {menuNameRanking}\r\n                    </Button>\r\n                </Link>\r\n                <Link to={PATH_USERSETTINGS}>\r\n                    <Button className={buttonContainerClass}\r\n                            value={PATH_USERSETTINGS}\r\n                            variant={'link'}\r\n                            active={activePath === PATH_USERSETTINGS}>\r\n                        {menuNameSettings}\r\n                    </Button>\r\n                </Link>\r\n                <Link to={PATH_INFO}>\r\n                    <Button className={buttonContainerClass}\r\n                            variant={'link'}\r\n                            value={PATH_INFO}\r\n                            active={activePath === PATH_INFO}>\r\n                        {applicationStrings.menu_info[language]}\r\n                    </Button>\r\n                </Link>\r\n                <Link to={PATH_CONTACT}>\r\n                    <Button className={buttonContainerClass}\r\n                            variant={'link'}\r\n                            value={PATH_CONTACT}\r\n                            active={activePath === PATH_CONTACT}>\r\n                        {applicationStrings.menu_contact[language]}\r\n                    </Button>\r\n                </Link>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const language_en = isMobileDevice() ? applicationStrings.checkbox_english_m[language] : applicationStrings.checkbox_english[language]\r\n    const language_de = isMobileDevice() ? applicationStrings.checkbox_german_m[language] : applicationStrings.checkbox_german[language]\r\n\r\n    const labelClass = isMobileDevice() ? \"header-form-label-m\" : \"header-form-label\"\r\n\r\n    const renderLanguageButtons = () => {\r\n        return (\r\n            <div className=\"header-form\" style={{paddingRight: \"1vw\"}}>\r\n                <span className={labelClass}>\r\n                    {applicationStrings.label_language[language]}:\r\n                </span>\r\n                <Form.Check inline={true}\r\n                            className=\"form-radiobutton\"\r\n                            label={language_en}\r\n                            type=\"radio\"\r\n                            value={LANGUAGE_EN}\r\n                            checked={language === LANGUAGE_EN}\r\n                            onChange={handleLanguageButtonClick}>\r\n                </Form.Check>\r\n                <Form.Check inline={true}\r\n                            className=\"form-radiobutton\"\r\n                            label={language_de}\r\n                            type=\"radio\"\r\n                            value={LANGUAGE_DE}\r\n                            checked={language === LANGUAGE_DE}\r\n                            onChange={handleLanguageButtonClick}>\r\n                </Form.Check>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    const renderSourceButtons = () => {\r\n        const preferredSource = applicationContext.applicationData.preferredSource\r\n\r\n        return (\r\n            <div className=\"header-form text-right\" style={{paddingRight: \"1vw\"}}>\r\n                <span className=\"header-form-label\">\r\n                    {applicationStrings.label_preferred_source[language]}:\r\n                </span>\r\n                <Form.Check inline={true}\r\n                            className=\"form-radiobutton\"\r\n                            label={\"SR Legacy\"}\r\n                            type=\"radio\"\r\n                            value={SOURCE_SRLEGACY}\r\n                            checked={preferredSource === SOURCE_SRLEGACY}\r\n                            onChange={handleSourceButtonClick}>\r\n                </Form.Check>\r\n                <Form.Check inline={true}\r\n                            className=\"form-radiobutton\"\r\n                            label={\"FNDDS (Survey)\"}\r\n                            type=\"radio\"\r\n                            value={SOURCE_FNDDS}\r\n                            checked={preferredSource === SOURCE_FNDDS}\r\n                            onChange={handleSourceButtonClick}>\r\n                </Form.Check>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const headerClass = isMobileDevice() ? \"header-m\" : \"header\"\r\n\r\n    return (\r\n        <div className={`d-flex flex-row ${headerClass}`}>\r\n            <img src={logo} className=\"header-logo\" alt={\"Food Compare Logo\"}/>\r\n            <div className={\"d-flex flex-column w-100\"} style={{paddingTop: \"0.8vh\", paddingLeft: \"0.2vw\"}}>\r\n                <div className=\"d-flex flex-row align-items-center justify-content-between\">\r\n                    <div>\r\n                        <img src={text} className=\"header-logo-text\" alt={\"Food Compare Logo Text\"}/>\r\n                    </div>\r\n                    <div className=\"d-flex flex-row justify-content-end\">\r\n                        {!isMobileDevice() &&\r\n                        renderSourceButtons()\r\n                        }\r\n                        {renderLanguageButtons()}\r\n                    </div>\r\n                </div>\r\n                <div className=\"d-flex flex-row align-items-end\" style={{height: \"100%\"}}>\r\n                    <div className=\"flex-column text-start\">\r\n                        {renderMenus()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}","import React, {useContext, useState} from \"react\";\r\nimport {LanguageContext} from \"../contexts/LangContext\";\r\nimport {Carousel} from 'react-responsive-carousel';\r\nimport {applicationStrings} from \"../static/labels\";\r\n\r\nimport homeText1 from \"../static/hometext1.json\";\r\nimport {FaExternalLinkAlt} from \"react-icons/fa\";\r\n\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport {\r\n    PATH_DIRECT_COMPARE,\r\n    PATH_FOODDATA_PANEL, PATH_INFO,\r\n    PATH_RANKING\r\n} from \"../config/Constants\";\r\nimport {isMobileDevice} from \"../service/WindowDimension\";\r\n\r\nconst carouselImages = require.context('../static/image/carousel-samples', true);\r\nconst startButtonImages = require.context('../static/image/start-buttons', true);\r\n\r\nconst startImg1 = startButtonImages(`./StartImg1.jpg`).default\r\nconst startImg2 = startButtonImages(`./StartImg2.jpg`).default\r\nconst startImg3 = startButtonImages(`./StartImg3.jpg`).default\r\nconst startImg4 = startButtonImages(`./StartImg4.jpg`).default\r\n\r\n\r\n/**\r\n * Home component (not including Header or Info page).\r\n * @constructor\r\n */\r\nexport function Home() {\r\n    const {language} = useContext(LanguageContext)\r\n    const [displayedImage, setDisplayedImage] = useState<number>(0)\r\n    const history = useHistory()\r\n\r\n    const imageChanged = (image) => {\r\n        setDisplayedImage(image)\r\n    }\r\n\r\n    const onClickCarouselImage = (index: number) => {\r\n        let route: string | null = null;\r\n\r\n        switch (index) {\r\n            case 0:\r\n                route = \"datapanel?item=1;0;102_169;10;vitamindata;dct;075035175031000;01000000\";\r\n                break;\r\n            case 1:\r\n                route = \"directcompare?item=124;0;200_136;10;123;0;202_167;10;vitamindata;075035175031000;02000001\"\r\n                break;\r\n            case 2:\r\n                route = \"ranking?ranking=0;2;d_magnesium;11\"\r\n                break;\r\n            case 3:\r\n                route = \"datapanel?item=63;0;300_180;10;juxtaposition;dct;075035175031000;00000000&group=2\"\r\n                break;\r\n            case 4:\r\n                route = `${PATH_FOODDATA_PANEL}?composite=1`\r\n                break;\r\n            case 5:\r\n                route = \"directcompare?item=159;0;999_100;10;194;0;999_150;10;lipidsdata;075035175031000;10000030\"\r\n                break;\r\n        }\r\n\r\n        if (route) {\r\n            history.push(route);\r\n        }\r\n    }\r\n\r\n    const renderCarousel = () => {\r\n        const pic1 = carouselImages(`./img-1-${language}.png`).default;\r\n        const pic2 = carouselImages(`./img-2-${language}.png`).default;\r\n        const pic3 = carouselImages(`./img-3-${language}.png`).default;\r\n        const pic4 = carouselImages(`./img-4-${language}.png`).default;\r\n        const pic5 = carouselImages(`./img-5-${language}.png`).default;\r\n        const pic6 = carouselImages(`./img-6-${language}.png`).default;\r\n\r\n        const captionAttribute = `home_carousel_${displayedImage}`;\r\n        const imageCaption = applicationStrings[captionAttribute][language];\r\n\r\n        return (\r\n            <div style={{height: \"60%\"}}>\r\n                <Carousel className={\"home-header-carousel\"}\r\n                          showArrows={false}\r\n                          infiniteLoop={true}\r\n                          autoPlay={true}\r\n                          interval={8000}\r\n                          transitionTime={1000}\r\n                          selectedItem={displayedImage}\r\n                          showThumbs={false}\r\n                          showStatus={false}\r\n                          showIndicators={false}\r\n                          onClickItem={onClickCarouselImage}\r\n                          onChange={imageChanged}>\r\n                    <img src={pic1} alt={\"Carousel 1\"}/>\r\n                    <div>\r\n                        <img src={pic2} alt={\"Carousel 2\"}/>\r\n                    </div>\r\n                    <div>\r\n                        <img src={pic3} alt={\"Carousel 3\"}/>\r\n                    </div>\r\n                    <div>\r\n                        <img src={pic4} alt={\"Carousel 4\"}/>\r\n                    </div>\r\n                    <div>\r\n                        <img src={pic5} alt={\"Carousel 5\"}/>\r\n                    </div>\r\n                    <div>\r\n                        <img src={pic6} alt={\"Carousel 6\"}/>\r\n                    </div>\r\n                </Carousel>\r\n                <div style={{textAlign: \"center\", fontStyle: \"oblique\"}}\r\n                     onClick={() => onClickCarouselImage(displayedImage)}>\r\n                    <span style={{paddingRight: \"1ch\"}}>{imageCaption}</span>\r\n                    <span>\r\n                        <FaExternalLinkAlt/>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    const renderHomeHeaderDesktop = () => {\r\n        return <div className={\"d-flex flex-row home-header align-items-center\"}>\r\n            <div className={\"d-flex flex-column w-50\"}>\r\n                <div style={{paddingLeft: \"1vw\"}}>\r\n                    <div className={\"home-header-slogan mb-2\"}>{applicationStrings.label_home_slogan[language]}</div>\r\n                    <div>{homeText1[language]}</div>\r\n                </div>\r\n            </div>\r\n            <div className={\"d-flex flex-column w-50\"}>\r\n                {renderCarousel()}\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    const renderHomeHeaderMobile = () => {\r\n        return <div className={\" home-header-mobile align-items-center\"}>\r\n            <div className={\"\"}>\r\n                <div className={\"home-header-slogan mb-2\"}>{applicationStrings.label_home_slogan[language]}</div>\r\n                <div>{homeText1[language]}</div>\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    const renderStartButtonsDesktop = () => {\r\n        return (\r\n            <div>\r\n                <div className={\"d-flex flex-row justify-content-center\"}>\r\n                    <div className={\"mr-5\"}>\r\n                        <Link to={PATH_FOODDATA_PANEL + \"?add=1\"}>\r\n                            {renderStartButton(applicationStrings.button_getstarted_1[language], startImg1)}\r\n                        </Link>\r\n                    </div>\r\n                    {!isMobileDevice() &&\r\n                    <div>\r\n                        <Link to={PATH_FOODDATA_PANEL + \"?composite=1\"}>\r\n                            {renderStartButton(applicationStrings.button_getstarted_2[language], startImg2)}\r\n                        </Link>\r\n                    </div>\r\n                    }\r\n                    {!isMobileDevice() &&\r\n                    <div>\r\n                        <Link to={PATH_DIRECT_COMPARE}>\r\n                            {renderStartButton(applicationStrings.button_getstarted_3[language], startImg3)}\r\n                        </Link>\r\n                    </div>\r\n                    }\r\n                    <div>\r\n                        <Link to={PATH_RANKING}>\r\n                            {renderStartButton(applicationStrings.button_getstarted_4[language], startImg4)}\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderStartButton = (label: string, srcImage: string): any => {\r\n        const buttonClass = !isMobileDevice() ? \"home-startbutton\" : \"home-startbutton-mobile\"\r\n        return <button type=\"button\" className={`btn btn-small btn-outline-dark ${buttonClass}`}>\r\n            <div className={\"d-flex flex-column h-100\"}>\r\n                <div className={\"flex-row\"}>\r\n                    <img src={srcImage} style={{maxWidth: \"95%\"}} alt={\"Start btn img\"}/>\r\n                </div>\r\n                <div className=\"container d-flex flex-row align-items-center home-startbutton-label\">\r\n                    {label}\r\n                </div>\r\n            </div>\r\n        </button>\r\n    }\r\n\r\n    const gotoInfoPage = () => {\r\n        history.push(PATH_INFO);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"media\">\r\n                <div className={\"container-fluid\"}>\r\n                    <div className=\"row\">\r\n                        {!isMobileDevice() ?\r\n                            renderHomeHeaderDesktop()\r\n                            :\r\n                            renderHomeHeaderMobile()\r\n                        }\r\n                    </div>\r\n                    {renderStartButtonsDesktop()}\r\n                    <hr/>\r\n                    <div className={\"d-flex justify-content-center\"}>\r\n                        <button className={\"btn btn-link\"} onClick={() => {gotoInfoPage()}}>{applicationStrings.home_button_info[language]}</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}","import ReactSelectOption from \"../../types/ReactSelectOption\";\r\nimport NameType from \"../../types/nutrientdata/NameType\";\r\nimport {getReactSelectOptionsList} from \"./NameTypeService\";\r\n\r\nexport function getCategorySelectList(categories: Array<NameType>, language: string): Array<ReactSelectOption> {\r\n    return getReactSelectOptionsList(categories, language)\r\n}\r\n\r\n","import {ReactSelectFoodClassOption} from \"../../types/ReactSelectOption\";\r\nimport FoodClass from \"../../types/nutrientdata/FoodClass\";\r\nimport getName from \"../LanguageService\";\r\nimport NameType from \"../../types/nutrientdata/NameType\";\r\nimport {getFoodItemName, getFoodItemsOfFoodClass} from \"./FoodItemsService\";\r\nimport FoodDataCorpus from \"../../types/nutrientdata/FoodDataCorpus\";\r\n\r\nexport const foodClassLabelSeparator = \"||\"\r\n\r\nexport function getFoodClassSelectList(foodDataCorpus: FoodDataCorpus, category: number,\r\n                                       foodNames: Array<NameType>, language: string): ReactSelectFoodClassOption[] {\r\n    const {foodClasses, foodItems} = foodDataCorpus\r\n    const filteredFoodClasses = getFoodClassesOfCategory(foodClasses, category)\r\n\r\n    if (!filteredFoodClasses || filteredFoodClasses.length === 0) {\r\n        return []\r\n    }\r\n\r\n    const reactSelectOptions: Array<ReactSelectFoodClassOption> = []\r\n    filteredFoodClasses.forEach(foodClass => {\r\n        const nameId = foodClass.nameKey\r\n        if (nameId > foodNames.length) {\r\n            return\r\n        }\r\n        const nameType = foodNames[nameId - 1]\r\n        const foodName = getName(nameType, language, true)\r\n\r\n        /*\r\n         * In order to find food items in the select menu, which do not match the food class name, the food class\r\n         * label will be extended by the food item names of their class. A special formatting function is used in\r\n         * the list to convert the name back to the original food class name.\r\n         *\r\n         * Syntax: <food class name> || <name of food items (deduplicated)>\r\n         */\r\n\r\n        const foodItemsOfFoodClass = getFoodItemsOfFoodClass(foodItems, foodClass.id)\r\n        const foodItemNames: string[] = foodItemsOfFoodClass.map(foodItem => getFoodItemName(foodItem, foodNames, language)).filter(name => name !== null) as string[]\r\n        const label = foodName + foodClassLabelSeparator + foodItemNames.filter((element, index) => {\r\n            return foodItemNames.indexOf(element) === index;\r\n        }).join()   // Remove duplicates and then add all remaining food item names to the food class label\r\n\r\n        reactSelectOptions.push({\r\n            value: foodClass,\r\n            label: label\r\n        })\r\n    })\r\n\r\n    // Bugfix-187: Replace spaces in a word by a letter so that they WONT appear before the actual word (e.g. potato)\r\n    reactSelectOptions.sort((obj1, obj2) =>\r\n        (obj1.label).replace(\" \", \"x\").localeCompare(obj2.label.replace(\" \", \"x\"))\r\n    )\r\n    return reactSelectOptions\r\n}\r\n\r\n\r\nexport function getFoodClassesOfCategory(foodClasses: Array<FoodClass>, category: number): Array<FoodClass> {\r\n    return foodClasses.filter(foodClass => {\r\n        if (category === 0) {\r\n            return foodClass\r\n        } else if (foodClass.category === category) {\r\n            return foodClass\r\n        } else {\r\n            return null\r\n        }\r\n    })\r\n}","import NameType from \"../../types/nutrientdata/NameType\";\r\nimport {ReactSelectPortionOption} from \"../../types/ReactSelectOption\";\r\nimport FoodItem, {PortionData} from \"../../types/nutrientdata/FoodItem\";\r\nimport getName from \"../LanguageService\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {PORTION_KEY_100, PORTION_KEY_INDIVIDUAL} from \"../../config/Constants\";\r\n\r\n\r\nexport function getPortionReactSelectList(portionData: Array<PortionData>, portionTypes: Array<NameType>, language: string): Array<ReactSelectPortionOption> {\r\n    const reactSelectOptions: Array<ReactSelectPortionOption> = []\r\n    portionData.forEach(portionElement => {\r\n        const portionTypeIndex = portionTypes.findIndex(portionType => {\r\n             return portionType.id === portionElement.portionType\r\n        })\r\n\r\n        const portionType = portionTypes[portionTypeIndex]\r\n        const portionName = getName(portionType, language)\r\n        reactSelectOptions.push({\r\n            value: portionElement,\r\n            label: portionName\r\n        })\r\n    })\r\n\r\n    reactSelectOptions.push({\r\n        value: {amount: 100, portionType: PORTION_KEY_100},\r\n        label: applicationStrings.portion_100g[language]\r\n    })\r\n\r\n    reactSelectOptions.push({\r\n        value: {amount: 0, portionType: PORTION_KEY_INDIVIDUAL},\r\n        label: applicationStrings.portion_individual[language]\r\n    })\r\n\r\n    return reactSelectOptions\r\n}\r\n\r\n\r\nexport function getDefaultPortionData(foodItem: FoodItem, portionDataList: Array<ReactSelectPortionOption>): ReactSelectPortionOption {\r\n    let defaultPortionIndex = portionDataList.findIndex(portionData => {\r\n        return portionData.value.portionType === foodItem.defaultPortionId\r\n    })\r\n\r\n    if (defaultPortionIndex < 0 || defaultPortionIndex >= portionDataList.length) {\r\n        defaultPortionIndex = 0;\r\n    }\r\n\r\n    return portionDataList[defaultPortionIndex]\r\n}","import React, {ReactElement, useContext, useEffect, useState} from \"react\";\r\nimport {LanguageContext} from \"../contexts/LangContext\";\r\nimport {applicationStrings} from \"../static/labels\";\r\nimport ReactSelectOption from \"../types/ReactSelectOption\";\r\nimport {isSmallScreen, useWindowDimension} from \"../service/WindowDimension\";\r\nimport {NotificationManager} from 'react-notifications'\r\nimport Select from 'react-select';\r\nimport {Modal} from \"react-bootstrap\";\r\n\r\nexport interface Unit {\r\n    factor: number,\r\n    labelKey: string\r\n}\r\n\r\ninterface UnitConversionProps {\r\n    sourceUnits: Array<Unit>\r\n    targetUnitLabelKey: string\r\n    allowedMinimumTargetValue: number\r\n    allowedMaximumTargetValue: number\r\n    initialValue?: number\r\n    onSubmit: (value) => void\r\n    closeModal: () => void\r\n}\r\n\r\nexport const UnitConversionModal: React.FC<UnitConversionProps> = (props: UnitConversionProps): ReactElement => {\r\n    const language = useContext(LanguageContext).language\r\n    const windowSize = useWindowDimension()\r\n\r\n    const unitOptions = props.sourceUnits.map((sourceUnit, index) => {\r\n        return {\r\n            value: index,\r\n            label: applicationStrings[sourceUnit.labelKey][language]\r\n        }\r\n    })\r\n\r\n    const [selectedUnitOption, setSelectedUnitOption] = useState<ReactSelectOption>(unitOptions[0])\r\n    const [inputValue, setInputValue] = useState<number>(props.initialValue ? props.initialValue : 1)\r\n    const [convertedValue, setConvertedValue] = useState<number | null>(null)\r\n\r\n    useEffect(() => {\r\n        if (!isNaN(inputValue)) {\r\n            const unit = props.sourceUnits[selectedUnitOption.value]\r\n            setConvertedValue(Math.round(inputValue * unit.factor))\r\n        } else {\r\n            setConvertedValue(null)\r\n        }\r\n    }, [inputValue, selectedUnitOption])\r\n\r\n    const onInputChange = (event) => {\r\n        const val = event.target.value\r\n        setInputValue(val)\r\n    }\r\n\r\n    const isValidConversion = () => {\r\n        return convertedValue !== null && convertedValue >= props.allowedMinimumTargetValue\r\n            && convertedValue <= props.allowedMaximumTargetValue\r\n    }\r\n\r\n    const submit = () => {\r\n        if (isValidConversion()) {\r\n            props.onSubmit(convertedValue)\r\n            props.closeModal()\r\n        } else {\r\n            NotificationManager.error(applicationStrings.message_error_input[language])\r\n        }\r\n    }\r\n\r\n    const makeForm = () => {\r\n        const inputClass = isSmallScreen(windowSize)\r\n            ? \"form-control form-control-sm input-sm w-50\"\r\n            : \"form-control input\"\r\n\r\n        const fontColor = isValidConversion()\r\n            ? \"black\"\r\n            : \"#cc0000\"\r\n\r\n        return (\r\n            <div>\r\n                <div className={\"form-section\"}>\r\n                    <div className={\"d-flex flex-row\"}>\r\n                        <input className={inputClass}\r\n                               style={{width: \"30%\"}}\r\n                               value={inputValue}\r\n                               onChange={onInputChange}\r\n                        />\r\n                        <div style={{width: \"70%\"}}>\r\n                            <Select options={unitOptions}\r\n                                    value={selectedUnitOption}\r\n                                    isSearchable={false}\r\n                                    onChange={(value) => setSelectedUnitOption(value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style={{paddingTop: \"2vh\", paddingLeft: \"1vw\", color: fontColor}}>\r\n                    {convertedValue !== null ?\r\n                        (\r\n                            <span>\r\n                                <span><b>{convertedValue}</b></span>\r\n                                <span style={{paddingLeft: \"0.75ch\"}}>\r\n                                    <b>{applicationStrings[props.targetUnitLabelKey][language]}</b>\r\n                                </span>\r\n                            </span>\r\n                        )\r\n                        :\r\n                        (\r\n                            <span><b>{applicationStrings.label_error[language]}</b></span>\r\n                        )\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal className={\"unit-modal\"}\r\n               size={\"sm\"}\r\n               show={true}\r\n               onHide={props.closeModal}\r\n               backdrop=\"static\"\r\n        >\r\n            <Modal.Header>\r\n                <h5 className=\"modal-title\">{applicationStrings.label_unit_conversion_title[language]}</h5>\r\n                <button type=\"button\"\r\n                        className=\"btn-close\"\r\n                        data-dismiss=\"modal\"\r\n                        aria-label=\"Close\"\r\n                        onClick={props.closeModal}>\r\n                </button>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {makeForm()}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <button type=\"button\"\r\n                        className=\"btn btn-secondary\"\r\n                        onClick={props.closeModal}>\r\n                    {applicationStrings.button_close[language]}\r\n                </button>\r\n                <button type=\"button\"\r\n                        className=\"btn btn-primary\"\r\n                        onClick={() => submit()}>\r\n                    {applicationStrings.button_submit[language]}\r\n                </button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport Select from 'react-select';\r\nimport ReactSelectOption, {\r\n    ReactSelectFoodClassOption,\r\n    ReactSelectFoodItemOption,\r\n    ReactSelectPortionOption\r\n} from \"../../types/ReactSelectOption\";\r\nimport {getCategorySelectList} from \"../../service/nutrientdata/CategoryService\";\r\nimport {foodClassLabelSeparator, getFoodClassSelectList} from \"../../service/nutrientdata/FoodClassService\";\r\nimport {getFoodItemsSelectList, makeSelectedFoodItemObject} from \"../../service/nutrientdata/FoodItemsService\";\r\nimport FoodItem, {PortionData} from \"../../types/nutrientdata/FoodItem\";\r\nimport {getDefaultPortionData, getPortionReactSelectList} from \"../../service/nutrientdata/PortionDataService\";\r\nimport SelectedFoodItem from \"../../types/livedata/SelectedFoodItem\";\r\nimport FoodClass from \"../../types/nutrientdata/FoodClass\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport {isMobileDevice, isSmallScreen, useWindowDimension} from \"../../service/WindowDimension\";\r\nimport {MODE_EDIT, PORTION_KEY_INDIVIDUAL, SOURCE_FNDDS, SOURCE_SRLEGACY} from \"../../config/Constants\";\r\nimport {getSourceName} from \"../../service/nutrientdata/NutrientDataRetriever\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport {Button, Form} from \"react-bootstrap\";\r\nimport {\r\n    COLOR_SELECTOR_CATEGORY,\r\n    COLOR_SELECTOR_FOODCLASS, COLOR_SELECTOR_FOODITEM,\r\n    correspondingSelectElementStyle,\r\n    customSelectStyles,\r\n    getCustomSelectStyle\r\n} from \"../../config/UI_Config\";\r\nimport {getNameFromFoodNameList} from \"../../service/nutrientdata/NameTypeService\";\r\nimport {FaSlidersH} from \"react-icons/fa\";\r\nimport {Unit, UnitConversionModal} from \"../UnitConversionModal\";\r\nimport {max_portion} from \"../../config/ChartConfig\";\r\n\r\nexport interface FoodSelectorProps {\r\n    updateSelectedFoodItem: (selectedFoodItem: SelectedFoodItem) => void\r\n    updateFoodSelectorConfig: (selectedCategory: ReactSelectOption | null, supplementData: boolean, combineData: boolean) => void\r\n    updateCompositeTitle?: (compositeTitle: string) => void\r\n    compositeSelector: boolean\r\n    directCompareSelector?: boolean\r\n    initialFoodClassToSet?: number\r\n    selectedFoodItem?: SelectedFoodItem | null\r\n    defaultFoodClass?: number\r\n    defaultFoodItem?: number\r\n    directCompareSelectorNumber?: number\r\n    mode?: string\r\n}\r\n\r\n/**\r\n * Component to select a food element. The component can optionally show the category list and can be initialized\r\n * with an already existing selected food item (in case of component re-rendering).\r\n */\r\nexport default function FoodSelector(props: FoodSelectorProps): JSX.Element {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const {language} = useContext(LanguageContext)\r\n\r\n    const initialCategory = applicationContext?.applicationData.foodSelector.selectedCategory\r\n        ? applicationContext.applicationData.foodSelector.selectedCategory\r\n        : null\r\n\r\n    const foodSelectorConfig = applicationContext?.applicationData.foodSelector\r\n    const directCompareSelectorConfig1 = applicationContext?.applicationData.directCompareDataPanel.foodSelector1\r\n    const directCompareSelectorConfig2 = applicationContext?.applicationData.directCompareDataPanel.foodSelector2\r\n\r\n    const initialSupplementValue = props.directCompareSelectorNumber === undefined\r\n        ? foodSelectorConfig?.sourceSupplement || false\r\n        : props.directCompareSelectorNumber === 1\r\n            ? directCompareSelectorConfig1?.sourceSupplement || false\r\n            : directCompareSelectorConfig2?.sourceSupplement || false\r\n\r\n    const initialCombineValue = props.directCompareSelectorNumber === undefined\r\n        ? foodSelectorConfig?.sourceCombine || false\r\n        : props.directCompareSelectorNumber === 1\r\n            ? directCompareSelectorConfig1?.sourceCombine || false\r\n            : directCompareSelectorConfig2?.sourceCombine || false\r\n\r\n    const [selectedCategory, setSelectedCategory] = useState<ReactSelectOption | null>(initialCategory)\r\n    const [selectedFoodClass, setSelectedFoodClass] = useState<ReactSelectFoodClassOption | null>(null)\r\n    const [selectedFoodItem, setSelectedFoodItem] = useState<ReactSelectFoodItemOption | null>(null)\r\n    const [selectedPortion, setSelectedPortion] = useState<ReactSelectPortionOption | null>(null)\r\n    const [portionAmount, setPortionAmount] = useState<number>(0)\r\n    const [title, setTitle] = useState<string>(applicationStrings.input_compositelist_title[language])\r\n    const [selectedSource, setSelectedSource] = useState<ReactSelectOption | null>(null)\r\n    const [supplementData, setSupplementData] = useState<boolean>(initialSupplementValue)\r\n    const [combineData, setCombineData] = useState<boolean>(initialCombineValue)\r\n    const [initialized, setInitialized] = useState<boolean>(false)\r\n\r\n    const [categoriesList, setCategoriesList] = useState<Array<ReactSelectOption>>([])\r\n    const [foodClassesList, setFoodClassesList] = useState<Array<ReactSelectFoodClassOption>>([])\r\n    const [foodClassesTypeaheadList, setFoodClassesTypeaheadList] = useState<Array<ReactSelectFoodClassOption>>([])\r\n\r\n    const [foodItemsList, setFoodItemsList] = useState<Array<ReactSelectFoodItemOption>>([])\r\n    const [portionsList, setPortionsList] = useState<Array<ReactSelectPortionOption>>([])\r\n    const [sourcesList, setSourcesList] = useState<Array<ReactSelectOption>>([])\r\n\r\n    const [unitModalOpen, setUnitModalOpen] = useState<boolean>(false)\r\n\r\n    // The food class search key entered by the user:\r\n    const [foodClassSearchTerm, setFoodClassSearchTerm] = useState<string>(\"\")\r\n\r\n    // The selected food item object, from which the selector has once been created.\r\n    const initiallySetFoodItem = props.selectedFoodItem !== undefined ? props.selectedFoodItem : null\r\n    const [initiallySetSelectedFoodItem, setInitiallySetSelectedFoodItem] = useState<SelectedFoodItem | null>(initiallySetFoodItem)\r\n\r\n    const windowSize = useWindowDimension()\r\n\r\n    const getInitialFoodClassNumber = (foodClassOptions: ReactSelectFoodClassOption[]): number => {\r\n        if (props.initialFoodClassToSet !== undefined && props.initialFoodClassToSet !== null) {\r\n            return props.initialFoodClassToSet\r\n        }\r\n\r\n        if (props.defaultFoodClass !== undefined) {\r\n            const index = foodClassOptions.findIndex(foodClassOption => foodClassOption.value.id === props.defaultFoodClass)\r\n            if (index !== -1) {\r\n                return index\r\n            }\r\n        }\r\n\r\n        return 0   // Use the first food class in the list if no other parameter indicates the food class to select\r\n    }\r\n\r\n    useEffect(() => {\r\n            if (applicationContext && applicationContext.foodDataCorpus && categoriesList.length === 0) {\r\n                const foodDataCorpus = applicationContext.foodDataCorpus\r\n\r\n                if (foodDataCorpus.categories) {\r\n                    const categoryItems = getCategorySelectList(foodDataCorpus.categories, language)\r\n                    setCategoriesList(categoryItems)\r\n                }\r\n\r\n                if (foodDataCorpus.foodClasses) {\r\n                    const category = selectedCategory ? selectedCategory.value : 0\r\n                    const foodClasses = getFoodClassSelectList(foodDataCorpus, category, applicationContext.foodDataCorpus.foodNames, language)\r\n                    setFoodClassesList(foodClasses)\r\n                    setFoodClassesTypeaheadList(foodClasses)  // Initially, the typeahead-list is identical with the food classes list\r\n\r\n                    const initialFoodClass = getInitialFoodClassNumber(foodClasses)\r\n                    const foodClass = foodClasses[initialFoodClass]\r\n                    setSelectedFoodClass(foodClass)\r\n\r\n                    if (foodDataCorpus.foodItems && foodClasses) {\r\n                        const foodItemsOfFoodClass = getFoodItemsSelectList(\r\n                            foodDataCorpus.foodItems,\r\n                            foodClasses[initialFoodClass].value.id,\r\n                            foodDataCorpus.foodNames,\r\n                            foodDataCorpus.conditions, language\r\n                        )\r\n\r\n                        setFoodItemsList(foodItemsOfFoodClass)\r\n                        setSelectedFoodItem(foodItemsOfFoodClass[0])\r\n                        const foodItem = foodItemsOfFoodClass[0].value\r\n\r\n                        if (foodItem && foodItem.portionData) {\r\n                            const portionDataList = getPortionReactSelectList(foodItem.portionData, foodDataCorpus.portionTypes, language)\r\n                            setPortionsList(portionDataList)\r\n\r\n                            updateSourcesList(foodItem)\r\n\r\n                            const defaultPortion = getDefaultPortionData(foodItem, portionDataList)\r\n                            setSelectedPortion(defaultPortion)\r\n                            setPortionAmount(defaultPortion.value.amount)\r\n\r\n                            if (!props.selectedFoodItem) {\r\n                                makeSelectedFoodItemObject(foodItem, foodClass.value, defaultPortion.value, portionAmount, supplementData,\r\n                                    combineData, selectedSource ? selectedSource.value : 0)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // Update data for outer component whenever render is triggered\r\n                const source = selectedSource ? selectedSource.value : 0\r\n                if (selectedFoodItem && selectedFoodClass && selectedPortion) {\r\n                    const newFoodItem = makeSelectedFoodItemObject(selectedFoodItem.value, selectedFoodClass.value, selectedPortion.value,\r\n                        portionAmount, supplementData, combineData, source)\r\n                    if (newFoodItem) {\r\n                        props.updateSelectedFoodItem(newFoodItem)\r\n                        props.updateFoodSelectorConfig(selectedCategory, supplementData, combineData)\r\n                    }\r\n                } else if (props.selectedFoodItem) {\r\n                    const {foodItem, foodClass, portion} = props.selectedFoodItem\r\n                    makeSelectedFoodItemObject(foodItem, foodClass, portion, portionAmount, supplementData,\r\n                        combineData, source)\r\n                }\r\n            }\r\n\r\n        }, [selectedFoodItem,\r\n            selectedPortion,\r\n            selectedFoodClass,\r\n            selectedCategory,\r\n            selectedSource,\r\n            portionAmount,\r\n            title,\r\n            supplementData,\r\n            combineData\r\n        ]\r\n    )\r\n\r\n    if (!applicationContext) {\r\n        return <div/>\r\n    }\r\n\r\n    const handleCategoryChange = (category: ReactSelectOption) => {\r\n        setSelectedCategory(category)\r\n        updateFoodClasses(category)\r\n    }\r\n\r\n    const handleFoodClassChange = (foodClass: ReactSelectFoodClassOption) => {\r\n        setSelectedFoodClass(foodClass)\r\n        updateFoodItem(foodClass)\r\n        resetTypeaheadFilter()\r\n    }\r\n\r\n    const resetTypeaheadFilter = () => {\r\n        setFoodClassesTypeaheadList(foodClassesList)\r\n    }\r\n\r\n    const handleFoodItemChange = (foodItem: ReactSelectFoodItemOption) => {\r\n        setSelectedFoodItem(foodItem)\r\n        updatePortionsList(foodItem.value)\r\n        updateSourcesList(foodItem.value)\r\n    }\r\n\r\n    const handlePortionChange = (portion: ReactSelectPortionOption) => {\r\n        setSelectedPortion(portion)\r\n        setPortionAmount(portion.value.amount)\r\n    }\r\n\r\n    const handleTitleChange = (event) => {\r\n        setTitle((event.target.value))\r\n        if (props.updateCompositeTitle !== undefined) {\r\n            props.updateCompositeTitle(event.target.value)\r\n        }\r\n    }\r\n\r\n    const handleSourceChange = (source: ReactSelectOption) => {\r\n        setSelectedSource(source)\r\n    }\r\n\r\n    const handlePortionAmountChange = (e) => {\r\n        if (!e.target.value) {\r\n            setPortionAmount(0)\r\n            return\r\n        }\r\n\r\n        const amount = parseInt(e.target.value)\r\n\r\n        if (!isNaN(amount)) {\r\n            setPortionAmount(amount)\r\n        }\r\n    }\r\n\r\n    const updateFoodClasses = (category: ReactSelectOption) => {\r\n        const foodDataCorpus = applicationContext.foodDataCorpus\r\n\r\n        if (foodDataCorpus) {\r\n            const foodClassItems = getFoodClassSelectList(foodDataCorpus, category.value, applicationContext.foodDataCorpus.foodNames, language)\r\n            setFoodClassesList(foodClassItems)\r\n            setFoodClassesTypeaheadList(foodClassItems)\r\n            setSelectedFoodClass(foodClassItems[0])\r\n            updateFoodItem(foodClassItems[0])\r\n        }\r\n    }\r\n\r\n    const updateFoodItem = (foodClass: ReactSelectFoodClassOption) => {\r\n        const {foodItems, foodNames, conditions} = applicationContext.foodDataCorpus\r\n\r\n        if (foodItems) {\r\n            let selectedFoodItemIndex;\r\n\r\n            const foodClassItems = getFoodItemsSelectList(foodItems, foodClass.value.id, foodNames, conditions, language)\r\n            setFoodItemsList(foodClassItems)\r\n\r\n            if (foodClassItems && foodClassItems.length > 0) {\r\n                const firstFoodClassItem = foodClassItems[0]\r\n                const nameId = firstFoodClassItem.value.nameId ?? -1\r\n                const firstFoodItemName = getNameFromFoodNameList(foodNames, nameId, language, false)\r\n\r\n                // The first food item in the list starts with the food class search string entered by the user\r\n                if (firstFoodItemName\r\n                    && (firstFoodItemName.startsWith(foodClassSearchTerm)\r\n                        || firstFoodItemName.includes(\" \" + foodClassSearchTerm))) {\r\n                    selectedFoodItemIndex = 0;\r\n                } else {   // Search for a food item in the list that starts with the food class search string\r\n                    const matchingIndex = foodClassItems.findIndex(item => {\r\n                        const nameId = item.value.nameId ?? -1\r\n                        const foodItemName = getNameFromFoodNameList(foodNames, nameId, language, false)\r\n                        return foodItemName && foodItemName.startsWith(foodClassSearchTerm)\r\n                    })\r\n                    if (matchingIndex >= 0) {  // Found one item in the list -> Select this item\r\n                        selectedFoodItemIndex = matchingIndex\r\n                    } else {   // Found no item in the list -> Just select the first food item\r\n                        selectedFoodItemIndex = 0\r\n                    }\r\n                }\r\n            }\r\n\r\n            const foodItemToSelect = foodClassItems[selectedFoodItemIndex]\r\n            setSelectedFoodItem(foodItemToSelect)\r\n\r\n            const foodItemValue = foodItemToSelect.value\r\n            if (foodItemValue) {\r\n                updatePortionsList(foodItemValue)\r\n                updateSourcesList(foodItemValue)\r\n            }\r\n        }\r\n    }\r\n\r\n    const updatePortionsList = (foodItem: FoodItem) => {\r\n        const portionDataList = getPortionReactSelectList(foodItem.portionData!!, applicationContext.foodDataCorpus.portionTypes, language)\r\n        setPortionsList(portionDataList)\r\n        const defaultPortion = getDefaultPortionData(foodItem, portionDataList)\r\n        setSelectedPortion(defaultPortion)\r\n        setPortionAmount(defaultPortion.value.amount)\r\n    }\r\n\r\n\r\n    const updateSourcesList = (foodItem: FoodItem) => {\r\n        const sourceNames = getSourceNames(foodItem)\r\n        setSourcesList(sourceNames)\r\n\r\n        if (sourceNames.length === 1) {\r\n            setSelectedSource(sourceNames[0])\r\n        } else {\r\n            const preferredSource = applicationContext.applicationData.preferredSource\r\n            const matchingSource = sourceNames.find(sourceObject => {\r\n                if (sourceObject.value === 0 && preferredSource === SOURCE_SRLEGACY) {\r\n                    return sourceObject\r\n                } else if (sourceObject.value === 1 && preferredSource === SOURCE_FNDDS) {\r\n                    return sourceObject\r\n                } else {\r\n                    return null\r\n                }\r\n            })\r\n            if (matchingSource) {\r\n                setSelectedSource(matchingSource)\r\n            } else {\r\n                setSelectedSource(sourceNames[0])\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const getSourceNames = (foodItem: FoodItem) => {\r\n        return foodItem.nutrientDataList.map(nutrientDataObject => {\r\n            const SourceName = getSourceName(nutrientDataObject.source.id)\r\n            return {label: SourceName, value: nutrientDataObject.source.id}\r\n        })\r\n    }\r\n\r\n    const setInitialFoodElement = () => {\r\n        if (!foodClassesList || foodClassesList.length === 0) {\r\n            return\r\n        }\r\n\r\n        if (!props.selectedFoodItem || !props.selectedFoodItem.foodClass) {\r\n            return\r\n        }\r\n\r\n        const predefinedFoodObject = props.selectedFoodItem\r\n\r\n        // @ts-ignore\r\n        const foodClassOption = foodClassesList.find(foodClass => foodClass.value.id === predefinedFoodObject.foodClass.id)\r\n        const {foodItems, foodNames, conditions, portionTypes} = applicationContext.foodDataCorpus\r\n\r\n        if (foodClassOption) {\r\n            setSelectedFoodClass(foodClassOption)\r\n            const foodClassItems = getFoodItemsSelectList(foodItems, foodClassOption.value.id, foodNames, conditions, language)\r\n\r\n            if (foodClassItems) {\r\n                setFoodItemsList(foodClassItems)\r\n                const foodItem = foodClassItems.find(foodItem => foodItem.value.id === predefinedFoodObject.foodItem.id)\r\n\r\n                if (foodItem && foodItem.value && foodItem.value.portionData) {\r\n                    setSelectedFoodItem(foodItem)\r\n\r\n                    const sourceNames = getSourceNames(foodItem.value)\r\n                    setSourcesList(sourceNames)\r\n                    const selected = sourceNames.find(sourceElement => sourceElement.value === props.selectedFoodItem?.selectedSource)\r\n                    if (selected) {\r\n                        setSelectedSource(selected)\r\n                    }\r\n\r\n                    const portionDataList = getPortionReactSelectList(foodItem.value.portionData, portionTypes, language)\r\n                    setPortionsList(portionDataList)\r\n\r\n                    const portionType = predefinedFoodObject.portion.portionType\r\n                    const portionObject = portionDataList.find(portion => portion.value.portionType === portionType)\r\n                    if (portionObject) {\r\n                        setSelectedPortion(portionObject)\r\n\r\n                        //@ts-ignore\r\n                        const amount = predefinedFoodObject.portion.amount\r\n                        setPortionAmount(amount)\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        setInitialized(true)\r\n    }\r\n\r\n    const onCheckSupplementCheckbox = () => {\r\n        setSupplementData(!supplementData)\r\n    }\r\n\r\n    const onCheckCombineCheckbox = () => {\r\n        setCombineData(!combineData)\r\n    }\r\n\r\n    /**\r\n     * Manually creates a sorted typeahead list which will favor food classes starting with the search term\r\n     * against food classes not starting (but including) the search term. Also, the food class is favored\r\n     * against the food items of it, which may also include the search term (like \"Cheese\" is shown if \"Gouda\"\r\n     * is entered).\r\n     * @param value The value entered in the select input field\r\n     * @param action The event action\r\n     */\r\n    const handleFoodClassInputChange = (value, {action}) => {\r\n        if (action === 'input-change') {\r\n            setFoodClassSearchTerm(value.trim())\r\n\r\n            if (value.trim().length === 0) {\r\n                setFoodClassesTypeaheadList(foodClassesList)\r\n                return\r\n            }\r\n\r\n            let resultList: ReactSelectFoodClassOption[] = []\r\n            let dictionary: string[] = []\r\n\r\n            value = value.toLowerCase().trim()\r\n\r\n            // Find all food class elements to the typeahead list that start with the search term\r\n            foodClassesList.forEach(entry => {\r\n                let label = entry.label.toLowerCase()\r\n                if (label.includes(foodClassLabelSeparator)) {\r\n                    label = label.substring(0, label.indexOf(foodClassLabelSeparator)).trim()\r\n                }\r\n                if (label.startsWith(value)) {\r\n                    resultList.push(entry)\r\n                    dictionary.push(entry.label)\r\n                }\r\n            })\r\n\r\n            // Now add all food class elements to the typeahead list that match the search term (yet do not start with it)\r\n            foodClassesList.forEach(entry => {\r\n                let label = entry.label.toLowerCase()\r\n                if (label.includes(foodClassLabelSeparator)) {\r\n                    label = label.substring(0, label.indexOf(foodClassLabelSeparator)).trim()\r\n                }\r\n                if (label.includes(value) && !label.startsWith(value)) {\r\n                    resultList.push(entry)\r\n                    dictionary.push(entry.label)\r\n                }\r\n            })\r\n\r\n            // Finally add all labels (class or items) that contain the search term\r\n            foodClassesList.forEach(entry => {\r\n                const label = entry.label.toLowerCase()\r\n                if (label.includes(value) && !dictionary.includes(entry.label)) {\r\n                    resultList.push(entry)\r\n                }\r\n            })\r\n\r\n            setFoodClassesTypeaheadList(resultList)\r\n        }\r\n    }\r\n\r\n    if (props.selectedFoodItem) {\r\n        if (!initialized) {\r\n            setInitialFoodElement()\r\n        } else {\r\n            if (initiallySetSelectedFoodItem === null || (initiallySetSelectedFoodItem.foodItem.id !== props.selectedFoodItem.foodItem.id)\r\n            ) {  // Selecting an element from the category tree => reset category to \"all\" and load all food classes\r\n                setInitiallySetSelectedFoodItem(props.selectedFoodItem)\r\n                setInitialFoodElement()\r\n            }\r\n        }\r\n    }\r\n\r\n    const renderSourceLine = () => {\r\n        const sourceSelectBox = (\r\n            <Select className={selectClass}\r\n                    options={sourcesList}\r\n                    isDisabled={sourcesList.length <= 1 || combineData}\r\n                    value={selectedSource ? selectedSource : sourcesList[0]}\r\n                    onChange={handleSourceChange}\r\n                    styles={customSelectStyles}\r\n            />\r\n        )\r\n\r\n        const checkboxes = (\r\n            <div>\r\n                <label className=\"form-elements\"\r\n                       data-for={\"selector-supplement\"}\r\n                       data-tip={applicationStrings.label_source_supplement_tooltip[language]}>\r\n                    <ReactTooltip/>\r\n                    <Form.Check inline className=\"form-radiobutton\"\r\n                                label={applicationStrings.label_source_supplement[language]}\r\n                                checked={supplementData}\r\n                                disabled={sourcesList.length <= 1}\r\n                                onChange={onCheckSupplementCheckbox}>\r\n                    </Form.Check>\r\n                    <ReactTooltip id={\"selector-supplement\"}/>\r\n                </label>\r\n                <label className=\"form-elements\"\r\n                       data-for={\"selector-combine\"}\r\n                       data-tip={applicationStrings.label_source_combine_tooltip[language]}>\r\n                    <ReactTooltip id={\"selector-combine\"}/>\r\n                    <Form.Check className=\"form-radiobutton\"\r\n                                style={{minHeight: \"1rem\"}}\r\n                                label={applicationStrings.label_source_combine[language]}\r\n                                checked={combineData}\r\n                                disabled={sourcesList.length <= 1}\r\n                                onChange={onCheckCombineCheckbox}>\r\n                    </Form.Check>\r\n                </label>\r\n            </div>\r\n        )\r\n\r\n        if (props.directCompareSelector && !isMobileDevice()) {  // Direct Compare Selector uses column layout for Checkboxes/Source box\r\n            return <div>\r\n                <span className={'form-label'}>{applicationStrings.label_source[language]}:</span>\r\n                <div className={\"d-flex row\"}>\r\n                    <div className=\"col-4 column select-menu form-section-small\">\r\n                        {sourceSelectBox}\r\n                    </div>\r\n                    <div className={\"col-8\"}>\r\n                        {checkboxes}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        } else {\r\n            return <div>\r\n                <span className={'form-label'}>{applicationStrings.label_source[language]}:</span>\r\n                <div className=\"select-menu form-section\">\r\n                    {sourceSelectBox}\r\n                </div>\r\n                <div>\r\n                    {checkboxes}\r\n                </div>\r\n            </div>\r\n        }\r\n    }\r\n\r\n\r\n    const amount_label = props.compositeSelector\r\n        ? `${applicationStrings.label_amount_short[language]}:`\r\n        : `${applicationStrings.label_amount[language]}:`\r\n    const initialFoodClass = getInitialFoodClassNumber(foodClassesList)\r\n\r\n    const selectClass = isSmallScreen(windowSize) ? \"form-control-sm\" : \"\"\r\n    const inputClass = isSmallScreen(windowSize) ? \"form-control form-control-sm\" : \"form-control\"\r\n\r\n    const formClass = props.directCompareSelector ? \"form-section-small\" : \"form-section\"\r\n\r\n    // Remove hidden food class information in the label, which is only used to facilitate user search (e.g. find 'Cheese' for term 'Gouda')\r\n    const foodclassFormatter = (option) => {\r\n        let label = option.label\r\n\r\n        if (label.includes(foodClassLabelSeparator)) {\r\n            const pos = label.indexOf(foodClassLabelSeparator)\r\n            label = label.substring(0, pos)\r\n        }\r\n\r\n        if (label.includes(\"[\")) {\r\n            const pos = label.indexOf(\"[\")\r\n            label = label.substring(0, pos)\r\n        }\r\n\r\n        return label\r\n    }\r\n\r\n    const stylesCategory = !props.directCompareSelector\r\n        ? getCustomSelectStyle(COLOR_SELECTOR_CATEGORY)\r\n        : customSelectStyles\r\n    const stylesFoodClass = !props.directCompareSelector\r\n        ? getCustomSelectStyle(COLOR_SELECTOR_FOODCLASS)\r\n        : customSelectStyles\r\n    const stylesFoodItem = !props.directCompareSelector\r\n        ? getCustomSelectStyle(COLOR_SELECTOR_FOODITEM)\r\n        : customSelectStyles\r\n\r\n    const onSubmitUnit = (value) => {\r\n        setPortionAmount(value)\r\n    }\r\n\r\n\r\n    const sourceUnits: Array<Unit> = [\r\n        {\r\n            labelKey: \"_ounces\",\r\n            factor: 28.413062\r\n        },\r\n        {\r\n            labelKey: \"_fl_ounces\",\r\n            factor: 29.573529\r\n        },\r\n        {\r\n            labelKey: \"_pounds\",\r\n            factor: 453.59237\r\n        },\r\n    ]\r\n\r\n    return <div>\r\n        <div className=\"container\">\r\n            {props.compositeSelector &&\r\n            <div>\r\n                <span className={'form-label'}>{applicationStrings.label_title[language]}:</span>\r\n                <input className={inputClass}\r\n                       value={title}\r\n                       style={correspondingSelectElementStyle}\r\n                       onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            }\r\n            {props.directCompareSelector !== true &&\r\n            <div className={formClass}>\r\n                <span className={'form-label'}>{applicationStrings.label_category[language]}:</span>\r\n                <Select className={selectClass}\r\n                        options={categoriesList}\r\n                        isDisabled={props.mode === MODE_EDIT}\r\n                        value={selectedCategory ? selectedCategory : categoriesList[0]}\r\n                        onChange={(value) => handleCategoryChange(value)}\r\n                        styles={stylesCategory}\r\n                />\r\n            </div>\r\n            }\r\n            {unitModalOpen &&\r\n                <UnitConversionModal sourceUnits={sourceUnits}\r\n                                     targetUnitLabelKey={\"_gram\"}\r\n                                     allowedMinimumTargetValue={1}\r\n                                     allowedMaximumTargetValue={max_portion}\r\n                                     initialValue={1}\r\n                                     onSubmit={onSubmitUnit}\r\n                                     closeModal={() => setUnitModalOpen(false)}>\r\n                </UnitConversionModal>\r\n            }\r\n            <div className={formClass}>\r\n                <span className={'form-label'}>{applicationStrings.label_foodclass[language]}:</span>\r\n                <Select className={selectClass}\r\n                        options={foodClassesTypeaheadList}\r\n                        isDisabled={props.mode === MODE_EDIT}\r\n                        onInputChange={handleFoodClassInputChange}\r\n                        formatOptionLabel={foodclassFormatter}\r\n                        value={selectedFoodClass ? selectedFoodClass : foodClassesList[initialFoodClass]}\r\n                        onChange={(value) => handleFoodClassChange(value)}\r\n                        onMenuClose={() => resetTypeaheadFilter()}\r\n                        styles={stylesFoodClass}\r\n                />\r\n            </div>\r\n            <div className={formClass}>\r\n                <span className={'form-label'}>{applicationStrings.label_fooditem[language]}:</span>\r\n                <Select className={selectClass}\r\n                        isDisabled={props.mode === MODE_EDIT}\r\n                        options={foodItemsList}\r\n                        value={selectedFoodItem ? selectedFoodItem : foodItemsList[0]}\r\n                        onChange={handleFoodItemChange}\r\n                        styles={stylesFoodItem}\r\n                />\r\n            </div>\r\n            <div className={formClass}>\r\n                <div className={\"row\"}>\r\n                    <div className={\"col-8\"}>\r\n                        <span\r\n                            className={'form-label'}>{applicationStrings.label_portion[language]}:</span>\r\n                        <Select className={selectClass}\r\n                                options={portionsList}\r\n                                styles={customSelectStyles}\r\n                                value={selectedPortion ? selectedPortion : portionsList[0]}\r\n                                onChange={(value) => handlePortionChange(value)}/>\r\n                    </div>\r\n                    <div className={\"col-4\"}>\r\n                        <div className={\"d-flex flex-row align-items-end\"}>\r\n                            <div>\r\n                                <span className={'form-label'}>{amount_label}</span>\r\n                                <input className={inputClass}\r\n                                       disabled={selectedPortion?.value.portionType !== 0}\r\n                                       value={portionAmount}\r\n                                       style={correspondingSelectElementStyle}\r\n                                       onChange={handlePortionAmountChange}\r\n                                />\r\n                            </div>\r\n                            <Button className={\"btn btn-secondary\"}\r\n                                    disabled={!selectedPortion || selectedPortion.value.portionType !== PORTION_KEY_INDIVIDUAL}\r\n                                    style={{marginLeft: \"1vw\"}}\r\n                                    onClick={() => setUnitModalOpen(true)}>\r\n                                <FaSlidersH/>\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {renderSourceLine()}\r\n        </div>\r\n    </div>\r\n\r\n}","import React, {ReactElement, useContext, useState} from \"react\";\r\nimport {Modal} from \"react-bootstrap\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {correspondingSelectElementStyle} from \"../../config/UI_Config\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport {NotificationManager} from 'react-notifications'\r\nimport {LANGUAGE_DE} from \"../../config/Constants\";\r\nimport {maximalPortionSize} from \"../../config/ApplicationSetting\";\r\n\r\ninterface EditPortionModalProps {\r\n    portionAmount: number,\r\n    foodName: string,\r\n    closeModal: () => void\r\n    submitNewPortion: (portion) => void\r\n}\r\n\r\nexport function EditPortionModal(props: EditPortionModalProps): ReactElement {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const language = useContext(LanguageContext).language\r\n\r\n    const [newPortion, setNewPortion] = useState(props.portionAmount)\r\n\r\n    if (!applicationContext) {\r\n        return <div/>\r\n    }\r\n\r\n    const submitNewPortion = () => {\r\n        if (newPortion < 1 || newPortion > maximalPortionSize) {\r\n            NotificationManager.error(applicationStrings.message_error_invalid_portion[language])\r\n            return;\r\n        }\r\n\r\n        props.submitNewPortion(newPortion)\r\n        props.closeModal()\r\n    }\r\n\r\n    const updatePortionValue = (e) => {\r\n        const value = e.target.value\r\n\r\n        if (isNaN(value)) {\r\n            return\r\n        }\r\n\r\n        const valNum = parseInt(value)\r\n        setNewPortion(valNum)\r\n    }\r\n\r\n    return (\r\n        <Modal size={'sm'} show={true}>\r\n            <Modal.Header>\r\n                <h5 className=\"modal-title\">{props.foodName}</h5>\r\n                <button type=\"button\"\r\n                        className=\"btn-close\"\r\n                        data-dismiss=\"modal\"\r\n                        aria-label=\"Close\"\r\n                        onClick={props.closeModal}>\r\n                </button>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"modal-body\">\r\n                    <div>\r\n                        <span className={'form-label'}>{applicationStrings.label_edit_portion[language]}</span>\r\n                        <input className={\"form-control\"}\r\n                               value={newPortion}\r\n                               style={correspondingSelectElementStyle}\r\n                               onChange={value => updatePortionValue(value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <div>\r\n                    <button type=\"button\"\r\n                            className=\"btn btn-secondary form-button-sm\"\r\n                            onClick={props.closeModal}>\r\n                        {applicationStrings.button_cancel[language]}\r\n                    </button>\r\n                    <button type=\"button\"\r\n                            className=\"btn btn-primary form-button-sm\"\r\n                            onClick={submitNewPortion}>\r\n                        {applicationStrings.button_submit[language]}\r\n                    </button>\r\n                </div>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n\r\n}","import React, {useContext, useState} from \"react\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport {getNameFromFoodNameList} from \"../../service/nutrientdata/NameTypeService\";\r\nimport SelectedFoodItem from \"../../types/livedata/SelectedFoodItem\";\r\nimport {Button} from \"react-bootstrap\";\r\nimport {FaEdit, FaTrash} from \"react-icons/fa\";\r\nimport {EditPortionModal} from \"./EditPortionModal\";\r\n\r\nexport interface CompositeFoodListProps {\r\n    selectedFoodItems: Array<SelectedFoodItem>\r\n    deleteItem: (index: number) => void,\r\n    editCompositeElement: (index: number, newPortion: number) => void\r\n}\r\n\r\nexport function CompositeFoodList(props: CompositeFoodListProps) {\r\n    const languageContext = useContext(LanguageContext)\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n\r\n    const [showEditModal, setShowEditModal] = useState(false)\r\n    const [editModalIndex, setEditModalIndex] = useState<number | null>(null)\r\n\r\n    if (!applicationContext) {\r\n        return <div/>\r\n    }\r\n\r\n\r\n    const onDeleteItem = (index: number) => {\r\n        props.deleteItem(index)\r\n    }\r\n\r\n    const onEditItem = (editIndex: number) => {\r\n        setShowEditModal(true)\r\n        setEditModalIndex(editIndex)\r\n    }\r\n\r\n    const closeEditModal = () => {\r\n        setShowEditModal(false)\r\n        setEditModalIndex(null)\r\n    }\r\n\r\n    const setNewPortionData = (portion) => {\r\n        if(editModalIndex !== null) {\r\n            props.editCompositeElement(editModalIndex, portion)\r\n        }\r\n        closeEditModal()\r\n    }\r\n\r\n    const renderLine = (selectedFoodItem: SelectedFoodItem, index: number) => {\r\n        const name = getNameFromFoodNameList(applicationContext.foodDataCorpus.foodNames, selectedFoodItem.foodItem.nameId!!, languageContext.language)\r\n        return <div className={\"row\"}\r\n                    key={`composite food list ${index}`}\r\n                    style={{borderBottom: \"1px solid #dddddd\", paddingTop: \"6px\"}}>\r\n            <div className={\"col-1\"}>\r\n                <b>{index + 1}.</b>\r\n            </div>\r\n            <div className={\"col-8\"}>\r\n                {name}\r\n                <br/>\r\n                {selectedFoodItem.portion.amount} g\r\n            </div>\r\n            <div className={\"col-3\"}>\r\n                <Button style={{marginRight: \"1ch\"}} onClick={() => onEditItem(index)}>\r\n                    <FaEdit/>\r\n                </Button>\r\n                <Button onClick={() => onDeleteItem(index)}>\r\n                    <FaTrash/>\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    const editingFoodItem = editModalIndex !== null ? props.selectedFoodItems[editModalIndex] : null\r\n    const editingFoodItemName = editingFoodItem\r\n        ? getNameFromFoodNameList(applicationContext.foodDataCorpus.foodNames, editingFoodItem.foodItem.nameId!!, languageContext.language)\r\n        : ''\r\n    const editingFoodItemPortion = editingFoodItem ? editingFoodItem.portion.amount : 0\r\n\r\n    return <div className={\"container\"} style={{maxHeight: \"300px\", overflowY: \"auto\"}}>\r\n        {showEditModal &&\r\n        <EditPortionModal portionAmount={editingFoodItemPortion}\r\n                          foodName={editingFoodItemName ?? ''}\r\n                          closeModal={closeEditModal}\r\n                          submitNewPortion={setNewPortionData}/>\r\n\r\n        }\r\n        {props.selectedFoodItems.map((selectedFoodItem, index) => renderLine(selectedFoodItem, index))}\r\n    </div>\r\n\r\n}","import SelectedFoodItem from \"../../types/livedata/SelectedFoodItem\";\r\nimport FoodItem, {\r\n    BaseData,\r\n    CarbohydrateData,\r\n    CarotenoidData,\r\n    ExtendedVitaminE,\r\n    LipidData,\r\n    MineralData,\r\n    NutrientData,\r\n    ProteinData,\r\n    VitaminData\r\n} from \"../../types/nutrientdata/FoodItem\";\r\nimport {getNutrientData} from \"../nutrientdata/NutrientDataRetriever\";\r\n\r\nexport default function combineFoodItems(compositeList: Array<SelectedFoodItem>): SelectedFoodItem {\r\n    let portionSize = 0;\r\n\r\n    compositeList.forEach(selectedFoodItem => {\r\n        portionSize += selectedFoodItem.portion.amount\r\n    })\r\n\r\n    const nutrientDataList = buildAggregatedNutrientDataList(compositeList, portionSize);\r\n    const id = new Date().getTime();\r\n\r\n    const aggreatedFoodItem: FoodItem = {\r\n        id: id,\r\n        nutrientDataList: nutrientDataList,\r\n        aggregated: true\r\n    }\r\n\r\n    return {\r\n        id: id,\r\n        foodItem: aggreatedFoodItem,\r\n        portion: {\r\n            portionType: 999,\r\n            amount: portionSize\r\n        },\r\n        compositeSubElements: compositeList,\r\n        selectedSource: -1,\r\n        supplementData: true,\r\n        combineData: false\r\n    };\r\n}\r\n\r\n\r\nfunction buildAggregatedNutrientDataList(compositeList: Array<SelectedFoodItem>, portionSize: number): Array<NutrientData> {\r\n    const baseData = buildBaseDataObject(compositeList, portionSize);\r\n    const vitaminData = buildVitaminDataObject(compositeList, portionSize);\r\n    const mineralData = buildMineralDataObject(compositeList, portionSize);\r\n    const carbohydrateData = buildCarbohydrateData(compositeList, portionSize);\r\n    const lipidData = buildLipidData(compositeList, portionSize);\r\n    const proteinData = buildProteinData(compositeList, portionSize);\r\n\r\n    let nutrientObject: NutrientData = {\r\n        sourceItemId: \"0\",\r\n        source: {id: 0, url: \"\", name: \"\"},\r\n        baseData: baseData,\r\n        vitaminData: vitaminData,\r\n        mineralData: mineralData,\r\n        carbohydrateData: carbohydrateData,\r\n        lipidData: lipidData,\r\n        proteinData: proteinData\r\n    }\r\n\r\n    nutrientObject = removeNutrientObjectsWithNullValues(nutrientObject, compositeList);\r\n\r\n    const nutrientDataList: Array<NutrientData> = [];\r\n    nutrientDataList.push(nutrientObject);\r\n\r\n    return nutrientDataList;\r\n}\r\n\r\n\r\n/**\r\n * Removes all nutrient data elements that do not exist in ALL of the food elements within the list.\r\n * @param nutrientObject\r\n * @param compositeList\r\n */\r\nfunction removeNutrientObjectsWithNullValues(nutrientObject: NutrientData, compositeList: Array<SelectedFoodItem>) {\r\n    if (!compositeList) {\r\n        return nutrientObject;\r\n    }\r\n\r\n    for (let i = 0; i < compositeList.length; i++) {\r\n        let selectedFoodItem = compositeList[i]\r\n        const nutrientData = getNutrientData(selectedFoodItem)\r\n        const threshold = 0.1;   // Defines the amount of base data which must exist to set a sub-value to null.\r\n\r\n        // Remove base data\r\n        if (nutrientData.baseData.carbohydrates >= threshold) {\r\n            if (nutrientData.baseData.dietaryFibers == null) {\r\n                nutrientObject.baseData.dietaryFibers = null;\r\n            }\r\n        }\r\n\r\n\r\n        // Lipid data\r\n        if (nutrientData.baseData.lipids >= threshold) {\r\n            if (!nutrientData.lipidData || nutrientData.lipidData.saturated == null) {\r\n                nutrientObject.lipidData.saturated = null;\r\n            }\r\n\r\n            if (!nutrientData.lipidData || nutrientData.lipidData.unsaturatedMono == null) {\r\n                nutrientObject.lipidData.unsaturatedMono = null;\r\n            }\r\n\r\n            if (!nutrientData.lipidData || nutrientData.lipidData.unsaturatedPoly == null) {\r\n                nutrientObject.lipidData.unsaturatedPoly = null;\r\n            }\r\n\r\n            if (!nutrientData.lipidData || nutrientData.lipidData.transFattyAcids == null) {\r\n                nutrientObject.lipidData.transFattyAcids = null;\r\n            }\r\n\r\n            if (!nutrientData.lipidData || nutrientData.lipidData.cholesterol == null) {\r\n                nutrientObject.lipidData.cholesterol = null;\r\n            }\r\n\r\n            if (!nutrientData.lipidData.omegaData &&\r\n                (nutrientData.lipidData && nutrientData.lipidData.unsaturatedPoly && nutrientData.lipidData.unsaturatedPoly > threshold)) {\r\n                nutrientObject.lipidData.omegaData = null;\r\n            }\r\n        }\r\n\r\n\r\n        // Carbohydrate data\r\n        if (nutrientData.baseData.carbohydrates >= threshold) {\r\n            if (!nutrientData.carbohydrateData || nutrientData.carbohydrateData.sugar == null) {\r\n                nutrientObject.carbohydrateData.sugar = null;\r\n            }\r\n\r\n            if (!nutrientData.carbohydrateData || nutrientData.carbohydrateData.glucose == null) {\r\n                nutrientObject.carbohydrateData.glucose = null;\r\n            }\r\n\r\n            if (!nutrientData.carbohydrateData || nutrientData.carbohydrateData.fructose == null) {\r\n                nutrientObject.carbohydrateData.fructose = null;\r\n            }\r\n\r\n            if (!nutrientData.carbohydrateData || nutrientData.carbohydrateData.galactose == null) {\r\n                nutrientObject.carbohydrateData.galactose = null;\r\n            }\r\n\r\n            if (!nutrientData.carbohydrateData || nutrientData.carbohydrateData.sucrose == null) {\r\n                nutrientObject.carbohydrateData.sucrose = null;\r\n            }\r\n\r\n            if (!nutrientData.carbohydrateData || nutrientData.carbohydrateData.lactose == null) {\r\n                nutrientObject.carbohydrateData.lactose = null;\r\n            }\r\n\r\n            if (!nutrientData.carbohydrateData || nutrientData.carbohydrateData.maltose == null) {\r\n                nutrientObject.carbohydrateData.maltose = null;\r\n            }\r\n\r\n            if (!nutrientData.carbohydrateData || nutrientData.carbohydrateData.starch == null) {\r\n                nutrientObject.carbohydrateData.starch = null;\r\n            }\r\n        }\r\n\r\n\r\n        // Vitamins:\r\n        if (nutrientData.vitaminData.a === null) {\r\n            nutrientObject.vitaminData.a = null\r\n        }\r\n\r\n        if (nutrientData.vitaminData.b1 === null) {\r\n            nutrientObject.vitaminData.b1 = null\r\n        }\r\n\r\n        if (nutrientData.vitaminData.b2 === null) {\r\n            nutrientObject.vitaminData.b2 = null\r\n        }\r\n\r\n        if (nutrientData.vitaminData.b3 === null) {\r\n            nutrientObject.vitaminData.b3 = null\r\n        }\r\n\r\n        if (nutrientData.vitaminData.b5 === null) {\r\n            nutrientObject.vitaminData.b5 = null\r\n        }\r\n\r\n        if (nutrientData.vitaminData.b6 === null) {\r\n            nutrientObject.vitaminData.b6 = null\r\n        }\r\n\r\n        if (nutrientData.vitaminData.b7 === null) {\r\n            nutrientObject.vitaminData.b7 = null\r\n        }\r\n\r\n        if (nutrientData.vitaminData.b9 === null) {\r\n            nutrientObject.vitaminData.b9 = null\r\n        }\r\n\r\n        if (nutrientData.vitaminData.b12 === null) {\r\n            nutrientObject.vitaminData.b12 = null\r\n        }\r\n\r\n        if (nutrientData.vitaminData.c === null) {\r\n            nutrientObject.vitaminData.c = null\r\n        }\r\n\r\n        if (nutrientData.vitaminData.d === null) {\r\n            nutrientObject.vitaminData.d = null\r\n        }\r\n\r\n        if (nutrientData.vitaminData.e === null) {\r\n            nutrientObject.vitaminData.e = null\r\n        }\r\n\r\n        if (nutrientData.vitaminData.k === null) {\r\n            nutrientObject.vitaminData.k = null\r\n        }\r\n\r\n\r\n        // Minerals:\r\n        if (nutrientData.mineralData.calcium === null) {\r\n            nutrientObject.mineralData.calcium = null\r\n        }\r\n\r\n        if (nutrientData.mineralData.copper === null) {\r\n            nutrientObject.mineralData.copper = null\r\n        }\r\n\r\n        if (nutrientData.mineralData.iron === null) {\r\n            nutrientObject.mineralData.iron = null\r\n        }\r\n\r\n        if (nutrientData.mineralData.magnesium === null) {\r\n            nutrientObject.mineralData.magnesium = null\r\n        }\r\n\r\n        if (nutrientData.mineralData.manganese === null) {\r\n            nutrientObject.mineralData.manganese = null\r\n        }\r\n\r\n        if (nutrientData.mineralData.phosphorus === null) {\r\n            nutrientObject.mineralData.phosphorus = null\r\n        }\r\n\r\n        if (nutrientData.mineralData.potassium === null) {\r\n            nutrientObject.mineralData.potassium = null\r\n        }\r\n\r\n        if (nutrientData.mineralData.selenium === null) {\r\n            nutrientObject.mineralData.selenium = null\r\n        }\r\n\r\n        if (nutrientData.mineralData.sodium === null) {\r\n            nutrientObject.mineralData.sodium = null\r\n        }\r\n\r\n        if (nutrientData.mineralData.zinc === null) {\r\n            nutrientObject.mineralData.zinc = null\r\n        }\r\n\r\n\r\n        // Proteins:\r\n\r\n        if (nutrientData.proteinData.alanine === null) {\r\n            nutrientObject.proteinData.alanine = null\r\n        }\r\n\r\n        if (nutrientData.proteinData.arginine === null) {\r\n            nutrientObject.proteinData.arginine = null\r\n        }\r\n\r\n        if (nutrientData.proteinData.asparticAcid === null) {\r\n            nutrientObject.proteinData.asparticAcid = null\r\n        }\r\n\r\n        if (nutrientData.proteinData.cystine === null) {\r\n            nutrientObject.proteinData.cystine = null\r\n        }\r\n\r\n        if (nutrientData.proteinData.glutamicAcid === null) {\r\n            nutrientObject.proteinData.glutamicAcid = null\r\n        }\r\n\r\n        if (nutrientData.proteinData.glycine === null) {\r\n            nutrientObject.proteinData.glycine = null\r\n        }\r\n\r\n        if (nutrientData.proteinData.histidine === null) {\r\n            nutrientObject.proteinData.histidine = null\r\n        }\r\n\r\n        if (nutrientData.proteinData.isoleucine === null) {\r\n            nutrientObject.proteinData.isoleucine = null\r\n        }\r\n\r\n        if (nutrientData.proteinData.leucine === null) {\r\n            nutrientObject.proteinData.leucine = null\r\n        }\r\n\r\n        if (nutrientData.proteinData.lysine === null) {\r\n            nutrientObject.proteinData.lysine = null\r\n        }\r\n\r\n        if (nutrientData.proteinData.methionine === null) {\r\n            nutrientObject.proteinData.methionine = null\r\n        }\r\n\r\n        if (nutrientData.proteinData.phenylalanine === null) {\r\n            nutrientObject.proteinData.phenylalanine = null\r\n        }\r\n\r\n        if (nutrientData.proteinData.proline === null) {\r\n            nutrientObject.proteinData.proline = null\r\n        }\r\n\r\n        if (nutrientData.proteinData.serine === null) {\r\n            nutrientObject.proteinData.serine = null\r\n        }\r\n\r\n        if (nutrientData.proteinData.threonine === null) {\r\n            nutrientObject.proteinData.threonine = null\r\n        }\r\n\r\n        if (nutrientData.proteinData.tryptophan === null) {\r\n            nutrientObject.proteinData.tryptophan = null\r\n        }\r\n\r\n        if (nutrientData.proteinData.tyrosine === null) {\r\n            nutrientObject.proteinData.tyrosine = null\r\n        }\r\n\r\n        if (nutrientData.proteinData.valine === null) {\r\n            nutrientObject.proteinData.valine = null\r\n        }\r\n\r\n    }\r\n\r\n    return nutrientObject;\r\n}\r\n\r\n\r\nfunction buildBaseDataObject(compositeList: Array<SelectedFoodItem>, portionSize: number): BaseData {\r\n    let energy = 0;\r\n    let carbohydrates = 0;\r\n    let lipids = 0;\r\n    let proteins = 0;\r\n    let water = 0;\r\n    let dietaryFibers = 0;\r\n    let alcohol = 0;\r\n    let ash = 0;\r\n    let caffeine = 0;\r\n\r\n    compositeList.forEach(selectedFoodItem => {\r\n        const baseData = getNutrientData(selectedFoodItem).baseData;\r\n        const userSetPortion = selectedFoodItem.portion.amount;\r\n        const portionFactor = userSetPortion / 100;\r\n\r\n        energy += (baseData.energy ? baseData.energy : 0) * portionFactor;\r\n        carbohydrates += baseData.carbohydrates * portionFactor;\r\n        lipids += baseData.lipids * portionFactor;\r\n        proteins += baseData.proteins * portionFactor;\r\n        water += baseData.water * portionFactor;\r\n        dietaryFibers += (baseData.dietaryFibers ? baseData.dietaryFibers : 0) * portionFactor;\r\n        alcohol += (baseData.alcohol ? baseData.alcohol : 0) * portionFactor;\r\n        ash += (baseData.ash ? baseData.ash : 0) * portionFactor;\r\n        caffeine += (baseData.caffeine ? baseData.caffeine : 0) * portionFactor;\r\n    })\r\n\r\n    return {\r\n        energy: createFinalValue(energy, portionSize),\r\n        carbohydrates: createFinalValue(carbohydrates, portionSize),\r\n        lipids: createFinalValue(lipids, portionSize),\r\n        proteins: createFinalValue(proteins, portionSize),\r\n        water: createFinalValue(water, portionSize),\r\n        dietaryFibers: createFinalValue(dietaryFibers, portionSize),\r\n        alcohol: createFinalValue(alcohol, portionSize),\r\n        ash: createFinalValue(ash, portionSize),\r\n        caffeine: createFinalValue(caffeine, portionSize)\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction buildVitaminDataObject(compositeList: Array<SelectedFoodItem>, portionSize: number): VitaminData {\r\n    let a = 0\r\n    let b1 = 0\r\n    let b2 = 0\r\n    let b3 = 0\r\n    let b5 = 0\r\n    let b6 = 0\r\n    let b7 = 0\r\n    let b9 = 0\r\n    let b12 = 0\r\n    let c = 0\r\n    let d = 0\r\n    let e = 0\r\n    let k = 0\r\n\r\n    compositeList.forEach(selectedFoodItem => {\r\n        const vitaminData = getNutrientData(selectedFoodItem).vitaminData\r\n        const userSetPortion = selectedFoodItem.portion.amount\r\n        const portionFactor = userSetPortion / 100\r\n\r\n        a += (vitaminData.a ? vitaminData.a : 0) * portionFactor\r\n        b1 += (vitaminData.b1 ? vitaminData.b1 : 0) * portionFactor\r\n        b2 += (vitaminData.b2 ? vitaminData.b2 : 0) * portionFactor\r\n        b3 += (vitaminData.b3 ? vitaminData.b3 : 0) * portionFactor\r\n        b5 += (vitaminData.b5 ? vitaminData.b5 : 0) * portionFactor\r\n        b6 += (vitaminData.b6 ? vitaminData.b6 : 0) * portionFactor\r\n        b7 += (vitaminData.b7 ? vitaminData.b7 : 0) * portionFactor\r\n        b9 += (vitaminData.b9 ? vitaminData.b9 : 0) * portionFactor\r\n        b12 += (vitaminData.b12 ? vitaminData.b12 : 0) * portionFactor\r\n        c += (vitaminData.c ? vitaminData.c : 0) * portionFactor\r\n        d += (vitaminData.d ? vitaminData.d : 0) * portionFactor\r\n        e += (vitaminData.e ? vitaminData.e : 0) * portionFactor\r\n        k += (vitaminData.k ? vitaminData.k : 0) * portionFactor\r\n    })\r\n\r\n    return {\r\n        a: createFinalValue(a, portionSize),\r\n        b1: createFinalValue(b1, portionSize),\r\n        b2: createFinalValue(b2, portionSize),\r\n        b3: createFinalValue(b3, portionSize),\r\n        b5: createFinalValue(b5, portionSize),\r\n        b6: createFinalValue(b6, portionSize),\r\n        b7: createFinalValue(b7, portionSize),\r\n        b9: createFinalValue(b9, portionSize),\r\n        b12: createFinalValue(b12, portionSize),\r\n        c: createFinalValue(c, portionSize),\r\n        d: createFinalValue(d, portionSize),\r\n        e: createFinalValue(e, portionSize),\r\n        k: createFinalValue(k, portionSize),\r\n        carotenoidData: buildCarotenoidDataObject(compositeList, portionSize),\r\n        extendedVitaminE: buildExtendedVitaminEObject(compositeList, portionSize)\r\n    }\r\n}\r\n\r\n\r\nfunction buildCarotenoidDataObject(compositeList: Array<SelectedFoodItem>, portionSize: number): CarotenoidData {\r\n    let alpha = 0\r\n    let beta = 0\r\n    let cryptoxanthin = 0\r\n    let lycopene = 0\r\n    let lutein = 0\r\n\r\n    compositeList.forEach(selectedFoodItem => {\r\n        const carotenoidData = getNutrientData(selectedFoodItem).vitaminData.carotenoidData\r\n        const userSetPortion = selectedFoodItem.portion.amount\r\n        const portionFactor = userSetPortion / 100\r\n\r\n        if (carotenoidData !== null) {\r\n            alpha += (carotenoidData.caroteneAlpha ? carotenoidData.caroteneAlpha : 0) * portionFactor\r\n            beta += (carotenoidData.caroteneBeta ? carotenoidData.caroteneBeta : 0) * portionFactor\r\n            cryptoxanthin += (carotenoidData.cryptoxanthin ? carotenoidData.cryptoxanthin : 0) * portionFactor\r\n            lycopene += (carotenoidData.lycopene ? carotenoidData.lycopene : 0) * portionFactor\r\n            lutein += (carotenoidData.lutein ? carotenoidData.lutein : 0) * portionFactor\r\n        }\r\n    })\r\n\r\n    return {\r\n        caroteneAlpha: createFinalValue(alpha, portionSize),\r\n        caroteneBeta: createFinalValue(beta, portionSize),\r\n        cryptoxanthin: createFinalValue(cryptoxanthin, portionSize),\r\n        lycopene: createFinalValue(lycopene, portionSize),\r\n        lutein: createFinalValue(lutein, portionSize)\r\n    }\r\n}\r\n\r\nfunction buildExtendedVitaminEObject(compositeList: Array<SelectedFoodItem>, portionSize: number): ExtendedVitaminE {\r\n    let tocopherolBeta = 0\r\n    let tocopherolGamma = 0\r\n    let tocopherolDelta = 0\r\n    let tocotrienolAlpha = 0\r\n    let tocotrienolBeta = 0\r\n    let tocotrienolGamma = 0\r\n\r\n    compositeList.forEach(selectedFoodItem => {\r\n        const extendedVitaminEData = getNutrientData(selectedFoodItem).vitaminData.extendedVitaminE\r\n        const userSetPortion = selectedFoodItem.portion.amount\r\n        const portionFactor = userSetPortion / 100\r\n\r\n        if (extendedVitaminEData !== null) {\r\n            tocopherolBeta += (extendedVitaminEData.tocopherolBeta ? extendedVitaminEData.tocopherolBeta : 0) * portionFactor\r\n            tocopherolGamma += (extendedVitaminEData.tocopherolGamma ? extendedVitaminEData.tocopherolGamma : 0) * portionFactor\r\n            tocopherolDelta += (extendedVitaminEData.tocopherolDelta ? extendedVitaminEData.tocopherolDelta : 0) * portionFactor\r\n            tocotrienolAlpha += (extendedVitaminEData.tocotrienolAlpha ? extendedVitaminEData.tocotrienolAlpha : 0) * portionFactor\r\n            tocotrienolBeta += (extendedVitaminEData.tocotrienolBeta ? extendedVitaminEData.tocotrienolBeta : 0) * portionFactor\r\n            tocotrienolGamma += (extendedVitaminEData.tocotrienolGamma ? extendedVitaminEData.tocotrienolGamma : 0) * portionFactor\r\n        }\r\n    })\r\n\r\n    return {\r\n        tocopherolBeta: createFinalValue(tocopherolBeta, portionSize),\r\n        tocopherolGamma: createFinalValue(tocopherolGamma, portionSize),\r\n        tocopherolDelta: createFinalValue(tocopherolDelta, portionSize),\r\n        tocotrienolAlpha: createFinalValue(tocotrienolAlpha, portionSize),\r\n        tocotrienolBeta: createFinalValue(tocotrienolBeta, portionSize),\r\n        tocotrienolGamma: createFinalValue(tocotrienolGamma, portionSize)\r\n    }\r\n}\r\n\r\n\r\nfunction buildMineralDataObject(compositeList: Array<SelectedFoodItem>, portionSize: number): MineralData {\r\n    let calcium = 0;\r\n    let iron = 0;\r\n    let magnesium = 0;\r\n    let phosphorus = 0;\r\n    let potassium = 0;\r\n    let sodium = 0;\r\n    let zinc = 0;\r\n    let copper = 0;\r\n    let manganese = 0;\r\n    let selenium = 0;\r\n\r\n    compositeList.forEach(selectedFoodItem => {\r\n        const mineralData = getNutrientData(selectedFoodItem).mineralData\r\n        const userSetPortion = selectedFoodItem.portion.amount\r\n        const portionFactor = userSetPortion / 100\r\n\r\n        calcium += (mineralData.calcium ? mineralData.calcium : 0) * portionFactor;\r\n        iron += (mineralData.iron ? mineralData.iron : 0) * portionFactor;\r\n        magnesium += (mineralData.magnesium ? mineralData.magnesium : 0)\r\n        phosphorus += (mineralData.phosphorus ? mineralData.phosphorus : 0)\r\n        potassium += (mineralData.potassium ? mineralData.potassium : 0)\r\n        sodium += (mineralData.sodium ? mineralData.sodium : 0)\r\n        zinc += (mineralData.zinc ? mineralData.zinc : 0)\r\n        copper += (mineralData.copper ? mineralData.copper : 0)\r\n        manganese += (mineralData.manganese ? mineralData.manganese : 0)\r\n        selenium += (mineralData.selenium ? mineralData.selenium : 0)\r\n    })\r\n\r\n    return {\r\n        calcium: createFinalValue(calcium, portionSize),\r\n        iron: createFinalValue(iron, portionSize),\r\n        magnesium: createFinalValue(magnesium, portionSize),\r\n        phosphorus: createFinalValue(phosphorus, portionSize),\r\n        potassium: createFinalValue(potassium, portionSize),\r\n        sodium: createFinalValue(sodium, portionSize),\r\n        zinc: createFinalValue(zinc, portionSize),\r\n        copper: createFinalValue(copper, portionSize),\r\n        manganese: createFinalValue(manganese, portionSize),\r\n        selenium: createFinalValue(selenium, portionSize),\r\n    }\r\n}\r\n\r\n\r\nfunction buildCarbohydrateData(compositeList: Array<SelectedFoodItem>, portionSize: number): CarbohydrateData {\r\n    let glucose = 0;\r\n    let fructose = 0;\r\n    let galactose = 0;\r\n    let sucrose = 0;\r\n    let maltose = 0;\r\n    let lactose = 0;\r\n    let starch = 0;\r\n    let sugar = 0;\r\n\r\n    compositeList.forEach(selectedFoodItem => {\r\n        const carbohydrateData = getNutrientData(selectedFoodItem).carbohydrateData\r\n        const userSetPortion = selectedFoodItem.portion.amount\r\n        const portionFactor = userSetPortion / 100\r\n\r\n        glucose += (carbohydrateData.glucose ? carbohydrateData.glucose : 0) * portionFactor;\r\n        fructose += (carbohydrateData.fructose ? carbohydrateData.fructose : 0) * portionFactor;\r\n        galactose += (carbohydrateData.galactose ? carbohydrateData.galactose : 0) * portionFactor;\r\n        sucrose += (carbohydrateData.sucrose ? carbohydrateData.sucrose : 0) * portionFactor;\r\n        maltose += (carbohydrateData.maltose ? carbohydrateData.maltose : 0) * portionFactor;\r\n        lactose += (carbohydrateData.lactose ? carbohydrateData.lactose : 0) * portionFactor;\r\n        starch += (carbohydrateData.starch ? carbohydrateData.starch : 0) * portionFactor;\r\n        sugar += (carbohydrateData.sugar ? carbohydrateData.sugar : 0) * portionFactor;\r\n    })\r\n\r\n    return {\r\n        glucose: createFinalValue(glucose, portionSize),\r\n        fructose: createFinalValue(fructose, portionSize),\r\n        galactose: createFinalValue(galactose, portionSize),\r\n        sucrose: createFinalValue(sucrose, portionSize),\r\n        maltose: createFinalValue(maltose, portionSize),\r\n        lactose: createFinalValue(lactose, portionSize),\r\n        starch: createFinalValue(starch, portionSize),\r\n        sugar: createFinalValue(sugar, portionSize),\r\n    }\r\n}\r\n\r\n\r\nfunction buildProteinData(compositeList: Array<SelectedFoodItem>, portionSize: number): ProteinData {\r\n    let tryptophan = 0;\r\n    let threonine = 0;\r\n    let isoleucine = 0;\r\n    let leucine = 0;\r\n    let lysine = 0;\r\n    let methionine = 0;\r\n    let cystine = 0;\r\n    let phenylalanine = 0;\r\n    let tyrosine = 0;\r\n    let valine = 0;\r\n    let arginine = 0;\r\n    let histidine = 0;\r\n    let alanine = 0;\r\n    let asparticAcid = 0;\r\n    let glutamicAcid = 0;\r\n    let glycine = 0;\r\n    let proline = 0;\r\n    let serine = 0;\r\n\r\n    compositeList.forEach(selectedFoodItem => {\r\n        const proteinData = getNutrientData(selectedFoodItem).proteinData\r\n        const userSetPortion = selectedFoodItem.portion.amount\r\n        const portionFactor = userSetPortion / 100\r\n\r\n        tryptophan += (proteinData.tryptophan ? proteinData.tryptophan : 0) * portionFactor;\r\n        threonine += (proteinData.threonine ? proteinData.threonine : 0) * portionFactor;\r\n        isoleucine += (proteinData.isoleucine ? proteinData.isoleucine : 0) * portionFactor;\r\n        leucine += (proteinData.leucine ? proteinData.leucine : 0) * portionFactor;\r\n        lysine += (proteinData.lysine ? proteinData.lysine : 0) * portionFactor;\r\n        methionine += (proteinData.methionine ? proteinData.methionine : 0) * portionFactor;\r\n        cystine += (proteinData.cystine ? proteinData.cystine : 0) * portionFactor;\r\n        phenylalanine += (proteinData.phenylalanine ? proteinData.phenylalanine : 0) * portionFactor;\r\n        tyrosine += (proteinData.tyrosine ? proteinData.tyrosine : 0) * portionFactor;\r\n        valine += (proteinData.valine ? proteinData.valine : 0) * portionFactor;\r\n        arginine += (proteinData.arginine ? proteinData.arginine : 0) * portionFactor;\r\n        histidine += (proteinData.histidine ? proteinData.histidine : 0) * portionFactor;\r\n        alanine += (proteinData.alanine ? proteinData.alanine : 0) * portionFactor;\r\n        asparticAcid += (proteinData.asparticAcid ? proteinData.asparticAcid : 0) * portionFactor;\r\n        glutamicAcid += (proteinData.glutamicAcid ? proteinData.glutamicAcid : 0) * portionFactor;\r\n        glycine += (proteinData.glycine ? proteinData.glycine : 0) * portionFactor;\r\n        proline += (proteinData.proline ? proteinData.proline : 0) * portionFactor;\r\n        serine += (proteinData.serine ? proteinData.serine : 0) * portionFactor;\r\n    })\r\n\r\n    return {\r\n        tryptophan: createFinalValue(tryptophan, portionSize),\r\n        threonine: createFinalValue(threonine, portionSize),\r\n        isoleucine: createFinalValue(isoleucine, portionSize),\r\n        leucine: createFinalValue(leucine, portionSize),\r\n        lysine: createFinalValue(lysine, portionSize),\r\n        methionine: createFinalValue(methionine, portionSize),\r\n        cystine: createFinalValue(cystine, portionSize),\r\n        phenylalanine: createFinalValue(phenylalanine, portionSize),\r\n        tyrosine: createFinalValue(tyrosine, portionSize),\r\n        valine: createFinalValue(valine, portionSize),\r\n        arginine: createFinalValue(arginine, portionSize),\r\n        histidine: createFinalValue(histidine, portionSize),\r\n        alanine: createFinalValue(alanine, portionSize),\r\n        asparticAcid: createFinalValue(asparticAcid, portionSize),\r\n        glutamicAcid: createFinalValue(glutamicAcid, portionSize),\r\n        glycine: createFinalValue(glycine, portionSize),\r\n        proline: createFinalValue(proline, portionSize),\r\n        serine: createFinalValue(serine, portionSize),\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction buildLipidData(compositeList: Array<SelectedFoodItem>, portionSize: number): LipidData {\r\n    let unsaturatedMono = 0;\r\n    let unsaturatedPoly = 0;\r\n    let saturated = 0;\r\n    let omega3 = 0;\r\n    let omega6 = 0;\r\n    let omegaUncertain = 0;\r\n    let cholesterol = 0;\r\n    let transFattyAcids = 0;\r\n\r\n    compositeList.forEach(selectedFoodItem => {\r\n        const lipidData = getNutrientData(selectedFoodItem).lipidData\r\n        const userSetPortion = selectedFoodItem.portion.amount\r\n        const portionFactor = userSetPortion / 100\r\n\r\n        unsaturatedMono += (lipidData.unsaturatedMono ? lipidData.unsaturatedMono : 0) * portionFactor;\r\n        unsaturatedPoly += (lipidData.unsaturatedPoly ? lipidData.unsaturatedPoly : 0) * portionFactor;\r\n        saturated += (lipidData.saturated ? lipidData.saturated : 0) * portionFactor;\r\n        omega3 += (lipidData.omegaData?.omega3 ? lipidData.omegaData.omega3 : 0) * portionFactor;\r\n        omega6 += (lipidData.omegaData?.omega6 ? lipidData.omegaData.omega6 : 0) * portionFactor;\r\n        omegaUncertain += (lipidData.omegaData?.uncertain ? lipidData.omegaData.uncertain : 0) * portionFactor;\r\n        cholesterol += (lipidData.cholesterol ? lipidData.cholesterol : 0) * portionFactor;\r\n        transFattyAcids += (lipidData.transFattyAcids ? lipidData.transFattyAcids : 0) * portionFactor;\r\n    })\r\n\r\n    const omegaRatio = (omega3 + omega6) / (omega3 + omega6 + omegaUncertain)\r\n\r\n    return {\r\n        unsaturatedMono: createFinalValue(unsaturatedMono, portionSize),\r\n        unsaturatedPoly: createFinalValue(unsaturatedPoly, portionSize),\r\n        saturated: createFinalValue(saturated, portionSize),\r\n        omegaData: {\r\n            omega3: createFinalValue(omega3, portionSize),\r\n            omega6: createFinalValue(omega6, portionSize),\r\n            uncertain: createFinalValue(omegaUncertain, portionSize),\r\n            uncertainRatio: omegaRatio\r\n        },\r\n        cholesterol: createFinalValue(cholesterol, portionSize),\r\n        transFattyAcids: createFinalValue(transFattyAcids, portionSize),\r\n    }\r\n}\r\n\r\n\r\nfunction createFinalValue(value, totalPortionAmount) {\r\n    return (value / totalPortionAmount) * 100;\r\n}","import React, {ReactElement, useContext, useState} from \"react\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport getName from \"../../service/LanguageService\";\r\nimport {getNameFromFoodNameList} from \"../../service/nutrientdata/NameTypeService\";\r\nimport {getFoodClassesOfCategory} from \"../../service/nutrientdata/FoodClassService\";\r\nimport {getFoodItemsSelectList} from \"../../service/nutrientdata/FoodItemsService\";\r\nimport {Form, Modal} from \"react-bootstrap\";\r\n\r\ninterface CategoryTreeModalProps {\r\n    selectedCategory: number,\r\n    closeModal: () => void\r\n    selectFoodItemFromCategoryTree: (number) => void\r\n}\r\n\r\nexport function CategoryTreeModal(props: CategoryTreeModalProps): ReactElement {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const language = useContext(LanguageContext).language\r\n\r\n    const [separateByCategory, setSeparateByCategory] = useState(true)\r\n\r\n    if(!applicationContext) {\r\n        return <div>No content.</div>\r\n    }\r\n\r\n    const foodDataCorpus = applicationContext.foodDataCorpus\r\n    const { foodNames, conditions, foodClasses, foodItems } = foodDataCorpus\r\n\r\n    const onClickFoodItem = (foodItemId) => {\r\n        props.selectFoodItemFromCategoryTree(foodItemId)\r\n        props.closeModal()\r\n    }\r\n\r\n    const renderCategoryTree = () => {\r\n        const categories = props.selectedCategory === 0\r\n            ? foodDataCorpus.categories.slice(1)\r\n            : foodDataCorpus.categories.filter(category => category.id === props.selectedCategory)\r\n\r\n        if(props.selectedCategory !== 0 || separateByCategory) {  // Separate by category\r\n            return categories.map((category, index) => {\r\n                const name = getName(category, language)\r\n                const categoryHeading = props.selectedCategory === 0\r\n                    ? `${index+1}. ${name}`\r\n                    : name;\r\n                return <div style={{paddingBottom: \"4ch\"}} key={`tree-category-${index}`}>\r\n                    <h4>{categoryHeading}</h4>\r\n                    {renderFoodClasses(category.id)}\r\n                </div>\r\n            })\r\n        } else {   // List all food classes\r\n            return <div>\r\n                {renderFoodClasses(0)}\r\n            </div>\r\n        }\r\n    }\r\n\r\n    const renderFoodClasses = (categoryId) => {\r\n        const foodClassesOfCategory = getFoodClassesOfCategory(foodClasses, categoryId)\r\n        foodClassesOfCategory.sort((obj1, obj2) => {\r\n            const nameA = getNameFromFoodNameList(foodNames, obj1.nameKey, language, false) ?? ''\r\n            const nameB = getNameFromFoodNameList(foodNames, obj2.nameKey, language, false) ?? ''\r\n            return nameA.localeCompare(nameB)\r\n        })\r\n\r\n        return foodClassesOfCategory.map(foodClass => {\r\n            const foodClassName = getNameFromFoodNameList(foodNames, foodClass.nameKey ?? -1, language, false)\r\n            return <div style={{paddingLeft: \"2ch\", paddingBottom: \"1ch\"}} key={`tree-foodclass-${foodClass.id}`}>\r\n                <div className={\"form-text\"} style={{fontWeight: \"bold\"}}>{foodClassName}</div>\r\n                <div>{renderFoodItems(foodClass.id)}</div>\r\n            </div>\r\n        })\r\n    }\r\n\r\n    const renderFoodItems = (foodClassId) => {\r\n        const foodItemsSelectList = getFoodItemsSelectList(foodItems, foodClassId, foodNames, conditions, language)\r\n\r\n        return foodItemsSelectList.map(foodItemSelectOption => {\r\n            const foodItemId = foodItemSelectOption.value.id\r\n            return <div style={{paddingLeft: \"4ch\"}}  key={`tree-foodclass-${foodItemId}`}>\r\n                <button className={\"btn btn-link\"}\r\n                        onClick={() => onClickFoodItem(foodItemId)}>\r\n                    {foodItemSelectOption.label}\r\n                </button>\r\n            </div>\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Modal size={'lg'} show={true}>\r\n            <Modal.Header>\r\n                <h5 className=\"modal-title\">{applicationStrings.label_categoryTree_title[language]}</h5>\r\n                <button type=\"button\"\r\n                        className=\"btn-close\"\r\n                        data-dismiss=\"modal\"\r\n                        aria-label=\"Close\"\r\n                        onClick={props.closeModal}>\r\n                </button>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"modal-body\" style={{height: \"70vh\", overflowY: \"auto\"}}>\r\n                    {renderCategoryTree()}\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <div className={\"d-flex flex-row justify-content-between w-100\"}>\r\n                    <div>\r\n                        {props.selectedCategory === 0 &&\r\n                            <Form.Check inline className=\"form-radiobutton\"\r\n                                        checked={separateByCategory}\r\n                                        label={applicationStrings.label_categoryTree_checkbox[language]}\r\n                                        onChange={() => setSeparateByCategory(!separateByCategory)}>\r\n                            </Form.Check>\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"button\"\r\n                                className=\"btn btn-primary\"\r\n                                onClick={props.closeModal}>\r\n                            {applicationStrings.button_close[language]}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}","import {SOURCE_FNDDS, SOURCE_SRLEGACY} from \"../config/Constants\";\r\n\r\nexport function getSourceId(source: string) {\r\n    switch(source) {\r\n        case SOURCE_FNDDS:\r\n            return 1;\r\n        default:\r\n        case SOURCE_SRLEGACY:\r\n            return 0;\r\n    }\r\n}","import React, {ReactElement, useContext, useEffect, useState} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../../../contexts/ApplicationDataContext\";\r\nimport {LanguageContext} from \"../../../contexts/LangContext\";\r\nimport {Form, FormControl, FormGroup, Modal} from \"react-bootstrap\";\r\nimport {applicationStrings} from \"../../../static/labels\";\r\nimport {NutrientCondition} from \"../../../types/livedata/NutrientCondition\";\r\nimport {customSelectStyles} from \"../../../config/UI_Config\";\r\nimport Select from 'react-select';\r\nimport {getElementsOfRankingGroup, getNutrientGroup, getNutrientGroups} from \"../../../service/RankingService\";\r\nimport ReactSelectOption from \"../../../types/ReactSelectOption\";\r\nimport {getStatisticalNutrientInformation} from \"../../../service/nutrientdata/NutrientStatisticsService\";\r\nimport {getSourceId} from \"../../../service/Source\";\r\nimport {getUnit} from \"../../../service/calculation/NutrientCalculationService\";\r\nimport {autoRound} from \"../../../service/calculation/MathService\";\r\nimport NutrientStatistics from \"../../../types/livedata/NutrientStatistics\";\r\nimport {SOURCE_SRLEGACY} from \"../../../config/Constants\";\r\nimport {NotificationManager} from 'react-notifications'\r\nimport {FaLightbulb} from \"react-icons/fa\";\r\n\r\ninterface NutrientFilterSelectionProps {\r\n    closeModal: () => void\r\n    existingCondition?: NutrientCondition,\r\n    addCondition?: (condition: NutrientCondition) => void\r\n    editCondition?: (condition: NutrientCondition) => void\r\n}\r\n\r\nexport function NutrientFilterSelectionModal(props: NutrientFilterSelectionProps): ReactElement {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const language = useContext(LanguageContext).language\r\n\r\n    const nutrientGroups = getNutrientGroups(language);\r\n\r\n    const initialElementsList = getElementsOfRankingGroup(nutrientGroups[0].value, language)\r\n    const initialElement = props.existingCondition\r\n        ? props.existingCondition.nutrient\r\n        : initialElementsList && initialElementsList.length > 0\r\n            ? initialElementsList[0]\r\n            : null  // Fallback\r\n\r\n\r\n    const initialGroup = props.existingCondition\r\n        ? initialElement\r\n            ? getNutrientGroup(initialElement.value, language) !== undefined\r\n                ? getNutrientGroup(initialElement.value, language)!!\r\n                : nutrientGroups[0] // Fallback\r\n            : nutrientGroups[0] // Fallback\r\n        : nutrientGroups[0]\r\n\r\n    const foodItems = applicationContext?.foodDataCorpus.foodItems ?? []\r\n    const preferredSourceId = getSourceId(applicationContext?.applicationData.preferredSource ?? SOURCE_SRLEGACY)\r\n    const initialStatistics = initialElement ? getStatisticalNutrientInformation(initialElement.value, foodItems, preferredSourceId) : null\r\n\r\n    const [elementsList, setElementsList] = useState<Array<any>>(initialElementsList ?? [])\r\n    const [selectedGroup, setSelectedGroup] = useState<ReactSelectOption>(initialGroup)\r\n    const [selectedElement, setSelectedElement] = useState<any>(initialElement)\r\n    const [nutrientStatistics, setNutrientStatistics] = useState<NutrientStatistics | null>(null)\r\n\r\n    const initialMin = props.existingCondition\r\n        ? props.existingCondition.min\r\n        : initialStatistics\r\n            ? initialStatistics.minimumAmount ?? 0\r\n            : 0\r\n\r\n    const initialMax = props.existingCondition\r\n        ? props.existingCondition.max\r\n        : initialStatistics\r\n            ? initialStatistics.maximumAmount ?? 999\r\n            : 999\r\n\r\n    const [minValue, setMinValue] = useState<number>(initialMin)\r\n    const [maxValue, setMaxValue] = useState<number>(initialMax)\r\n\r\n    useEffect(() => {\r\n        if (applicationContext) {\r\n            if (!props.existingCondition) {\r\n                const statisticalNutrientInformation = getStatisticalNutrientInformation(selectedElement.value, foodItems, preferredSourceId)\r\n                setNutrientStatistics(statisticalNutrientInformation)\r\n                setMinValue(statisticalNutrientInformation.minimumAmount ?? 0)\r\n                setMaxValue(statisticalNutrientInformation.maximumAmount ?? 999)\r\n            } else {\r\n                const statisticalNutrientInformation = getStatisticalNutrientInformation(props.existingCondition.nutrient.value,\r\n                    foodItems, preferredSourceId)\r\n                setNutrientStatistics(statisticalNutrientInformation)\r\n            }\r\n        }\r\n    }, [selectedElement])\r\n\r\n\r\n    if (!applicationContext) {\r\n        return <div/>\r\n    }\r\n\r\n    const handleGroupChange = (selectedOption) => {\r\n        setSelectedGroup(selectedOption)\r\n        const newElementsList = getElementsOfRankingGroup(selectedOption.value, language)\r\n        setElementsList(newElementsList)\r\n        setSelectedElement(newElementsList[0])\r\n    }\r\n\r\n    const handleValueChange = (selectedOption) => {\r\n        setSelectedElement(selectedOption)\r\n    }\r\n\r\n    const setMinimum = (event: any) => {\r\n        const min = event.target.value\r\n\r\n        if (isNaN(min)) {\r\n            return\r\n        }\r\n\r\n        const minValue = parseFloat(min)\r\n        if(isNaN(minValue)) {\r\n            setMinValue(0)\r\n            return\r\n        }\r\n\r\n        if (nutrientStatistics && nutrientStatistics.minimumAmount !== null && minValue < nutrientStatistics.minimumAmount) {\r\n            NotificationManager.info(applicationStrings.message_filter_value_correction_min[language])\r\n            setMinValue(nutrientStatistics.minimumAmount)\r\n        } else if (nutrientStatistics && nutrientStatistics.maximumAmount !== null && minValue > nutrientStatistics.maximumAmount) {\r\n            NotificationManager.info(applicationStrings.message_filter_value_correction_max[language])\r\n            setMinValue(nutrientStatistics.maximumAmount)\r\n            setMaxValue(nutrientStatistics.maximumAmount)\r\n        } else {\r\n            setMinValue(minValue)\r\n        }\r\n    }\r\n\r\n    const setMaximum = (event: any) => {\r\n        const max = event.target.value\r\n\r\n        if (isNaN(max)) {\r\n            return\r\n        }\r\n\r\n        const maxValue = parseFloat(max)\r\n        if(isNaN(maxValue)) {\r\n            setMaxValue(0)\r\n            return\r\n        }\r\n\r\n        if (nutrientStatistics && nutrientStatistics.maximumAmount !== null && maxValue > nutrientStatistics.maximumAmount) {\r\n            NotificationManager.info(applicationStrings.message_filter_value_correction_max[language])\r\n            setMaxValue(nutrientStatistics.maximumAmount)\r\n        } else if (nutrientStatistics && nutrientStatistics.minimumAmount !== null && maxValue < nutrientStatistics.minimumAmount) {\r\n            NotificationManager.info(applicationStrings.message_filter_value_correction_min[language])\r\n            setMinValue(nutrientStatistics.minimumAmount)\r\n            setMaxValue(nutrientStatistics.minimumAmount)\r\n        } else {\r\n            setMaxValue(maxValue)\r\n        }\r\n    }\r\n\r\n    const onAddCondition = () => {\r\n        const nutrient = selectedElement.value\r\n\r\n        if (applicationContext.applicationData.nutrientFilter.find(condition => condition.nutrient.value === nutrient) !== undefined) {\r\n            NotificationManager.error(applicationStrings.message_filter_error_existing[language])\r\n            return\r\n        }\r\n\r\n        if (minValue > maxValue) {\r\n            NotificationManager.error(applicationStrings.message_filter_error_range[language])\r\n            return\r\n        }\r\n\r\n        const condition: NutrientCondition = {\r\n            nutrient: selectedElement,\r\n            min: minValue,\r\n            max: maxValue,\r\n        }\r\n\r\n        if (props.addCondition) {\r\n            props.addCondition(condition)\r\n        } else {\r\n            props.closeModal()\r\n        }\r\n    }\r\n\r\n    const onEditCondition = () => {\r\n        if (minValue > maxValue) {\r\n            NotificationManager.error(applicationStrings.message_filter_error_range[language])\r\n            return\r\n        }\r\n\r\n        const changedCondition: NutrientCondition = {...props.existingCondition!!, min: minValue, max: maxValue}\r\n        if (props.editCondition) {\r\n            props.editCondition(changedCondition)\r\n        } else {\r\n            props.closeModal()\r\n        }\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        if (props.existingCondition) {\r\n            onEditCondition()\r\n        } else {\r\n            onAddCondition()\r\n        }\r\n    }\r\n\r\n\r\n    const renderForm = () => {\r\n        const inputFieldStyle = {padding: \"0.3ch\", margin: \"0ch\"}\r\n\r\n        return (\r\n            <div>\r\n                <div className={\"select-menu form-section\"}>\r\n                    <span className={\"form-label\"}>{applicationStrings.label_group[language]}:</span>\r\n                    <Select className=\"form-control-sm\"\r\n                            options={nutrientGroups}\r\n                            isDisabled={props.existingCondition}\r\n                            value={selectedGroup}\r\n                            styles={customSelectStyles}\r\n                            onChange={handleGroupChange}\r\n                    />\r\n                </div>\r\n                <div className={\"select-menu form-section\"}>\r\n                    <span className={\"form-label\"}>{applicationStrings.label_value[language]}:</span>\r\n                    <Select className=\"form-control-sm\"\r\n                            options={elementsList}\r\n                            isDisabled={props.existingCondition}\r\n                            value={selectedElement}\r\n                            styles={customSelectStyles}\r\n                            onChange={handleValueChange}\r\n                    />\r\n                </div>\r\n                <div className={\"d-flex flex-row\"}>\r\n                    <FormGroup>\r\n                        <div className={\"d-flex flex-row\"}>\r\n                            <Form className={\"form-elements\"}>\r\n                                <Form.Label style={{margin: \"0\"}}>Min:</Form.Label>\r\n                                <FormControl\r\n                                    className={\"form-control input\"}\r\n                                    style={inputFieldStyle}\r\n                                    type=\"number\"\r\n                                    value={`${minValue}`}\r\n                                    onChange={setMinimum}\r\n                                />\r\n                            </Form>\r\n                            <Form className={\"form-elements\"}>\r\n                                <Form.Label style={{margin: \"0\"}}>Max:</Form.Label>\r\n                                <FormControl\r\n                                    className={\"form-control input\"}\r\n                                    style={inputFieldStyle}\r\n                                    type=\"number\"\r\n                                    value={`${maxValue}`}\r\n                                    onChange={setMaximum}\r\n                                />\r\n                            </Form>\r\n                        </div>\r\n                    </FormGroup>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderInfoPane = () => {\r\n        if (!nutrientStatistics) {\r\n            return <div/>\r\n        }\r\n\r\n        const foodItems = applicationContext.foodDataCorpus.foodItems\r\n\r\n        const getInfoHeaderText = (): string => {\r\n            const allValues = foodItems.length\r\n            const availableValues = nutrientStatistics.allValuesSorted.length\r\n            const nutrientName = selectedElement.label\r\n\r\n            const inRange = nutrientStatistics.allValuesSorted.filter(val => val >= minValue && val <= maxValue).length\r\n\r\n            /*\r\n             * MANUAL TRANSLATION because of the text complexity.\r\n             */\r\n\r\n            let infoText = language === \"de\"\r\n                ? `Von den ${allValues} vorhandenen Lebensmitteln haben ${availableValues} Angaben zu ${nutrientName}.`\r\n                : `Out of ${allValues} available foods ${availableValues} contain information about ${nutrientName}.`\r\n\r\n            if (inRange < availableValues) {\r\n                if (inRange > 1) {\r\n                    infoText += language === \"de\"\r\n                        ? ` Insgesamt liegen im eingegebenen Wertebereich ${inRange} verschiedene Lebensmittel.`\r\n                        : ` The specified data range altogether contains ${inRange} different food items.`\r\n                } else if (inRange === 1) {\r\n                    infoText += language === \"de\"\r\n                        ? ` In dem eingegebenen Wertebereich befindet sich 1 Lebensmittel.`\r\n                        : ` The specified data range contains 1 food items.`\r\n                } else {\r\n                    infoText += language === \"de\"\r\n                        ? ` In dem eingegeben Wertebereich befindet sich kein Lebensmittel!`\r\n                        : ` No food item is in the specified data range.`\r\n                }\r\n            }\r\n\r\n            return infoText\r\n        }\r\n\r\n        const unit = getUnit(selectedElement.value)\r\n        const keyStyle = {minWidth: \"12ch\"}\r\n\r\n        return (\r\n            <div className={\"form-text\"} style={{paddingLeft: \"2ch\"}}>\r\n                <div>\r\n                    <div style={{minHeight: \"15vh\"}}>\r\n                        <FaLightbulb/> {getInfoHeaderText()}\r\n                    </div>\r\n                </div>\r\n                <div style={{paddingLeft: \"3.5ch\"}}>\r\n                    <div className={\"d-flex flex-row\"}>\r\n                        <div style={keyStyle}><b>Minimum:</b></div>\r\n                        <div>{nutrientStatistics.minimumAmount} {unit}</div>\r\n                    </div>\r\n                    <div className={\"d-flex flex-row\"}>\r\n                        <div style={keyStyle}><b>Maximum:</b></div>\r\n                        <div>{nutrientStatistics.maximumAmount} {unit}</div>\r\n                    </div>\r\n                    <div className={\"d-flex flex-row\"}>\r\n                        <div style={keyStyle}><b>{applicationStrings.label_overallview_avg[language]}:</b></div>\r\n                        <div>{autoRound(nutrientStatistics.averageAmount)} {unit}</div>\r\n                    </div>\r\n                    <div className={\"d-flex flex-row\"}>\r\n                        <div style={keyStyle}><b>Median:</b></div>\r\n                        <div>{autoRound(nutrientStatistics.median)} {unit}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal className={\"filter-selection-modal\"}\r\n               size={'lg'}\r\n               show={true}\r\n               backdrop=\"static\">\r\n            <Modal.Header>\r\n                <h5 className=\"modal-title\">{applicationStrings.label_filterModal_selection[language]}</h5>\r\n                <button type=\"button\"\r\n                        className=\"btn-close\"\r\n                        data-dismiss=\"modal\"\r\n                        aria-label=\"Close\"\r\n                        onClick={props.closeModal}>\r\n                </button>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className={\"container row\"} style={{height: \"38vh\"}}>\r\n                    <div className={\"col-6\"}>\r\n                        {renderForm()}\r\n                    </div>\r\n                    <div className={\"col-6\"}>\r\n                        {renderInfoPane()}\r\n                    </div>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer className={\"justify-content-end\"}>\r\n                <div>\r\n                    <button type=\"button\"\r\n                            className=\"btn btn-secondary\"\r\n                            onClick={props.closeModal}>\r\n                        {applicationStrings.button_close[language]}\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    <span>\r\n                        <button type=\"button\"\r\n                                className=\"btn btn-primary\"\r\n                                onClick={onSubmit}>\r\n                            {applicationStrings.button_add[language]}\r\n                        </button>\r\n                    </span>\r\n                </div>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}","import FoodItem from \"../../types/nutrientdata/FoodItem\";\r\nimport {NutrientCondition} from \"../../types/livedata/NutrientCondition\";\r\nimport {FilteredFoodItem} from \"../../types/livedata/SelectedFoodItem\";\r\nimport {OPERATOR_ALL, OPERATOR_ANY} from \"../../config/Constants\";\r\nimport {getValueOfFoodItem} from \"../RankingService\";\r\n\r\nexport function filterFoodItems(foodItems: Array<FoodItem>, conditions: Array<NutrientCondition>, operator: number,\r\n                                preferredSource: number): Array<FilteredFoodItem> {\r\n    const resultList: Array<FilteredFoodItem> = [];\r\n\r\n    const addResultObject = (foodItem, source) => {\r\n        resultList.push({\r\n            foodItem: foodItem,\r\n            source: source\r\n        })\r\n    }\r\n\r\n    foodItems.forEach((foodItem) => {\r\n        const matchingSources: Array<number> = []\r\n        foodItem.nutrientDataList.forEach((nutrientData) => {\r\n            let failedCondition = false\r\n            let successfulCondition = false\r\n            conditions.forEach(condition => {\r\n                const match = checkCondition(condition, foodItem, nutrientData.source.id)\r\n                if(match) {\r\n                    successfulCondition = true\r\n                    if(operator === OPERATOR_ANY) {\r\n                        return // Nutrient data matched one condition => no need to check further conditions\r\n                    }\r\n                } else if(!match && operator === OPERATOR_ALL) { // Nutrient data failed one condition => total fail => no need to go on\r\n                    failedCondition = true\r\n                    return\r\n                }\r\n            })\r\n\r\n            // Food item is a match if it succeeded at least one condition (OR mode) and never failed any condition (AND mode)\r\n            if(successfulCondition && !failedCondition) {\r\n                matchingSources.push(nutrientData.source.id)\r\n            }\r\n        })\r\n\r\n        if(matchingSources.length == 2) {  // We have two matching sources => take the preferred source\r\n            const source = matchingSources.filter(source => source === preferredSource)\r\n            if(source) {\r\n                addResultObject(foodItem, source)\r\n            }\r\n        } else if(matchingSources.length === 1) {\r\n            addResultObject(foodItem, matchingSources[0])\r\n        }\r\n    })\r\n\r\n    return resultList\r\n}\r\n\r\n\r\nfunction checkCondition(condition: NutrientCondition, foodItem: FoodItem, sourceId: number): boolean {\r\n    const value = getValueOfFoodItem(foodItem, condition.nutrient.value, sourceId, false)\r\n\r\n    if(!value) {\r\n        return false\r\n    }\r\n\r\n    return value >= condition.min && value <= condition.max\r\n}","import React, {ReactElement, useContext, useEffect, useState} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../../../contexts/ApplicationDataContext\";\r\nimport {LanguageContext} from \"../../../contexts/LangContext\";\r\nimport {Button, Form, ListGroup, ListGroupItem, Modal} from \"react-bootstrap\";\r\nimport {applicationStrings} from \"../../../static/labels\";\r\nimport {FaEdit, FaQuestionCircle, FaTrash} from \"react-icons/fa\";\r\nimport {getHelpText} from \"../../../service/HelpService\";\r\nimport {HelpModal} from \"../../HelpModal\";\r\nimport {NutrientFilterSelectionModal} from \"./NutrientFilterSelection\";\r\nimport {NutrientCondition} from \"../../../types/livedata/NutrientCondition\";\r\nimport {getUnit} from \"../../../service/calculation/NutrientCalculationService\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport {filterFoodItems} from \"../../../service/nutrientdata/FilterService\";\r\nimport {FilteredFoodItem} from \"../../../types/livedata/SelectedFoodItem\";\r\nimport Select from 'react-select';\r\nimport {getFoodItemName} from \"../../../service/nutrientdata/FoodItemsService\";\r\nimport ReactSelectOption from \"../../../types/ReactSelectOption\";\r\nimport {OPERATOR_ALL, OPERATOR_ANY} from \"../../../config/Constants\";\r\nimport {getSourceId} from \"../../../service/Source\";\r\nimport getName from \"../../../service/LanguageService\";\r\n\r\ninterface FilterModalProps {\r\n    closeModal: () => void\r\n    selectFoodItemFromFilterModal: (selectedFilterResult: FilteredFoodItem) => void\r\n}\r\n\r\nexport function FilterModal(props: FilterModalProps): ReactElement {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const language = useContext(LanguageContext).language\r\n\r\n    const [showHelpModal, setShowHelpModal] = useState<boolean>(false)\r\n    const [showNutrientFilterModal, setShowNutrientFilterModal] = useState<boolean>(false)\r\n    const [editingCondition, setEditingCondition] = useState<NutrientCondition | null>(null)\r\n    const [filterResult, setFilterResult] = useState<Array<FilteredFoodItem>>([])\r\n    const [selectList, setSelectList] = useState<Array<ReactSelectOption>>([])\r\n    const [selectedFilterResult, setSelectedFilterResult] = useState<ReactSelectOption | null>(null)\r\n    const [calculationTypeAny, setCalculationTypeAny] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        if (!applicationContext) {\r\n            return\r\n        }\r\n        const {foodItems} = applicationContext.foodDataCorpus\r\n        const filterConditions = applicationContext?.applicationData.nutrientFilter\r\n        const preferredSource = applicationContext.applicationData.preferredSource\r\n        const preferredSourceId = getSourceId(preferredSource)\r\n\r\n        const operator = calculationTypeAny ? OPERATOR_ANY : OPERATOR_ALL\r\n\r\n        if (foodItems && filterConditions) {\r\n            const filterData = filterFoodItems(foodItems, filterConditions, operator, preferredSourceId)\r\n            setFilterResult(filterData)\r\n            const {foodNames} = applicationContext.foodDataCorpus\r\n            const selectList = filterData.map((filterResult) => {\r\n                const foodName = getFoodItemName(filterResult.foodItem, foodNames, language)\r\n                const condition = applicationContext.foodDataCorpus.conditions.find(\r\n                    condition => condition.id === filterResult.foodItem.conditionId\r\n                )\r\n                const conditionName = condition && filterResult.foodItem.conditionId !== 100 ? `[${getName(condition, language)}]` : \"\"\r\n                return {\r\n                    value: filterResult.foodItem.id,\r\n                    label: `${foodName} ${conditionName}` ?? \"\"\r\n                }\r\n            })\r\n\r\n            if (selectList && selectList.length > 1) {\r\n                selectList.sort((obj1, obj2) => obj1.label.localeCompare(obj2.label))\r\n            }\r\n\r\n            setSelectList(selectList)\r\n            if (selectList.length > 0) {\r\n                setSelectedFilterResult(selectList[0])\r\n            } else {\r\n                setSelectedFilterResult(null)\r\n            }\r\n        }\r\n        if (filterConditions.length === 0) {\r\n            setSelectedFilterResult(null)\r\n        }\r\n    }, [applicationContext?.applicationData.nutrientFilter, calculationTypeAny])\r\n\r\n    if (!applicationContext) {\r\n        return <div/>\r\n    }\r\n\r\n    const onOpenHelpModal = () => {\r\n        setShowHelpModal(true)\r\n    }\r\n\r\n    const onOpenNutrientSelectorModal = () => {\r\n        setShowNutrientFilterModal(true)\r\n    }\r\n\r\n    const addCondition = (condition: NutrientCondition) => {\r\n        const filter = [...applicationContext.applicationData.nutrientFilter]\r\n        filter.push(condition)\r\n        applicationContext.setNutrientFilter(filter)\r\n        setShowNutrientFilterModal(false)\r\n    }\r\n\r\n    const editCondition = (editCondition: NutrientCondition) => {\r\n        const filter = [...applicationContext.applicationData.nutrientFilter].map(existingCondition => {\r\n            return existingCondition.nutrient.value !== editCondition.nutrient.value\r\n                ? existingCondition\r\n                : editCondition\r\n        })\r\n        applicationContext.setNutrientFilter(filter)\r\n        setEditingCondition(null)\r\n        setShowNutrientFilterModal(false)\r\n    }\r\n\r\n    const onEditCondition = (condition: NutrientCondition) => {\r\n        setEditingCondition(condition)\r\n        setShowNutrientFilterModal(true)\r\n    }\r\n\r\n    const onRemoveCondition = (condition: NutrientCondition) => {\r\n        const filter = [...applicationContext.applicationData.nutrientFilter].filter(c => c.nutrient.value !== condition.nutrient.value)\r\n        applicationContext.setNutrientFilter(filter)\r\n    }\r\n\r\n    const closeFilterSelectionModal = () => {\r\n        setEditingCondition(null) // Reset the Edit-state under all circumstances\r\n        setShowNutrientFilterModal(false)\r\n    }\r\n\r\n    const selectFoodItem = () => {\r\n        const result = filterResult.find(entry => entry.foodItem.id === selectedFilterResult?.value)\r\n\r\n        if (result) {\r\n            props.selectFoodItemFromFilterModal(result);\r\n        }\r\n        props.closeModal()\r\n    }\r\n\r\n    const handleSelectionClick = (selection: ReactSelectOption) => {\r\n        setSelectedFilterResult(selection)\r\n    }\r\n\r\n    const helpText = getHelpText(13, language)\r\n\r\n    const renderFilterListEntry = (condition: NutrientCondition) => {\r\n        const nutrient = condition.nutrient.value\r\n        const unit = getUnit(nutrient)\r\n\r\n        return (\r\n            <ListGroupItem key={`lg-${condition.nutrient.value}`}>\r\n                <div><b>{condition.nutrient.label}</b></div>\r\n                <div className={\"d-flex flex-row justify-content-between align-items-middle\"}>\r\n                    <div className={\"d-flex flex-row\"}>\r\n                        <div style={{marginRight: \"1ch\"}}><i>Min:</i></div>\r\n                        <div style={{marginRight: \"3ch\"}}><i>{condition.min} {unit}</i></div>\r\n                        <div style={{marginRight: \"1ch\"}}><i>Max:</i></div>\r\n                        <div style={{marginRight: \"3ch\"}}><i>{condition.max} {unit}</i></div>\r\n                    </div>\r\n                    <div>\r\n                        <Button onClick={() => onEditCondition(condition)}\r\n                                style={{marginRight: \"1ch\"}}\r\n                                className={\"btn btn-secondary\"}\r\n                                data-for={\"fa-btn-edit\"}\r\n                                data-tip={applicationStrings.tooltip_filter_edit[language]}>\r\n                            <FaEdit/>\r\n                            <ReactTooltip id={\"fa-btn-edit\"} globalEventOff=\"click\"/>\r\n                        </Button>\r\n                        <Button onClick={() => onRemoveCondition(condition)}\r\n                                className={\"btn btn-secondary\"}\r\n                                data-for={\"fa-btn-close\"}\r\n                                data-tip={applicationStrings.tooltip_filter_remove[language]}>\r\n                            <FaTrash/>\r\n                            <ReactTooltip id={\"fa-btn-close\"}/>\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </ListGroupItem>\r\n        )\r\n    }\r\n\r\n    const renderFilterList = () => {\r\n        return (\r\n            <div style={{height: \"50vh\", overflowY: \"auto\"}}>\r\n                {applicationContext.applicationData.nutrientFilter.length > 0\r\n                    ?\r\n                    (\r\n                        <ListGroup>\r\n                            {applicationContext.applicationData.nutrientFilter.map(condition => renderFilterListEntry(condition))}\r\n                        </ListGroup>\r\n                    ) :\r\n                    (\r\n                        <div>\r\n                            {applicationStrings.label_filterModal_note_addCondition[language]}\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    const renderResultList = () => {\r\n        if (applicationContext.applicationData.nutrientFilter.length === 0) {\r\n            return <div/>\r\n        }\r\n\r\n        if (filterResult.length === 0) {\r\n            return <div>\r\n                {applicationStrings.label_filterModal_note_noData[language]}\r\n            </div>\r\n        }\r\n\r\n        const resultMessage = filterResult.length === 1\r\n            ? `${filterResult.length} ${applicationStrings.label_result[language]}`\r\n            : `${filterResult.length} ${applicationStrings.label_results[language]}`\r\n\r\n        return (\r\n            <div>\r\n                <div className={\"form-section\"}>\r\n                    <span className={'form-label'}>{applicationStrings.label_selection[language]}:</span>\r\n                    <Select options={selectList}\r\n                            value={selectedFilterResult ? selectedFilterResult : selectList[0]}\r\n                            onChange={handleSelectionClick}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    {resultMessage}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const radioButtonDisabled = applicationContext.applicationData.nutrientFilter.length <= 1\r\n\r\n    const renderLeftFooterPart = () => {\r\n        return (\r\n            <div>\r\n                <span style={{paddingRight: \"2ch\"}}>\r\n                    <Button className={\"btn btn-secondary\"} onClick={onOpenHelpModal}>\r\n                        <FaQuestionCircle/>\r\n                    </Button>\r\n                </span>\r\n                <span>\r\n                        <button type=\"button\"\r\n                                className=\"btn btn-primary\"\r\n                                onClick={onOpenNutrientSelectorModal}>\r\n                            {applicationStrings.label_filterModal_add[language]}\r\n                        </button>\r\n                    </span>\r\n                <span style={{paddingLeft: \"5ch\"}}>\r\n                        <Form.Label className={\"form-elements\"}>\r\n                            <b>{applicationStrings.button_mode[language]}:</b>\r\n                        </Form.Label>\r\n                        <Form.Check className=\"form-radiobutton mr-4\"\r\n                                    type=\"radio\"\r\n                                    inline={true}\r\n                                    label={applicationStrings.label_mode_all[language]}\r\n                                    data-for={\"rb-option-all\"}\r\n                                    data-tip={applicationStrings.tooltip_filter_option_all[language]}\r\n                                    disabled={radioButtonDisabled}\r\n                                    checked={!calculationTypeAny}\r\n                                    onChange={() => setCalculationTypeAny(false)}\r\n                        />\r\n                        <ReactTooltip id={\"rb-option-all\"} globalEventOff=\"click\"/>\r\n                        <Form.Check className=\"form-radiobutton form-horizontal-separation\"\r\n                                    type=\"radio\"\r\n                                    inline={true}\r\n                                    label={applicationStrings.label_mode_any[language]}\r\n                                    data-for={\"rb-option-any\"}\r\n                                    data-tip={applicationStrings.tooltip_filter_option_any[language]}\r\n                                    disabled={radioButtonDisabled}\r\n                                    checked={calculationTypeAny}\r\n                                    onChange={() => setCalculationTypeAny(true)}\r\n                        />\r\n                        <ReactTooltip id={\"rb-option-any\"} globalEventOff=\"click\"/>\r\n                    </span>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderRightFooterPart = () => {\r\n        return (\r\n            <div className={\"d-flex flex-row justify-content-end\"}>\r\n                <div style={{paddingRight: \"2ch\"}}>\r\n                    <button type=\"button\"\r\n                            className=\"btn btn-secondary\"\r\n                            onClick={props.closeModal}>\r\n                        {applicationStrings.button_close[language]}\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    <button type=\"button\"\r\n                            className=\"btn btn-primary\"\r\n                            disabled={selectedFilterResult === null}\r\n                            onClick={selectFoodItem}>\r\n                        {applicationStrings.button_select[language]}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal className={\"filter-modal\"}\r\n               size={'xl'}\r\n               show={true}\r\n               backdrop=\"static\">\r\n            <Modal.Header>\r\n                <h5 className=\"modal-title\">{applicationStrings.label_filterModal_title[language]}</h5>\r\n                <button type=\"button\"\r\n                        className=\"btn-close\"\r\n                        data-dismiss=\"modal\"\r\n                        aria-label=\"Close\"\r\n                        onClick={props.closeModal}>\r\n                </button>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {showHelpModal && helpText !== null &&\r\n                <HelpModal helpText={helpText}\r\n                           style={{top: \"12vh\"}}\r\n                           size={\"lg\"}\r\n                           closeHelpModal={() => setShowHelpModal(false)}/>\r\n                }\r\n                {showNutrientFilterModal && editingCondition === null &&\r\n                <NutrientFilterSelectionModal closeModal={closeFilterSelectionModal}\r\n                                              addCondition={addCondition}\r\n                />\r\n                }\r\n                {showNutrientFilterModal && editingCondition !== null &&\r\n                <NutrientFilterSelectionModal closeModal={closeFilterSelectionModal}\r\n                                              existingCondition={editingCondition}\r\n                                              editCondition={editCondition}\r\n                />\r\n                }\r\n                <div className={\"container row\"}>\r\n                    <div className={\"col-6\"}>\r\n                        {renderFilterList()}\r\n                    </div>\r\n                    <div className={\"col-6\"}>\r\n                        {renderResultList()}\r\n                    </div>\r\n                </div>\r\n\r\n            </Modal.Body>\r\n            <Modal.Footer className={\"d-flex flex-row justify-content-between\"}>\r\n                <div>\r\n                    {renderLeftFooterPart()}\r\n                </div>\r\n                <div>\r\n                    {renderRightFooterPart()}\r\n                </div>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}","import React, {useContext, useState} from 'react'\r\n\r\nimport {Button, Modal} from 'react-bootstrap'\r\n\r\nimport {NotificationManager} from 'react-notifications'\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\nimport FoodSelector from \"./FoodSelector\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport SelectedFoodItem, {FilteredFoodItem} from \"../../types/livedata/SelectedFoodItem\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport {CompositeFoodList} from \"./CompositeFoodList\";\r\nimport {initialFoodClassId, maximalPortionSize} from \"../../config/ApplicationSetting\";\r\nimport combineFoodItems from \"../../service/calculation/FoodDataAggregationService\";\r\nimport {FaQuestionCircle, FaList, FaFilter} from \"react-icons/fa\";\r\nimport {HelpModal} from \"../HelpModal\";\r\nimport {getHelpText} from \"../../service/HelpService\";\r\nimport ReactSelectOption from \"../../types/ReactSelectOption\";\r\nimport {MODE_EDIT, SOURCE_FNDDS} from \"../../config/Constants\";\r\nimport {CategoryTreeModal} from \"./CategoryTreeModal\";\r\nimport {FilterModal} from \"./filter/FilterModal\";\r\nimport {makeSelectedFoodItemObject} from \"../../service/nutrientdata/FoodItemsService\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nexport interface FoodSelectorModalProps {\r\n    onHide: () => void,\r\n    selectedFoodItemCallback: (selectedFoodItem: SelectedFoodItem) => void\r\n    compositeSelector: boolean\r\n    selectedFoodItem?: SelectedFoodItem,\r\n    mode?: string\r\n}\r\n\r\n\r\nconst FoodSelectorModal: React.FC<FoodSelectorModalProps> = (props: FoodSelectorModalProps) => {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const {language} = useContext(LanguageContext)\r\n\r\n    const initialFoodItem = props.selectedFoodItem ? props.selectedFoodItem : null\r\n    const initialCompositeList = props.selectedFoodItem && props.selectedFoodItem.compositeSubElements\r\n        ? props.selectedFoodItem.compositeSubElements\r\n        : []\r\n\r\n    const [selectedFoodItem, setSelectedFoodItem] = useState<SelectedFoodItem | null>(initialFoodItem)\r\n    const [compositeTitle, setCompositeTitle] = useState<string | null>(null)\r\n    const [compositeList, setCompositeList] = useState<Array<SelectedFoodItem>>(initialCompositeList ?? [])\r\n    const [showHelpModal, setShowHelpModal] = useState<boolean>(false)\r\n    const [showCategoryTreeModal, setShowCategoryTreeModal] = useState<boolean>(false)\r\n    const [showFilterModal, setShowFilterModal] = useState<boolean>(false)\r\n\r\n    if (!applicationContext) {\r\n        return <div/>\r\n    }\r\n\r\n    const {foodItems, foodClasses} = applicationContext.foodDataCorpus\r\n\r\n    const updateSelectedFoodItem = (selectedFoodItem: SelectedFoodItem): void => {\r\n        setSelectedFoodItem(selectedFoodItem)\r\n    }\r\n\r\n    const updateCompositeTitle = (title: string): void => {\r\n        setCompositeTitle(title)\r\n    }\r\n\r\n    const addCompositeElement = () => {\r\n        if (selectedFoodItem !== null) {\r\n            if (selectedFoodItem.portion.amount < 1 || selectedFoodItem.portion.amount > maximalPortionSize) {\r\n                NotificationManager.error(applicationStrings.message_error_invalid_portion[language])\r\n                return;\r\n            }\r\n\r\n            const newList: Array<SelectedFoodItem> = [...compositeList]\r\n            newList.push(selectedFoodItem)\r\n            setCompositeList(newList)\r\n        }\r\n    }\r\n\r\n    const deleteCompositeElement = (index: number) => {\r\n        const newList: Array<SelectedFoodItem> = [...compositeList]\r\n        newList.splice(index, 1)\r\n        setCompositeList(newList)\r\n    }\r\n\r\n    const editCompositeElement = (index: number, newPortionAmount: number) => {\r\n        const newList = compositeList.map((item, iteratorIndex) => {\r\n                if(index !== iteratorIndex) {\r\n                    return item\r\n                } else {\r\n                    return {...item, portion: {\r\n                        ...item.portion, portionType: 0, amount: newPortionAmount\r\n                    }}\r\n                }\r\n            })\r\n        setCompositeList(newList)\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        if (props.compositeSelector) {\r\n            onSubmitComposite()\r\n        } else {\r\n            onSubmitSingleItem()\r\n        }\r\n    }\r\n\r\n    const onSubmitSingleItem = () => {\r\n        if (props.mode === MODE_EDIT) {\r\n            if (selectedFoodItem) {\r\n                if (selectedFoodItem.portion.amount < 1 || selectedFoodItem.portion.amount > maximalPortionSize) {\r\n                    NotificationManager.error(applicationStrings.message_error_invalid_portion[language])\r\n                    return\r\n                }\r\n                props.selectedFoodItemCallback(selectedFoodItem)\r\n                props.onHide()\r\n            }\r\n            return;\r\n        }\r\n\r\n        const foodItemId = selectedFoodItem ? selectedFoodItem.foodItem.id : null\r\n        if (foodItemId) {\r\n            const existingItemInList = applicationContext?.applicationData.foodDataPanel.selectedFoodItems.find(foodItem => foodItem.id === foodItemId)\r\n\r\n            if (existingItemInList) {\r\n                NotificationManager.error(applicationStrings.message_error_existing_element[language])\r\n                return\r\n            }\r\n        }\r\n\r\n        if (!selectedFoodItem || !selectedFoodItem.foodItem || !selectedFoodItem.foodClass || !selectedFoodItem.portion) {\r\n            NotificationManager.error(applicationStrings.message_error_incomplete_form[language])\r\n        } else if (selectedFoodItem.portion.amount < 1 || selectedFoodItem.portion.amount > maximalPortionSize) {\r\n            NotificationManager.error(applicationStrings.message_error_invalid_portion[language])\r\n        } else {\r\n            props.selectedFoodItemCallback(selectedFoodItem)\r\n            props.onHide()\r\n        }\r\n    }\r\n\r\n    const onSubmitComposite = () => {\r\n        let aggregatedSelectedFoodItem = combineFoodItems(compositeList)\r\n\r\n        if (compositeTitle !== null && compositeTitle.trim().length > 0) {\r\n            aggregatedSelectedFoodItem.title = compositeTitle.length < 24\r\n                ? compositeTitle.trim()\r\n                : compositeTitle.substring(0, 21).trim() + \"...\"\r\n        } else {\r\n            aggregatedSelectedFoodItem.title = applicationStrings.input_compositelist_title[language]\r\n        }\r\n\r\n        if (!aggregatedSelectedFoodItem) {\r\n            return\r\n        }\r\n\r\n        aggregatedSelectedFoodItem = {...aggregatedSelectedFoodItem, aggregated: true}\r\n        props.selectedFoodItemCallback(aggregatedSelectedFoodItem)\r\n        props.onHide()\r\n    }\r\n\r\n    const updateFoodSelectorConfig = (selectedCategory: ReactSelectOption | null, supplementData: boolean, combineData: boolean) => {\r\n        if (applicationContext) {\r\n            const currentSelectorSetting = applicationContext.applicationData.foodSelector\r\n            if (selectedCategory !== currentSelectorSetting.selectedCategory || supplementData !== currentSelectorSetting.sourceSupplement\r\n                || combineData !== currentSelectorSetting.sourceCombine) {\r\n                applicationContext.setFoodSelectorConfig(selectedCategory, supplementData, combineData)\r\n            }\r\n        }\r\n    }\r\n\r\n    const onCancel = () => {\r\n        props.onHide()\r\n    }\r\n\r\n    const onOpenHelpModal = () => {\r\n        setShowHelpModal(true)\r\n    }\r\n\r\n    const onOpenCategoryTreeModal = () => {\r\n        setShowCategoryTreeModal(true)\r\n    }\r\n\r\n    const onOpenFilterModal = () => {\r\n        setShowFilterModal(true)\r\n    }\r\n\r\n    const title = props.compositeSelector\r\n        ? applicationStrings.label_foodselector_composite[language]\r\n        : applicationStrings.label_foodselector[language]\r\n    const helpText = props.compositeSelector ? getHelpText(10, language) : getHelpText(9, language)\r\n\r\n    const selectFoodItemFromCategoryTree = (foodItemId) => {\r\n        const foodItemToSelect = foodItems.find(foodItem => foodItem.id === foodItemId)\r\n\r\n        if (foodItemToSelect && foodItemToSelect.portionData && foodItemToSelect.portionData.length > 0) {\r\n            let selectedSource = 0;  // SR Legacy = Default source\r\n            if (applicationContext.applicationData.preferredSource === SOURCE_FNDDS && foodItemToSelect.fnddsId) {\r\n                selectedSource = 1;\r\n            }\r\n\r\n            const foodClass = foodClasses.find(foodClass => foodClass.id === foodItemToSelect.foodClass)\r\n\r\n            const selectedObject: SelectedFoodItem = {\r\n                foodClass: foodClass,\r\n                foodItem: foodItemToSelect,\r\n                portion: foodItemToSelect.portionData[0],\r\n                selectedSource,\r\n                supplementData: applicationContext.applicationData.foodSelector.sourceSupplement,\r\n                combineData: applicationContext.applicationData.foodSelector.sourceCombine,\r\n            }\r\n\r\n            setSelectedFoodItem(selectedObject)\r\n        }\r\n    }\r\n\r\n    const selectFoodItemFromFilterModal = (selectedFilterResult: FilteredFoodItem): void => {\r\n        console.log('STUB: I will set', selectedFilterResult)\r\n\r\n        const {foodItem} = selectedFilterResult\r\n        const foodClass = applicationContext.foodDataCorpus.foodClasses.find(foodClass => foodClass.id === foodItem.foodClass)\r\n        const portionData = foodItem.portionData ? foodItem.portionData[0] : undefined\r\n\r\n        const selectedFoodItem = makeSelectedFoodItemObject(foodItem, foodClass, portionData, 0, false, false,\r\n            selectedFilterResult.source)\r\n\r\n        setSelectedFoodItem(selectedFoodItem)\r\n    }\r\n\r\n    const category = applicationContext.applicationData.foodSelector.selectedCategory\r\n        ? applicationContext.applicationData.foodSelector.selectedCategory.value : 0\r\n\r\n    const canAccessCategoryTree = !props.compositeSelector && props.mode !== MODE_EDIT\r\n    const size = props.compositeSelector ? \"xl\" : \"lg\"\r\n\r\n    return (\r\n        <Modal size={size} show={true} onHide={props.onHide} backdrop=\"static\">\r\n            <Modal.Header>\r\n                <b>{title}</b>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {showHelpModal && helpText !== null &&\r\n                <HelpModal helpText={helpText}\r\n                           size={\"lg\"}\r\n                           closeHelpModal={() => setShowHelpModal(false)}/>\r\n                }\r\n                {showCategoryTreeModal &&\r\n                <CategoryTreeModal selectedCategory={category}\r\n                                   closeModal={() => setShowCategoryTreeModal(false)}\r\n                                   selectFoodItemFromCategoryTree={selectFoodItemFromCategoryTree}\r\n                />\r\n                }\r\n                {showFilterModal &&\r\n                <FilterModal closeModal={() => setShowFilterModal(false)}\r\n                             selectFoodItemFromFilterModal={selectFoodItemFromFilterModal}/>\r\n                }\r\n                <div>\r\n                    {!props.compositeSelector ?\r\n                        <FoodSelector updateSelectedFoodItem={updateSelectedFoodItem}\r\n                                      defaultFoodClass={initialFoodClassId}\r\n                                      compositeSelector={false}\r\n                                      selectedFoodItem={selectedFoodItem}\r\n                                      updateFoodSelectorConfig={updateFoodSelectorConfig}\r\n                                      mode={props.mode}\r\n                        />\r\n                        :\r\n                        <div className={\"container\"}>\r\n                            <div className={\"row\"}>\r\n                                <div className={\"col-6\"}>\r\n                                    <FoodSelector updateSelectedFoodItem={updateSelectedFoodItem}\r\n                                                  updateFoodSelectorConfig={updateFoodSelectorConfig}\r\n                                                  defaultFoodClass={initialFoodClassId}\r\n                                                  updateCompositeTitle={updateCompositeTitle}\r\n                                                  compositeSelector={true}\r\n                                    />\r\n                                </div>\r\n                                <div className={\"col-6\"}>\r\n                                    <CompositeFoodList selectedFoodItems={compositeList}\r\n                                                       deleteItem={deleteCompositeElement}\r\n                                                       editCompositeElement={editCompositeElement}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer className={\"justify-content-between\"}>\r\n                <div>\r\n                    <span style={{paddingRight: \"2ch\"}}>\r\n                        <Button className={\"btn btn-secondary\"} onClick={onOpenHelpModal}>\r\n                            <FaQuestionCircle/>\r\n                        </Button>\r\n                    </span>\r\n                    {canAccessCategoryTree &&\r\n                    <span style={{paddingRight: \"2ch\"}}>\r\n                        <Button className={\"btn btn-secondary\"}\r\n                                onClick={onOpenCategoryTreeModal}\r\n                                data-for={\"fa-btn-categorytree\"}\r\n                                data-tip={applicationStrings.tooltip_category_tree[language]}>\r\n                            <FaList/>\r\n                               <ReactTooltip id={\"fa-btn-categorytree\"}/>\r\n                        </Button>\r\n                    </span>\r\n                    }\r\n                    {canAccessCategoryTree &&\r\n                    <Button className={\"btn btn-secondary\"}\r\n                            onClick={onOpenFilterModal}\r\n                            data-for={\"fa-btn-filter\"}\r\n                            data-tip={applicationStrings.tooltip_filter[language]}>\r\n                        <FaFilter/>\r\n                        <ReactTooltip id={\"fa-btn-filter\"}/>\r\n                    </Button>\r\n                    }\r\n                </div>\r\n                <div className={\"d-flex d-row justify-content-end\"}>\r\n                    <Button className={\"btn-secondary form-button\"} onClick={onCancel}>\r\n                        {applicationStrings.button_cancel[language]}\r\n                    </Button>\r\n                    {props.compositeSelector ?\r\n                        <Button className={\"form-button\"}\r\n                                onClick={onSubmit}\r\n                                disabled={!compositeList || compositeList.length < 1}>\r\n                            {applicationStrings.button_show[language]}\r\n                        </Button>\r\n                        :\r\n                        <Button className={\"form-button\"} onClick={onSubmit}>\r\n                            {applicationStrings.button_select[language]}\r\n                        </Button>\r\n                    }\r\n\r\n                    {props.compositeSelector &&\r\n                    <Button className={\"form-button\"} onClick={addCompositeElement}>\r\n                        {applicationStrings.button_add[language]}\r\n                    </Button>\r\n                    }\r\n                </div>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n\r\n}\r\n\r\nexport default FoodSelectorModal","import React from \"react\";\r\n\r\nimport {confirmable, createConfirmation} from \"react-confirm\";\r\nimport {Button, Modal} from \"react-bootstrap\";\r\n\r\ninterface ConfirmationDialogProps {\r\n    okLabel: string,\r\n    cancelLabel: string,\r\n    title: string,\r\n    confirmation: string,\r\n    show: boolean,\r\n    proceed: (proceed: boolean) => void, // called when ok button is clicked.\r\n    enableEscape: boolean,\r\n    small?: boolean\r\n}\r\n\r\nclass ConfirmationDialog extends React.Component<ConfirmationDialogProps> {\r\n\r\n    render() {\r\n        const {\r\n            okLabel,\r\n            cancelLabel,\r\n            title,\r\n            confirmation,\r\n            show,\r\n            proceed,\r\n            enableEscape = true,\r\n        } = this.props;\r\n\r\n        return (\r\n            <Modal\r\n                show={show}\r\n                onHide={() => proceed(false)}\r\n                backdrop={enableEscape ? true : \"static\"}\r\n                keyboard={enableEscape}\r\n                fullscreen={true}>\r\n                <Modal.Header>\r\n                    <Modal.Title>{title}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>{confirmation}</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button style={{minWidth: \"80px\"}}\r\n                            onClick={() => proceed(false)}>\r\n                        {cancelLabel}\r\n                    </Button>\r\n                    <Button\r\n                        style={{minWidth: \"80px\"}}\r\n                        className=\"primary button-l\"\r\n                        onClick={() => proceed(true)}>\r\n                        {okLabel}\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function confirmAction(\r\n    confirmation,\r\n    okLabel,\r\n    cancelLabel,\r\n    options = {},\r\n    small?\r\n) {\r\n    return createConfirmation(confirmable(ConfirmationDialog))({\r\n        confirmation,\r\n        okLabel,\r\n        cancelLabel,\r\n        ...options,\r\n        small\r\n    });\r\n}\r\n","import React, {useContext, useEffect, useRef, useState} from 'react'\r\nimport {Button, Form, Modal} from \"react-bootstrap\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport {customSelectStyles} from \"../../config/UI_Config\";\r\nimport {getElementsOfRankingGroup, getNutrientGroups, getValueOfFoodItem} from \"../../service/RankingService\";\r\nimport ReactSelectOption from \"../../types/ReactSelectOption\";\r\nimport Select from 'react-select';\r\nimport {\r\n    HIGHLIGHTING_MIN_MAX,\r\n    HIGHLIGHTING_NONE, HIGHLIGHTING_SHARE_ALL, HIGHLIGHTING_SHARE_SELECTION, NUTRIENT_VITAMIN_INDEX,\r\n} from \"../../config/Constants\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport {getFoodItemName} from \"../../service/nutrientdata/FoodItemsService\";\r\nimport {calculatePortionData} from \"../../service/TableService\";\r\nimport {autoRound} from \"../../service/calculation/MathService\";\r\nimport {getUnit} from \"../../service/calculation/NutrientCalculationService\";\r\nimport {getStatisticalNutrientInformation} from \"../../service/nutrientdata/NutrientStatisticsService\";\r\nimport {shortenName} from \"../../service/nutrientdata/NameTypeService\";\r\nimport getName from \"../../service/LanguageService\";\r\nimport {FaQuestionCircle} from \"react-icons/fa\";\r\nimport {HelpModal} from \"../HelpModal\";\r\nimport {getHelpText} from \"../../service/HelpService\";\r\n\r\nconst WEIGHT_PORTION = 0\r\nconst WEIGHT_100 = 1\r\n\r\nconst TABLE_CELL_PADDING = \"0.75ch\"\r\n\r\nconst COLOR_MIN = \"rgb(255, 200, 200)\"\r\nconst COLOR_MAX = \"rgb(255, 0, 0)\"\r\nconst COLOR_EMPTY = \"#fff\"\r\n\r\n/**\r\n * Calculates the color linearly between the minimum and maximum value. This function is used if only a few\r\n * items are compared with each other (i.e. the mode 'compare to tabs in data panel'), since otherwise outliers\r\n * could totally distort the color scheme (like values 1, 1, 2, 5, 40).\r\n */\r\nconst getColorCodeForMinMaxRange = (min: number | null, max: number | null, value: number) => {\r\n    if (min === null || max === null || !value) {\r\n        return COLOR_EMPTY\r\n    }\r\n\r\n    const rgbStep = (max - min) / 256\r\n    let redValue = 255 - ((value - min) / rgbStep)\r\n    let greenValue = 127 + (redValue / 2)\r\n\r\n    if (redValue < 0) {\r\n        redValue = 0\r\n    }\r\n    if (greenValue > 255) {\r\n        greenValue = 255\r\n    }\r\n    return `rgb(${redValue}, ${greenValue}, 255)`;\r\n}\r\n\r\n/**\r\n * Calculates the color linearly based on the sorted list of all values. In this case, the higher the position\r\n * of the value is in the sorted list, the darker the color would be. This approach is rather stable against\r\n * outliers and deviating medians or averages. It is used to calculate the colors in the mode of comparing the\r\n * value to the whole Food Compare database, where we often have a min of 0 and a max of 100, but a median like 2.\r\n */\r\nconst getColorCodeForFoodCompareRange = (sortedValues: Array<number>, value: number) => {\r\n    if (sortedValues.length <= 2 || !value) {\r\n        return COLOR_EMPTY\r\n    }\r\n\r\n    const index = sortedValues.findIndex(val => val === value);\r\n    const position = index / sortedValues.length\r\n\r\n    let redValue = 255 - (position * 255);\r\n    let greenValue = 127 + (redValue / 2);\r\n    if (redValue < 0) {\r\n        redValue = 0\r\n    }\r\n    if (greenValue > 255) {\r\n        greenValue = 255\r\n    }\r\n\r\n    return `rgb(${redValue}, ${greenValue}, 255)`;\r\n}\r\n\r\n\r\nexport const OverallView = (props) => {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const {language} = useContext(LanguageContext)\r\n\r\n    const nutrientGroups = getNutrientGroups(language)\r\n    let highlighters: Array<ReactSelectOption> = [\r\n        {value: HIGHLIGHTING_NONE, label: applicationStrings.label_highlighting_none[language]},\r\n        {value: HIGHLIGHTING_MIN_MAX, label: applicationStrings.label_highlighting_minmax[language]},\r\n    ]\r\n\r\n    const weightReferences = [\r\n        {value: WEIGHT_PORTION, label: applicationStrings.label_per_portion[language]},\r\n        {value: WEIGHT_100, label: applicationStrings.label_per_100g[language]}\r\n    ]\r\n\r\n    const [selectedGroup, setSelectedGroup] = useState<ReactSelectOption>(nutrientGroups[0])\r\n    const [selectedHighlighter, setSelectedHighlighter] = useState<ReactSelectOption | null>(null)\r\n    const [selectedWeightReference, setSelectedWeightReference] = useState<ReactSelectOption>(weightReferences[0])\r\n\r\n    const [showHelpModal, setShowHelpModal] = useState<boolean>(false)\r\n    const [showToolTips, setShowToolTips] = useState<boolean>(true)\r\n\r\n    // Canvas for drawing legend\r\n    const canvas = useRef<HTMLCanvasElement | null>(null);\r\n\r\n    // Draw color highlighting legend\r\n    useEffect(() => {\r\n        const canvasElement = canvas.current;\r\n        if (canvasElement) {\r\n            canvasElement.width = canvasElement.clientWidth;\r\n            canvasElement.height = canvasElement.clientHeight;\r\n\r\n            const startPointX = 50\r\n            const ctx = canvasElement.getContext(\"2d\");\r\n            if (ctx) {\r\n                const grd = ctx.createLinearGradient(0, 0, 200, 0);\r\n                grd.addColorStop(0, getColorCodeForMinMaxRange(0, 255, 0));\r\n                grd.addColorStop(1, getColorCodeForMinMaxRange(0, 255, 255));\r\n                ctx.fillStyle = grd;\r\n                ctx.fillRect(50, 35, 255, 30);\r\n                ctx.strokeStyle = \"#000\";\r\n                ctx.strokeText(\"Min\", startPointX - 5, 80);\r\n                ctx.strokeText(\"Max\", startPointX + 240, 80);\r\n                if (selectedHighlighter && selectedHighlighter.value === HIGHLIGHTING_SHARE_SELECTION) {\r\n                    const offset = language === \"de\" ? 115 : 110\r\n                    ctx.strokeText(applicationStrings.label_juxtaposition_table_avg[language], startPointX + offset, 80);\r\n                } else {\r\n                    ctx.strokeText(applicationStrings.label_juxtaposition_table_median[language], startPointX + 115, 80);\r\n                }\r\n            }\r\n        }\r\n    }, [selectedHighlighter]);\r\n\r\n    useEffect(() => {\r\n        if (selectedHighlighter === null) {\r\n            // @ts-ignore\r\n            if (applicationContext?.applicationData.foodDataPanel.selectedFoodItems.length > 3) {\r\n                setSelectedHighlighter(highlighters[HIGHLIGHTING_SHARE_SELECTION])\r\n            } else {\r\n                setSelectedHighlighter(highlighters[HIGHLIGHTING_MIN_MAX])\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    if (!applicationContext) {\r\n        return <div/>\r\n    }\r\n\r\n    const foodItems = applicationContext.applicationData.foodDataPanel.selectedFoodItems\r\n\r\n\r\n    const buildHighlightSelectOptions = () => {\r\n        // Range coloring is only reasonable for at least 3 selected foods\r\n        if (foodItems.length > 2) {\r\n            highlighters.push({\r\n                value: HIGHLIGHTING_SHARE_SELECTION,\r\n                label: applicationStrings.label_highlighting_share_selection[language]\r\n            })\r\n        }\r\n\r\n        // Range coloring compared to FC database is only possible if a 100 g basis is selected\r\n        if (selectedWeightReference.value === WEIGHT_100) {\r\n            highlighters.push({\r\n                value: HIGHLIGHTING_SHARE_ALL,\r\n                label: applicationStrings.label_highlighting_share_database[language]\r\n            })\r\n        } else {\r\n            highlighters = highlighters.filter(highlighter => highlighter.value !== HIGHLIGHTING_SHARE_ALL)\r\n            if (selectedHighlighter && selectedHighlighter.value === HIGHLIGHTING_SHARE_ALL) {\r\n                const altOption = highlighters.find(highlighter => highlighter.value === HIGHLIGHTING_SHARE_SELECTION)\r\n                setSelectedHighlighter(altOption!!)\r\n            }\r\n        }\r\n    }\r\n\r\n    buildHighlightSelectOptions()\r\n\r\n    const handleGroupChange = (selectedOption) => {\r\n        setSelectedGroup(selectedOption)\r\n    }\r\n\r\n    const handleHighlighterChange = (selectedOption) => {\r\n        setSelectedHighlighter(selectedOption)\r\n    }\r\n\r\n    const handleWeightReferenceChange = (selectedOption) => {\r\n        setSelectedWeightReference(selectedOption)\r\n    }\r\n\r\n    const makeFormHeader = () => {\r\n        return <div className={\"d-flex flex-row justify-content-between\"}>\r\n            <div style={{width: \"25%\"}}>\r\n                <span className={\"form-label\"}>{applicationStrings.label_group[language]}:</span>\r\n                <Select className=\"form-control-sm\"\r\n                        options={nutrientGroups}\r\n                        value={selectedGroup}\r\n                        styles={customSelectStyles}\r\n                        onChange={handleGroupChange}\r\n                />\r\n            </div>\r\n            <div style={{width: \"15%\"}}>\r\n                <span className={\"form-label\"}>{applicationStrings.label_reference[language]}:</span>\r\n                <Select className=\"form-control-sm\"\r\n                        options={weightReferences}\r\n                        value={selectedWeightReference}\r\n                        styles={customSelectStyles}\r\n                        onChange={handleWeightReferenceChange}\r\n                />\r\n            </div>\r\n            <div style={{width: \"55%\"}}>\r\n                <span className={\"form-label\"}>{applicationStrings.label_highlighting[language]}:</span>\r\n                <Select className=\"form-control-sm\"\r\n                        options={highlighters}\r\n                        value={selectedHighlighter}\r\n                        styles={customSelectStyles}\r\n                        onChange={handleHighlighterChange}\r\n                />\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    const makeTableHead = () => {\r\n        const thStyle = {padding: TABLE_CELL_PADDING}\r\n\r\n        return (\r\n            <thead>\r\n            <tr>\r\n                <th/>\r\n                <th/>\r\n                {\r\n                    foodItems.map(foodItem => {\r\n                        const foodName = foodItem.aggregated\r\n                            ? foodItem.title\r\n                            : getFoodItemName(foodItem.foodItem, applicationContext.foodDataCorpus.foodNames, language)\r\n                        const shortenedFoodName = shortenName(foodName, 15)\r\n                        const portion = selectedWeightReference.value === WEIGHT_100\r\n                            ? \"100 g\"\r\n                            : `${foodItem.portion.amount} g`\r\n                        const conditionId = foodItem.foodItem.conditionId\r\n                        const condition = applicationContext.foodDataCorpus.conditions.find(\r\n                            condition => condition.id === conditionId\r\n                        )\r\n                        const conditionName = condition ? getName(condition, language) : null;\r\n                        return (\r\n                            <th key={`tab-head-${foodItem.id}`}\r\n                                style={{padding: TABLE_CELL_PADDING}}\r\n                                className={\"toolTipTableCell\"}>\r\n                                {shortenedFoodName}\r\n                                <span style={{fontSize: \"0.9rem\", fontWeight: \"normal\"}}>\r\n                                    <br/>\r\n                                    <span style={{fontStyle: \"italic\"}}>\r\n                                        {conditionName}\r\n                                    </span>\r\n                                    <br/>\r\n                                    {portion}\r\n                                    </span>\r\n                                {showToolTips &&\r\n                                <span className={\"toolTipCellContentHeader\"}>\r\n                                    {foodName}\r\n                                    <br/>\r\n                                    {conditionName}\r\n                                    <br/>\r\n                                    {portion}\r\n                                    </span>\r\n                                }\r\n                            </th>\r\n                        )\r\n                    })\r\n                }\r\n                <th style={thStyle}/>\r\n                <th style={thStyle}>{applicationStrings.label_overallview_min_short[language]}</th>\r\n                <th style={thStyle}>{applicationStrings.label_overallview_max_short[language]}</th>\r\n                <th style={thStyle}>{applicationStrings.label_overallview_avg_short[language]}</th>\r\n                <th style={thStyle}>{applicationStrings.label_overallview_sum[language]}</th>\r\n            </tr>\r\n            </thead>\r\n        )\r\n    }\r\n\r\n    const makeTableBody = () => {\r\n        const elements = getElementsOfRankingGroup(selectedGroup.value, language)\r\n        if (!elements) {\r\n            return <tbody/>\r\n        }\r\n\r\n        const aggregatedColumnStyle = {\r\n            minWidth: \"3vw\",\r\n            background: \"#ffe6e6\",\r\n            padding: TABLE_CELL_PADDING\r\n        }\r\n\r\n        return (\r\n            <tbody>\r\n            {\r\n                elements.map(element => {\r\n                    let min: number | null = null;\r\n                    let max: number | null = null;\r\n                    let sum: number | null = null;\r\n\r\n                    const foodItemValues = foodItems.map(foodItem => {\r\n                        let value = getValueOfFoodItem(foodItem.foodItem, element.value, foodItem.selectedSource)\r\n                        const portion = foodItem.portion.amount\r\n                        if (selectedWeightReference.value === WEIGHT_PORTION) {\r\n                            value = calculatePortionData(value, portion)\r\n                        }\r\n\r\n                        if (value !== null) {\r\n                            if (min === null || value < min) {\r\n                                min = value\r\n                            }\r\n                            if (max === null || value > max) {\r\n                                max = value\r\n                            }\r\n                            if (sum === null) {\r\n                                sum = value\r\n                            } else {\r\n                                sum += value\r\n                            }\r\n                        }\r\n                        return value\r\n                    })\r\n\r\n                    const avg = sum\r\n                        ? sum / foodItemValues.length\r\n                        : null\r\n\r\n                    const nutrientStatData = getStatisticalNutrientInformation(\r\n                        element.value,\r\n                        applicationContext.foodDataCorpus.foodItems,\r\n                        applicationContext.applicationData.preferredSource\r\n                    )\r\n\r\n                    const getCellColor = (value) => {\r\n                        let bgColor = COLOR_EMPTY\r\n\r\n                        const colorSelection = selectedHighlighter ? selectedHighlighter.value : HIGHLIGHTING_NONE\r\n\r\n                        if (colorSelection == HIGHLIGHTING_MIN_MAX) {\r\n                            if (value === min) {\r\n                                bgColor = COLOR_MIN\r\n                            } else if (value === max) {\r\n                                bgColor = COLOR_MAX\r\n                            }\r\n                        } else if (colorSelection == HIGHLIGHTING_SHARE_SELECTION) {\r\n                            if (max === null || min === null || value === null) {\r\n                                bgColor = COLOR_EMPTY\r\n                            } else {\r\n                                bgColor = getColorCodeForMinMaxRange(min, max, value)\r\n                            }\r\n                        } else if (colorSelection == HIGHLIGHTING_SHARE_ALL) {\r\n                            if (value === null) {\r\n                                bgColor = COLOR_EMPTY\r\n                            } else {\r\n                                if (nutrientStatData.allValuesSorted.length > 2) {\r\n                                    bgColor = getColorCodeForFoodCompareRange(nutrientStatData.allValuesSorted, value)\r\n                                }\r\n                            }\r\n                        }\r\n                        return bgColor\r\n                    }\r\n\r\n                    let nutrientName = element.label\r\n\r\n                    // Remove the scientific name from the vitamin labels\r\n                    if (selectedGroup.value === NUTRIENT_VITAMIN_INDEX && nutrientName.includes(\"(\")) {\r\n                        nutrientName = nutrientName.substring(0, nutrientName.indexOf(\"(\") - 1).trim()\r\n                    }\r\n\r\n                    const unit = getUnit(element.value);\r\n\r\n                    const makeToolTipLine = (value) => {\r\n                        return <span><b>{nutrientName}: </b>{value} {unit}</span>\r\n                    }\r\n\r\n                    const makeAggegrationCell = (value) => {\r\n                        return <td style={aggregatedColumnStyle}\r\n                                   className={\"toolTipTableCell\"}>\r\n                            {value !== null ? autoRound(value) : \"\"}\r\n                            {showToolTips &&\r\n                            <span className={\"toolTipCellContentTable\"} style={{left: \"-14.5vw\"}}>\r\n                                {makeToolTipLine(\r\n                                    value !== null ? autoRound(value) : applicationStrings.label_na[language]\r\n                                )}\r\n                            </span>\r\n                            }\r\n                        </td>\r\n                    }\r\n\r\n                    return <tr key={`tab-cont-tr-${element.value}`}>\r\n                        <td style={{minWidth: \"8vw\", padding: TABLE_CELL_PADDING}}>{nutrientName}</td>\r\n                        <td style={{minWidth: \"3.5vw\", padding: TABLE_CELL_PADDING}}>{unit}</td>\r\n                        {foodItemValues.map((value, index) => {\r\n                            const tdStyle = {\r\n                                minWidth: \"8vw\",\r\n                                padding: TABLE_CELL_PADDING,\r\n                                background: getCellColor(value)\r\n                            }\r\n                            const valueTable = value !== null ? autoRound(value) : \"\"\r\n                            const valueToolTip = value !== null ? valueTable : applicationStrings.label_na[language]\r\n                            return <td className={\"toolTipTableCell\"}\r\n                                       key={`tab-cont-${element.value}-${index}`}\r\n                                       style={tdStyle}>\r\n                                {valueTable}\r\n                                {showToolTips &&\r\n                                <span className={\"toolTipCellContentTable\"}\r\n                                      style={{top: selectedWeightReference.value === WEIGHT_100 ? \"-8vh\" : \"-2.5vh\"}}>\r\n                                    {makeToolTipLine(valueToolTip)}\r\n                                    {selectedWeightReference.value === WEIGHT_100 &&\r\n                                    <span>\r\n                                        <hr/>\r\n                                        {applicationStrings.label_overallview_compared[language]}:\r\n                                        <br/>\r\n                                        <span className={\"tooltipKeyWord\"}>\r\n                                            {applicationStrings.label_overallview_min[language]}:\r\n                                        </span>\r\n                                        {autoRound(nutrientStatData.minimumAmount)} {unit}\r\n                                        <br/>\r\n                                        <span className={\"tooltipKeyWord\"}>\r\n                                            {applicationStrings.label_overallview_max[language]}:\r\n                                        </span>\r\n                                        {autoRound(nutrientStatData.maximumAmount)} {unit}\r\n                                        <br/>\r\n                                        <span className={\"tooltipKeyWord\"}>\r\n                                            {applicationStrings.label_overallview_avg[language]}:\r\n                                        </span>\r\n                                        {autoRound(nutrientStatData.averageAmount)} {unit}\r\n                                        <span className={\"tooltipKeyWord\"}>\r\n                                            {applicationStrings.label_juxtaposition_table_median[language]}:\r\n                                        </span>\r\n                                        {autoRound(nutrientStatData.median)} {unit}\r\n                                    </span>\r\n                                    }\r\n                                </span>\r\n                                }\r\n                            </td>\r\n                        })\r\n                        }\r\n                        <td/>\r\n                        {makeAggegrationCell(min)}\r\n                        {makeAggegrationCell(max)}\r\n                        {makeAggegrationCell(avg)}\r\n                        {makeAggegrationCell(sum)}\r\n                    </tr>\r\n                })\r\n            }\r\n            </tbody>\r\n        )\r\n    }\r\n\r\n    const makeTable = () => {\r\n        return (\r\n            <div className={\"overallview-table\"}>\r\n                <table>\r\n                    {makeTableHead()}\r\n                    {makeTableBody()}\r\n                </table>\r\n                {makeColorLegend()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const onOpenHelpModal = () => {\r\n        setShowHelpModal(true)\r\n    }\r\n\r\n    const helpText = getHelpText(12, language)\r\n\r\n    const selection = selectedHighlighter ? selectedHighlighter.value : HIGHLIGHTING_NONE\r\n    const makeColorLegend = () => {\r\n        const showCanvas = canvas && (selection === HIGHLIGHTING_SHARE_SELECTION || selection == HIGHLIGHTING_SHARE_ALL)\r\n        return <div className={\"d-flex flex-row justify-content-center\"} style={{height: \"110px\"}}>\r\n            {showCanvas &&\r\n            <canvas ref={canvas} width={400} height={110} style={{border: \"1x solid #000000\"}}/>\r\n            }\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <Modal size={'xl'}\r\n               show={true}\r\n               onHide={props.onHide}\r\n               backdrop=\"static\"\r\n        >\r\n            {showHelpModal && helpText &&\r\n            <HelpModal helpText={helpText}\r\n                       size={\"lg\"}\r\n                       closeHelpModal={() => setShowHelpModal(false)}\r\n            />\r\n            }\r\n            <Modal.Header>\r\n                <h5 className=\"modal-title\"><b>{applicationStrings.label_overallview_title[language]}</b></h5>\r\n                <button type=\"button\"\r\n                        className=\"btn-close\"\r\n                        data-dismiss=\"modal\"\r\n                        aria-label=\"Close\"\r\n                        onClick={props.onHide}>\r\n                </button>\r\n            </Modal.Header>\r\n            <Modal.Body style={{minHeight: \"75vh\", maxHeight: \"75vh\", overflowY: \"auto\"}}>\r\n                <div>\r\n                    {makeFormHeader()}\r\n                </div>\r\n                <div className={\"m-4\"}>\r\n                    {makeTable()}\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <div className={\"d-flex flex-row justify-content-between w-100\"}>\r\n                    <div>\r\n                        <Form.Check inline={true}\r\n                                    className=\"form-radiobutton\"\r\n                                    label={applicationStrings.label_tooltips[language]}\r\n                                    type=\"checkbox\"\r\n                                    checked={showToolTips}\r\n                                    onChange={() => setShowToolTips(!showToolTips)}>\r\n                        </Form.Check>\r\n                    </div>\r\n                    <div>\r\n                        <Button className={\"btn btn-primary\"} onClick={onOpenHelpModal}>\r\n                            <FaQuestionCircle/>\r\n                        </Button>\r\n                        <Button className={\"btn-secondary form-button\"} onClick={props.onHide}>\r\n                            {applicationStrings.button_close[language]}\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n\r\n}","import React, {useContext, useState} from 'react'\r\nimport {Button} from 'react-bootstrap'\r\nimport {NotificationManager} from 'react-notifications'\r\n\r\nimport FoodSelectorModal from '../foodselector/FoodSelectorModal'\r\nimport {FaDownload, FaEdit, FaLayerGroup, FaPlusSquare, FaTable, FaTrash, FaUpload} from \"react-icons/fa\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport SelectedFoodItem from \"../../types/livedata/SelectedFoodItem\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {confirmAction} from \"../ConfirmationDialog\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport {MODE_EDIT, MODE_NEW, PATH_FOODDATA_PANEL} from '../../config/Constants';\r\nimport {makeFoodDataPanelComponent} from \"../../service/FoodDataPanelService\";\r\nimport {isMobileDevice} from \"../../service/WindowDimension\";\r\nimport FoodDataPage from \"./FoodDataPage\";\r\nimport {OverallView} from \"./OverallView\";\r\n\r\nconst {compress, decompress} = require('shrink-string')\r\n\r\n\r\ninterface FoodAnalyzerContainerProps {\r\n    openSelectorModal?: boolean\r\n    openCompositeSelectorModal?: boolean\r\n    onNewFoodItemSelected: () => void\r\n}\r\n\r\nexport default function FoodAnalyzerContainer(props: FoodAnalyzerContainerProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const {language} = useContext(LanguageContext)\r\n    const history = useHistory()\r\n\r\n    const showFoodSelectorInitialState = props.openSelectorModal === true\r\n    const showCompositeFoodSelectorInitialState = props.openCompositeSelectorModal === true\r\n\r\n    const [showFoodSelector, setShowFoodSelector] = useState<Boolean>(showFoodSelectorInitialState)\r\n    const [showFoodAggregatedFoodSelector, setShowAggregatedFoodSelector] = useState<Boolean>(showCompositeFoodSelectorInitialState)\r\n    const [showOverallView, setShowOverallView] = useState<Boolean>(false)\r\n    const [foodSelectorEditMode, setFoodSelectorEditMode] = useState<Boolean>(false)\r\n\r\n    if (!applicationContext) {\r\n        return <div/>\r\n    }\r\n\r\n    const onAddNewFoodItem = (aggregateSelector: boolean) => {\r\n        setFoodSelectorEditMode(false)\r\n        if (aggregateSelector) {\r\n            setShowAggregatedFoodSelector(!showFoodAggregatedFoodSelector)\r\n        } else {\r\n            setShowFoodSelector(!showFoodSelector)\r\n        }\r\n    }\r\n\r\n    const onEditSelectedFoodItem = () => {\r\n        const {selectedFoodItems, selectedFoodItemIndex} = applicationContext.applicationData.foodDataPanel;\r\n        const selectedFoodItem = selectedFoodItems[selectedFoodItemIndex];\r\n\r\n        setFoodSelectorEditMode(true)\r\n        if (selectedFoodItem.aggregated) {\r\n            if(!selectedFoodItem.compositeSubElements) {\r\n                NotificationManager.error(applicationStrings.message_error_aggregated[language])\r\n                return\r\n            }\r\n            setShowAggregatedFoodSelector(!showFoodAggregatedFoodSelector)\r\n        } else {\r\n            setShowFoodSelector(!showFoodSelector)\r\n        }\r\n    }\r\n\r\n    const onOpenFileUpload = async () => {\r\n        const startUpload = () => {\r\n            const uploadElement = document.getElementById('importFileInput')\r\n            if (uploadElement) {\r\n                uploadElement.click();\r\n            }\r\n        }\r\n\r\n        if (applicationContext.applicationData.foodDataPanel?.selectedFoodItems?.length > 0) {\r\n            if (await confirmAction(\r\n                applicationStrings.message_import_question[language],\r\n                applicationStrings.button_yes[language],\r\n                applicationStrings.button_no[language],\r\n                {}\r\n            )) {\r\n                startUpload()\r\n            }\r\n        } else {\r\n            startUpload()\r\n        }\r\n    }\r\n\r\n    const onOpenOverallView = () => {\r\n        setShowOverallView(!showOverallView)\r\n    }\r\n\r\n    const onImport = (event) => {\r\n        const files = event.target.files;\r\n        if (!files || files.lenth === 0) {\r\n            return;\r\n        }\r\n\r\n        const file = files[0];\r\n        const fileReader = new FileReader();\r\n        fileReader.readAsText(file);\r\n        fileReader.onloadend = async () => {\r\n            const content = fileReader.result as string;\r\n            if (!content) {\r\n                return;\r\n            }\r\n            const decompressedContent = await decompress(content)\r\n            const expectedStartOfContent = \"{\\\"selectedFoodItems\\\":[\";\r\n            if (decompressedContent.startsWith(expectedStartOfContent)) {\r\n                try {\r\n                    let foodDataPanelData = JSON.parse(decompressedContent);\r\n                    foodDataPanelData = {\r\n                        ...foodDataPanelData, selectedFoodItems: foodDataPanelData.selectedFoodItems.map(item => {\r\n                            return {\r\n                                ...item,\r\n                                component: <FoodDataPage key={`page component ${item.id}`} selectedFoodItem={item}/>\r\n                            }\r\n                        })\r\n                    }\r\n                    applicationContext.setFoodDataPanelData.setCompleteData(foodDataPanelData);\r\n                } catch (e) {\r\n                    NotificationManager.error(applicationStrings.message_import_error_invalidfile[language])\r\n                }\r\n            } else {\r\n                NotificationManager.error(applicationStrings.message_import_error_parse[language])\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const onExport = async () => {\r\n        let dataObj = applicationContext.applicationData.foodDataPanel;\r\n\r\n        /*\r\n         * We need to remove the component data object from each item, as it contains the food item object again\r\n         * (cyclic reference), causing errors in the serializiation process. On import, we have to re-define the\r\n         * components again.\r\n         */\r\n        dataObj = {\r\n            ...dataObj, selectedFoodItems: dataObj.selectedFoodItems.map(item => {\r\n                return {...item, component: undefined}\r\n            })\r\n        }\r\n\r\n        try {\r\n            const fileContent = JSON.stringify(dataObj);\r\n            const compressedContent = await compress(fileContent)\r\n\r\n            // Create pseudo-element representing a download element\r\n            const element = document.createElement('a');\r\n            element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(compressedContent));\r\n            element.setAttribute('download', \"food-compare_dataexport.json\");\r\n            element.style.display = 'none';\r\n            document.body.appendChild(element);\r\n            element.click();\r\n            document.body.removeChild(element);\r\n        } catch (e) {\r\n            NotificationManager.error(applicationStrings.message_export_error[language])\r\n        }\r\n\r\n    }\r\n\r\n    const onHideSelector = (): void => {\r\n        setShowFoodSelector(false)\r\n        setShowAggregatedFoodSelector(false)\r\n    }\r\n\r\n    const onHideOverallView = (): void => {\r\n        setShowOverallView(false)\r\n    }\r\n\r\n    const onSelectFoodItemSubmit = (selectedFoodItem: SelectedFoodItem): void => {\r\n        if (applicationContext === null) {\r\n            return\r\n        }\r\n\r\n        const selectedIndex = applicationContext.applicationData.foodDataPanel.selectedFoodItemIndex\r\n\r\n        if (foodSelectorEditMode) {\r\n            // ToDo: Anpassen bei aggregated -> composite list clonen\r\n            applicationContext.setFoodDataPanelData.setItemOfFoodDataPanel(selectedFoodItem, selectedIndex)\r\n        } else {\r\n            const selectedFoodItemWithComponent = makeFoodDataPanelComponent(\r\n                selectedFoodItem, applicationContext.foodDataCorpus.foodNames, language)\r\n\r\n            if (selectedFoodItemWithComponent !== null) {\r\n                applicationContext.setFoodDataPanelData.addItemToFoodDataPanel(selectedFoodItemWithComponent)\r\n            }\r\n\r\n            if (applicationContext?.debug) {\r\n                console.log('FoodAnalyzerContainer: Set new selected item and execute callback. Selected item = ', selectedFoodItemWithComponent)\r\n            }\r\n\r\n            props.onNewFoodItemSelected()\r\n        }\r\n\r\n    }\r\n\r\n    const onCloseAllTabs = async () => {\r\n        if (await confirmAction(\r\n            applicationStrings.confirm_close_all_tabs[language],\r\n            applicationStrings.button_yes[language],\r\n            applicationStrings.button_no[language],\r\n            {}\r\n        )) {\r\n            history.push(PATH_FOODDATA_PANEL)\r\n            applicationContext?.setFoodDataPanelData.removeAllItemsFromFoodDataPanel()\r\n        }\r\n    }\r\n\r\n    if (applicationContext?.debug) {\r\n        console.log('FoodAnalyzerContainer: Render')\r\n    }\r\n\r\n    const {selectedFoodItems, selectedFoodItemIndex} = applicationContext.applicationData.foodDataPanel\r\n    const isFoodItemSelected = selectedFoodItems && selectedFoodItems.length > 0\r\n    const buttonClass = isMobileDevice() ? \"btn m-2\" : \"btn foodanalyzer-button-normal\"\r\n    const buttonClassWithExtraSpace = isMobileDevice() ? \"btn m-2\" : \"btn foodanalyzer-button-separator\"\r\n\r\n    const divButtonClass = \"d-flex flex-column align-items-left\"\r\n\r\n    const selectedFoodItem = isFoodItemSelected ? selectedFoodItems[selectedFoodItemIndex] : undefined\r\n    const existingFoodItem = foodSelectorEditMode ? selectedFoodItem : undefined\r\n    const mode = foodSelectorEditMode ? MODE_EDIT : MODE_NEW\r\n\r\n    return (\r\n        <div className={\"foodanalyzer-buttonbar\"}>\r\n            {showFoodSelector &&\r\n                <FoodSelectorModal onHide={onHideSelector}\r\n                                   selectedFoodItemCallback={onSelectFoodItemSubmit}\r\n                                   compositeSelector={false}\r\n                                   selectedFoodItem={existingFoodItem}\r\n                                   mode={mode}\r\n                />\r\n            }\r\n            {showFoodAggregatedFoodSelector &&\r\n                <FoodSelectorModal onHide={onHideSelector}\r\n                                   selectedFoodItemCallback={onSelectFoodItemSubmit}\r\n                                   compositeSelector={true}\r\n                                   selectedFoodItem={existingFoodItem}\r\n                                   mode={mode}\r\n                />\r\n            }\r\n            {showOverallView &&\r\n                <OverallView onHide={onHideOverallView} />\r\n            }\r\n            <div className={divButtonClass}>\r\n                <Button onClick={() => onAddNewFoodItem(false)}\r\n                        className={buttonClass}\r\n                        data-for={\"fa-btn-add\"}\r\n                        data-tip={applicationStrings.tooltip_icon_newFoodItem[language]}>\r\n                    <FaPlusSquare/>\r\n                    <ReactTooltip id={\"fa-btn-add\"} globalEventOff=\"click\"/>\r\n                </Button>\r\n                <Button onClick={() => onAddNewFoodItem(true)}\r\n                        className={buttonClass}\r\n                        disabled={isMobileDevice()}\r\n                        data-for={\"fa-btn-aggregate\"}\r\n                        data-tip={applicationStrings.tooltip_icon_newFoodItemStack[language]}>\r\n                    <FaLayerGroup/>\r\n                    <ReactTooltip id={\"fa-btn-aggregate\"} globalEventOff=\"click\"/>\r\n                </Button>\r\n                <Button onClick={() => onEditSelectedFoodItem()}\r\n                        className={buttonClassWithExtraSpace}\r\n                        disabled={!isFoodItemSelected}\r\n                        data-for={\"fa-btn-edit\"}\r\n                        data-tip={applicationStrings.tooltip_icon_editFoodItem[language]}>\r\n                    <FaEdit/>\r\n                    <ReactTooltip id={\"fa-btn-edit\"} globalEventOff=\"click\"/>\r\n                </Button>\r\n                <Button onClick={() => onExport()}\r\n                        className={buttonClass}\r\n                        disabled={!isFoodItemSelected || isMobileDevice()}\r\n                        data-for={\"fa-btn-export\"}\r\n                        data-tip={applicationStrings.tooltip_icon_export[language]}>\r\n                    <FaDownload/>\r\n                    <ReactTooltip id={\"fa-btn-export\"} globalEventOff=\"click\"/>\r\n                </Button>\r\n                <input type=\"file\"\r\n                       id=\"importFileInput\"\r\n                       style={{visibility: \"hidden\", maxWidth: \"1px\", maxHeight: \"1px\"}}\r\n                       accept={\".json\"}\r\n                       onChange={onImport}/>\r\n                <Button onClick={() => onOpenFileUpload()}\r\n                        className={buttonClass}\r\n                        disabled={isMobileDevice()}\r\n                        data-for={\"fa-btn-import\"}\r\n                        data-tip={applicationStrings.tooltip_icon_import[language]}>\r\n                    <FaUpload/>\r\n                    <ReactTooltip id={\"fa-btn-import\"} globalEventOff=\"click\"/>\r\n                </Button>\r\n                <Button onClick={() => onOpenOverallView()}\r\n                        className={buttonClassWithExtraSpace}\r\n                        disabled={isMobileDevice() || !isFoodItemSelected || selectedFoodItems.length <= 1}\r\n                        data-for={\"fa-btn-overallview\"}\r\n                        data-tip={applicationStrings.tooltip_icon_overallView[language]}>\r\n                    <FaTable/>\r\n                    <ReactTooltip id={\"fa-btn-overallview\"} globalEventOff=\"click\"/>\r\n                </Button>\r\n                <Button onClick={() => onCloseAllTabs()}\r\n                        disabled={!isFoodItemSelected}\r\n                        className={buttonClass + \" btn-secondary\"}\r\n                        data-for={\"fa-btn-close\"}\r\n                        data-tip={applicationStrings.tooltip_icon_removeAll[language]}>\r\n                    <FaTrash/>\r\n                    <ReactTooltip id={\"fa-btn-close\"}/>\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React, {useContext} from \"react\";\r\nimport CloseableTabs from 'react-closeable-tabs';\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\n\r\ninterface TabContainerProps {\r\n    onTabChange: (id: number) => void\r\n    indexToSet: number\r\n}\r\n\r\n// Origin: Vinus Online\r\nexport default function TabContainer(props: TabContainerProps) {\r\n    const applicationData = useContext(ApplicationDataContextStore)\r\n\r\n    const style = {\r\n        buttonTab: {\r\n            border: \"border border-secondary\",\r\n            background: \"none\",\r\n            display: \"inline-flex\",\r\n            verticalAlign: \"middle\",\r\n            minHeight: \"30px\",\r\n            alignItems: \"center\",\r\n            cursor: \"pointer\",\r\n            marginTop: \"-12px\",\r\n            borderBottom: \"2px solid transparent\"\r\n        }\r\n    }\r\n\r\n    if(applicationData?.debug) {\r\n        console.log('TabContainer: Render, food panel data = ', applicationData.applicationData.foodDataPanel.selectedFoodItems)\r\n    }\r\n\r\n    if (!applicationData || !applicationData.applicationData.foodDataPanel.selectedFoodItems) {\r\n        return <div/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <CloseableTabs\r\n                data={applicationData.applicationData.foodDataPanel.selectedFoodItems}\r\n                tabPanelClass=\"tab-panel\"\r\n                tabContentClass=\"tab-content mainPanel\"\r\n                style={style}\r\n                onTabClick={(id) => props.onTabChange(id)}\r\n                activeIndex={applicationData.applicationData.foodDataPanel.selectedFoodItemIndex}\r\n            />\r\n        </div>\r\n    )\r\n}","import {\r\n    AMOUNT_PORTION,\r\n    CARBS_DATA_BASE,\r\n    CARBS_DATA_DETAIL,\r\n    CHART_TYPE_BAR,\r\n    CHART_TYPE_PIE,\r\n    AMOUNT_100_GRAM,\r\n    LIPIDS_DATA_BASE,\r\n    LIPIDS_DATA_OMEGA,\r\n    TAB_BASE_DATA,\r\n    TAB_CARBS_DATA,\r\n    TAB_LIPIDS_DATA,\r\n    TAB_MINERAL_DATA,\r\n    TAB_PROTEINS_DATA,\r\n    TAB_VITAMIN_DATA,\r\n    TAB_ENERGY_DATA, CHART_TYPE_COMPOSITION, CHART_TYPE_ENERGY_LEVEL, CHART_TYPE_ENERGY_AGGREGATED\r\n} from \"../../config/Constants\"\r\nimport {ChartConfigData, DirectCompareChartConfigData, GeneralizedChartConfig} from \"../../types/livedata/ChartConfigData\"\r\nimport {convertBooleanToDigit, convertStringToBoolean} from \"../calculation/MathService\"\r\n\r\n/**\r\n * Converts/encodes a food data panel chart config sub-element into the corresponding URI query string.\r\n */\r\nexport function makeChartConfigUriString(chartConfigData: ChartConfigData | DirectCompareChartConfigData, selectedDataPage: string): string {\r\n    let chartObject: any\r\n    switch (selectedDataPage) {\r\n        case TAB_BASE_DATA:\r\n            chartObject = chartConfigData.baseChartConfig\r\n            break\r\n        case TAB_ENERGY_DATA:\r\n            chartObject = chartConfigData.energyChartConfig\r\n            break\r\n        case TAB_LIPIDS_DATA:\r\n            chartObject = chartConfigData.lipidsChartConfig\r\n            break\r\n        case TAB_CARBS_DATA:\r\n            chartObject = chartConfigData.carbsChartConfig\r\n            break\r\n        case TAB_VITAMIN_DATA:\r\n            chartObject = chartConfigData.vitaminChartConfig\r\n            break\r\n        case TAB_MINERAL_DATA:\r\n            chartObject = chartConfigData.mineralChartConfig\r\n            break\r\n        case TAB_PROTEINS_DATA:\r\n            chartObject = chartConfigData.proteinChartConfig\r\n            break\r\n        default:\r\n            chartObject = {}\r\n    }\r\n\r\n    const generalizedChartConfig = makeGeneralizedChartConfig(chartObject)\r\n    return convertGeneralizedChartConfigToString(generalizedChartConfig)\r\n}\r\n\r\n\r\n/**\r\n * Converts/decodes a URI query string to get the encoded chart config data of the currently selected data page\r\n * in the food data panel.\r\n * The resulting chart config will be added to the existing chart configuration data object passed to this method.\r\n */\r\nexport function getUpdatedChartConfig(chartConfigData: ChartConfigData, chartConfigUriString: string, selectedDataPage: string): ChartConfigData {\r\n    const chartConfigFromUri = convertGeneralizedChartConfigStringToObject(chartConfigUriString)\r\n    const {chartType, expand100, showDetails, showLegend, portionType, subChart} = chartConfigFromUri\r\n\r\n    if (selectedDataPage === TAB_BASE_DATA) {\r\n        if (!chartType || showLegend === undefined || showDetails === undefined) {\r\n            return chartConfigData\r\n        }\r\n\r\n        return {\r\n            ...chartConfigData, baseChartConfig: {\r\n                chartType: chartType,\r\n                showLegend: showLegend,\r\n                showDetails: showDetails\r\n            }\r\n        }\r\n    }\r\n\r\n    if (selectedDataPage === TAB_ENERGY_DATA) {\r\n        if (!chartType) {\r\n            return chartConfigData\r\n        }\r\n\r\n        return {\r\n            ...chartConfigData, energyChartConfig: {\r\n                chartType: chartType,\r\n                showLegend: true,\r\n            }\r\n        }\r\n    }\r\n\r\n    if (selectedDataPage === TAB_LIPIDS_DATA) {\r\n        if (!chartType || showLegend === undefined || subChart === undefined) {\r\n            return chartConfigData\r\n        }\r\n\r\n        return {\r\n            ...chartConfigData, lipidsChartConfig: {\r\n                ...chartConfigData.lipidsChartConfig,\r\n                chartType: chartType,\r\n                showLegend: showLegend,\r\n                subChart: subChart\r\n            }\r\n        }\r\n    }\r\n\r\n    if (selectedDataPage === TAB_CARBS_DATA) {\r\n        if (!chartType || showLegend === undefined || subChart === undefined) {\r\n            return chartConfigData\r\n        }\r\n\r\n        return {\r\n            ...chartConfigData, carbsChartConfig: {\r\n                ...chartConfigData.carbsChartConfig,\r\n                chartType: chartType,\r\n                showLegend: showLegend,\r\n                subChart: subChart\r\n            }\r\n        }\r\n    }\r\n\r\n    if (selectedDataPage === TAB_VITAMIN_DATA || selectedDataPage === TAB_MINERAL_DATA || selectedDataPage === TAB_PROTEINS_DATA) {\r\n        if (portionType === undefined || expand100 === undefined) {\r\n            return chartConfigData\r\n        }\r\n\r\n        const barChartConfig = {\r\n            portionType: portionType,\r\n            expand100: expand100,\r\n        }\r\n\r\n        if (selectedDataPage === TAB_VITAMIN_DATA) {\r\n            return {...chartConfigData, vitaminChartConfig: barChartConfig}\r\n        }\r\n\r\n        if (selectedDataPage === TAB_MINERAL_DATA) {\r\n            return {...chartConfigData, mineralChartConfig: barChartConfig}\r\n        }\r\n\r\n        if (selectedDataPage === TAB_PROTEINS_DATA) {\r\n            return {...chartConfigData, proteinChartConfig: barChartConfig}\r\n        }\r\n\r\n    }\r\n\r\n    return chartConfigData\r\n}\r\n\r\n\r\nexport function getUpdatedDirectCompareChartConfig(chartConfigData: DirectCompareChartConfigData,\r\n                                                   chartConfigUriString: string, selectedDataPage: string): DirectCompareChartConfigData {\r\n    const chartConfigFromUri = convertGeneralizedChartConfigStringToObject(chartConfigUriString)\r\n    const {chartType, expand100, showDetails, showLegend, portionType, subChart, subChart2, synchronize} = chartConfigFromUri\r\n\r\n    if (selectedDataPage === TAB_BASE_DATA) {\r\n        if (!chartType || showLegend === undefined || showDetails === undefined) {\r\n            return chartConfigData\r\n        }\r\n\r\n        return {\r\n            ...chartConfigData, baseChartConfig: {\r\n                chartType: chartType,\r\n                showLegend: showLegend,\r\n                showDetails: showDetails\r\n            }\r\n        }\r\n    }\r\n\r\n    if (selectedDataPage === TAB_LIPIDS_DATA) {\r\n        if (!chartType || showLegend === undefined || subChart === undefined || subChart2 === undefined) {\r\n            return chartConfigData\r\n        }\r\n\r\n        return {\r\n            ...chartConfigData, lipidsChartConfig: {\r\n                ...chartConfigData.lipidsChartConfig,\r\n                chartType: chartType,\r\n                showLegend: showLegend,\r\n                subChart1: subChart,\r\n                subChart2: subChart2,\r\n            }\r\n        }\r\n    }\r\n\r\n    if (selectedDataPage === TAB_CARBS_DATA) {\r\n        if (!chartType || showLegend === undefined || subChart === undefined || subChart2 === undefined) {\r\n            return chartConfigData\r\n        }\r\n\r\n        return {\r\n            ...chartConfigData, carbsChartConfig: {\r\n                ...chartConfigData.carbsChartConfig,\r\n                chartType: chartType,\r\n                showLegend: showLegend,\r\n                subChart1: subChart,\r\n                subChart2: subChart2,\r\n                hideRemainders: false\r\n            }\r\n        }\r\n    }\r\n\r\n    if (selectedDataPage === TAB_VITAMIN_DATA || selectedDataPage === TAB_MINERAL_DATA || selectedDataPage === TAB_PROTEINS_DATA) {\r\n        if (portionType === undefined || expand100 === undefined || synchronize === undefined) {\r\n            return chartConfigData\r\n        }\r\n\r\n        const barChartConfig = {\r\n            portionType: portionType,\r\n            expand100: expand100,\r\n            synchronize: synchronize\r\n        }\r\n\r\n        if (selectedDataPage === TAB_VITAMIN_DATA) {\r\n            return {...chartConfigData, vitaminChartConfig: barChartConfig}\r\n        }\r\n\r\n        if (selectedDataPage === TAB_MINERAL_DATA) {\r\n            return {...chartConfigData, mineralChartConfig: barChartConfig}\r\n        }\r\n\r\n        if (selectedDataPage === TAB_PROTEINS_DATA) {\r\n            return {...chartConfigData, proteinChartConfig: barChartConfig}\r\n        }\r\n\r\n    }\r\n\r\n    return chartConfigData\r\n}\r\n\r\n\r\nexport function makeGeneralizedChartConfig(chartObject: any): GeneralizedChartConfig {\r\n    const generalizedChartObject: GeneralizedChartConfig = {}\r\n    if (chartObject.chartType) {\r\n        generalizedChartObject.chartType = chartObject.chartType\r\n    }\r\n\r\n    if (chartObject.expand100) {\r\n        generalizedChartObject.expand100 = chartObject.expand100\r\n    }\r\n\r\n    if (chartObject.showDetails) {\r\n        generalizedChartObject.showDetails = chartObject.showDetails\r\n    }\r\n\r\n    if (chartObject.showLegend) {\r\n        generalizedChartObject.showLegend = chartObject.showLegend\r\n    }\r\n\r\n    if (chartObject.portionType) {\r\n        generalizedChartObject.portionType = chartObject.portionType\r\n    }\r\n\r\n    if (chartObject.subChart) {\r\n        generalizedChartObject.subChart = chartObject.subChart\r\n    }\r\n\r\n    if (chartObject.subChart2) {\r\n        generalizedChartObject.subChart2 = chartObject.subChart2\r\n    }\r\n\r\n    if (chartObject.synchronize) {\r\n        generalizedChartObject.synchronize = chartObject.synchronize\r\n    }\r\n\r\n    return generalizedChartObject\r\n}\r\n\r\n\r\nexport function convertGeneralizedChartConfigToString(chartObject: GeneralizedChartConfig) {\r\n    const {chartType, expand100, showDetails, showLegend, portionType, subChart, subChart2, synchronize} = chartObject\r\n\r\n    const chartTypeKey = chartType === undefined || chartType === null ? 0 : chartType\r\n    const portionTypeKey = portionType === undefined || portionType === null ? 0 : portionType === AMOUNT_PORTION ? 1 : 2\r\n\r\n    const expand100Key = expand100 ? convertBooleanToDigit(expand100) : 0\r\n    const showLegendKey = showLegend ? convertBooleanToDigit(showLegend) : 0\r\n    const showDetailsKey = showDetails ? convertBooleanToDigit(showDetails) : 0\r\n\r\n    const subChartKey = subChart ? getSubChartKey(subChart) : 0\r\n    const subChartKey2 = subChart2 ? getSubChartKey(subChart2) : 0\r\n    const synchronizeKey = synchronize ? convertBooleanToDigit(synchronize) : 0\r\n\r\n    return `${chartTypeKey}${portionTypeKey}${expand100Key}${showLegendKey}${showDetailsKey}${subChartKey}${subChartKey2}${synchronizeKey}`\r\n}\r\n\r\n\r\nexport function convertGeneralizedChartConfigStringToObject(uriString: string): GeneralizedChartConfig {\r\n    if (!uriString) {\r\n        return {}\r\n    }\r\n\r\n    const stringToParse = uriString.trim()\r\n    if (stringToParse.length !== 8) {\r\n        return {}\r\n    }\r\n\r\n    const chartTypeKey = stringToParse.substring(0, 1)\r\n    const portionTypeKey = stringToParse.substring(1, 2)\r\n    const expand100Key = stringToParse.substring(2, 3)\r\n    const showLegendKey = stringToParse.substring(3, 4)\r\n    const showDetailsKey = stringToParse.substring(4, 5)\r\n    const subChartKey = stringToParse.substring(5, 6)\r\n    const subChartKey2 = stringToParse.substring(6, 7)\r\n    const synchronizeKey = stringToParse.substring(7, 8)\r\n\r\n    const chartTypeNumber = chartTypeKey\r\n    const portionTypeNumber = parseInt(portionTypeKey)\r\n    const subChartNumber = parseInt(subChartKey)\r\n    const subChartNumber2 = parseInt(subChartKey2)\r\n\r\n    let chartType = \"0\"\r\n    switch (chartTypeNumber) {\r\n        case \"1\":\r\n            chartType = CHART_TYPE_PIE\r\n            break;\r\n        case \"2\":\r\n            chartType = CHART_TYPE_BAR\r\n            break;\r\n        case \"3\":\r\n            chartType = CHART_TYPE_COMPOSITION\r\n            break;\r\n        case \"4\":\r\n            chartType = CHART_TYPE_ENERGY_LEVEL\r\n            break;\r\n        case \"5\":\r\n            chartType = CHART_TYPE_ENERGY_AGGREGATED\r\n            break;\r\n    }\r\n\r\n    const portionType = portionTypeNumber === 0 || isNaN(portionTypeNumber)\r\n        ? undefined\r\n        : portionTypeNumber === 1 ? AMOUNT_PORTION : AMOUNT_100_GRAM\r\n\r\n    const subChart = subChartNumber === 0 || isNaN(subChartNumber) ? undefined : getSubChartFromKey(subChartNumber)\r\n    const subChart2 = subChartNumber2 === 0 || isNaN(subChartNumber2) ? undefined : getSubChartFromKey(subChartNumber2)\r\n\r\n    return {\r\n        chartType: chartType,\r\n        portionType: portionType,\r\n        expand100: convertStringToBoolean(expand100Key),\r\n        showLegend: convertStringToBoolean(showLegendKey),\r\n        showDetails: convertStringToBoolean(showDetailsKey),\r\n        subChart: subChart ? subChart : undefined,\r\n        subChart2: subChart2 ? subChart2 : undefined,\r\n        synchronize: convertStringToBoolean(synchronizeKey)\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function getSubChartKey(subChart: string): number {\r\n    switch (subChart) {\r\n        case CARBS_DATA_BASE:\r\n            return 1\r\n        case CARBS_DATA_DETAIL:\r\n            return 2\r\n        case LIPIDS_DATA_BASE:\r\n            return 3\r\n        case LIPIDS_DATA_OMEGA:\r\n            return 4\r\n        default:\r\n            return 0\r\n    }\r\n}\r\n\r\nexport function getSubChartFromKey(key: number): string | null {\r\n    switch (key) {\r\n        case 1:\r\n            return CARBS_DATA_BASE\r\n        case 2:\r\n            return CARBS_DATA_DETAIL\r\n        case 3:\r\n            return LIPIDS_DATA_BASE\r\n        case 4:\r\n            return LIPIDS_DATA_OMEGA\r\n        default:\r\n            return null\r\n    }\r\n}\r\n","import {SEX_FEMALE, SEX_MALE} from \"../../config/Constants\"\r\nimport {ChartConfigData} from \"../../types/livedata/ChartConfigData\"\r\nimport {FoodItemUriData, SimpleFoodItemUriData} from \"../../types/livedata/UriData\"\r\nimport {UserData} from \"../../types/livedata/UserData\"\r\nimport {PortionData} from \"../../types/nutrientdata/FoodItem\"\r\nimport {getPalCategory, getPalValue} from \"../calculation/EnergyService\"\r\nimport {convertBooleanToDigit, convertStringToBoolean, getNumberOfFixedLength} from \"../calculation/MathService\"\r\nimport {getUpdatedChartConfig, makeChartConfigUriString} from \"./ChartConfigConverter\"\r\nimport {prepareUriForParsing} from \"./BaseUriService\";\r\n\r\n\r\nexport function makeFoodDataPanelDefaultUri(foodItemData: FoodItemUriData,\r\n\t\tuserData: UserData, selectedDataPage: string, selectedDisplayMode: string, chartConfigData: ChartConfigData) {\r\n\tconst foodItemDataString = makeFoodItemDefaultUri(foodItemData)\r\n\tconst userDataString = convertUserDataObjectToString(userData)\r\n\tconst chartConfigString = makeChartConfigUriString(chartConfigData, selectedDataPage)\r\n\treturn `${foodItemDataString};${selectedDataPage};${selectedDisplayMode};${userDataString};${chartConfigString}`\r\n}\r\n\r\nexport function makeFoodItemDefaultUri(foodItemData: FoodItemUriData) {\r\n\t\tconst portionString = convertPortionDataObjectToString(foodItemData.portionData)\t\r\n\t\tconst supplementValue = convertBooleanToDigit(foodItemData.supplementData)\r\n\t\tconst combineValue = convertBooleanToDigit(foodItemData.combineData)\r\n\t\t\r\n\t\treturn `${foodItemData.foodItemId};${foodItemData.source};${portionString};${supplementValue}${combineValue}`\r\n}\r\n\r\nexport function parseFoodDataPanelDefaultUri(uri: string, chartConfigData: ChartConfigData): SimpleFoodItemUriData | null {\r\n\tconst fragments = prepareUriForParsing(uri).split(\";\")\r\n\tif(fragments.length !== 8) {\r\n\t\treturn null\r\n\t}\r\n\t\r\n\tconst selectedDataPage = fragments[4]\r\n\tconst displayMode = fragments[5]\r\n\tconst userData = convertUserDataStringToObject(fragments[6])\r\n\tconst chartConfigString = fragments[7]\r\n\tconst foodItemUriData = getFoodItemUriData(fragments)\r\n\t\r\n\tif(!userData || !foodItemUriData) {\r\n\t\treturn null\r\n\t}\r\n\t\r\n\tconst newChartConfigData = getUpdatedChartConfig(chartConfigData, chartConfigString, selectedDataPage)\r\n\t\r\n\treturn {\r\n\t\tselectedFoodItem: foodItemUriData,\r\n\t\tselectedDataPage: selectedDataPage,\r\n\t\tdisplayMode: displayMode,\r\n\t\tuserData: userData,\r\n\t\tchartConfigData: newChartConfigData\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Retrieves the food item uri data from a fragments string. It will always extract those\r\n * data objects from the beginning of the array, no matter how long it is.\r\n */\r\nexport function getFoodItemUriData(fragments: Array<string>): FoodItemUriData | null {\r\n\tconst foodItemId = parseInt(fragments[0])\r\n\tconst source = parseInt(fragments[1])\r\n\tconst portionData = convertPortionDataStringToObject(fragments[2])\r\n\tconst booleanData = fragments[3]\r\n\t\r\n\tconst supplementData = convertStringToBoolean(booleanData.substring(0,1))\r\n\tconst combineData = convertStringToBoolean(booleanData.substring(1,2))\r\n\t\r\n\tif(!portionData || booleanData.length < 2) {\r\n\t\treturn null\r\n\t}\r\n\t\r\n\treturn {\r\n\t\tfoodItemId: foodItemId,\r\n\t\tsource: source,\r\n\t\tportionData: portionData,\r\n\t\tsupplementData: supplementData,\r\n\t\tcombineData: combineData\r\n\t}\r\n}\r\n\r\nexport function convertUserDataObjectToString(userData: UserData): string {\r\n\tconst weight = getNumberOfFixedLength(userData.weight, 3)\r\n\tconst age = getNumberOfFixedLength(userData.age, 3)\r\n\tconst size = getNumberOfFixedLength(userData.size, 3)\r\n\r\n\tconst palValue = getNumberOfFixedLength( getPalCategory(userData.palValue), 2)\r\n\tconst sex = userData.sex === SEX_MALE ? 1 : 0\r\n\t\r\n\tconst pregnant = convertBooleanToDigit(userData.pregnant)\r\n\tconst breastFeeding = convertBooleanToDigit(userData.breastFeeding)\r\n\tconst leisureSports = convertBooleanToDigit(userData.leisureSports)\r\n\t\t\r\n\treturn `${weight}${age}${size}${palValue}${sex}${pregnant}${breastFeeding}${leisureSports}`\r\n}\r\n\r\n\r\nexport function convertUserDataStringToObject(userDataString: string): UserData | null {\r\n\tif(userDataString.length < 15) {\r\n\t\treturn null\r\n\t}\r\n\t\r\n\tconst weight = userDataString.substring(0,3)\r\n\tconst age = userDataString.substring(3,6)\r\n\tconst size = userDataString.substring(6,9)\r\n\tconst palValueInt = userDataString.substring(9,11)\r\n\tconst sex = userDataString.substring(11,12)\r\n\tconst pregnant = userDataString.substring(12,13)\r\n\tconst breastFeeding = userDataString.substring(13,14)\r\n\tconst leisureSports = userDataString.substring(14,15)\r\n\t\r\n\tconst palValue = getPalValue(parseInt(palValueInt))\r\n\t\r\n\treturn {\r\n\t\tweight: parseInt(weight),\r\n\t\tage: parseInt(age),\r\n\t\tsize: parseInt(size),\r\n\t\tpalValue: palValue,\r\n\t\tsex: sex === \"1\" ? SEX_MALE : SEX_FEMALE,\r\n\t\tpregnant: convertStringToBoolean(pregnant),\r\n\t\tbreastFeeding: convertStringToBoolean(breastFeeding),\r\n\t\tleisureSports: convertStringToBoolean(leisureSports),\r\n\t\tinitialValues: false\r\n\t}\r\n}\r\n\r\n\r\nexport function convertPortionDataObjectToString(portionData: PortionData): string {\r\n\treturn `${portionData.portionType}_${portionData.amount}`\r\n}\r\n\r\nexport function convertPortionDataStringToObject(portionDataString: string): PortionData | null {\r\n\tconst fragments = portionDataString.split(\"_\")\r\n\tif(fragments.length !== 2) {\r\n\t\treturn null\r\n\t}\r\n\treturn {\r\n\t\tportionType: parseInt(fragments[0]),\r\n\t\tamount: parseInt(fragments[1])\r\n\t}\r\n}\r\n\r\n\r\n","import { ChartConfigData } from \"../../types/livedata/ChartConfigData\"\r\nimport SelectedFoodItem from \"../../types/livedata/SelectedFoodItem\"\r\nimport { AggregatedFoodItemUriData } from \"../../types/livedata/UriData\"\r\nimport { UserData } from \"../../types/livedata/UserData\"\r\nimport { getUpdatedChartConfig, makeChartConfigUriString } from \"./ChartConfigConverter\"\r\nimport {\r\n\tconvertUserDataObjectToString,\r\n\tconvertUserDataStringToObject\r\n} from \"./FoodDataPanelUriService\"\r\nimport {prepareUriForParsing} from \"./BaseUriService\";\r\n\r\n\r\ninterface Replacemet {\r\n\tkey: string\r\n\tshort: string\r\n}\r\n\r\nconst separator = \"++\"\r\n\r\nconst metaDataReplacement: Array<Replacemet> = [\r\n\t{key: \"nutrientDataList\", short: \"_mA\"},\r\n\t{key: \"foodItem\", short: \"_mB\"},\r\n\t{key: \"sourceItemId\", short: \"_mC\"},\r\n\t{key: \"source\", short: \"_mD\"},\r\n\t{key: \"url\", short: \"_mE\"},\r\n\t{key: \"name\", short: \"_mF\"},\r\n\t{key: \"id\", short: \"_mG\"},\r\n]\r\n\t\r\nconst nutrientCategoryReplacement: Array<Replacemet> = [\r\n\t{key: \"baseData\", short: \"_nA\"},\r\n\t{key: \"carbohydrateData\", short: \"_nB\"},\r\n\t{key: \"vitaminData\", short: \"_nC\"},\r\n\t{key: \"mineralData\", short: \"_nD\"},\r\n\t{key: \"lipidData\", short: \"_nE\"},\r\n\t{key: \"proteinData\", short: \"_nF\"},\r\n]\r\n\r\nconst baseDataReplacements: Array<Replacemet> = [\r\n\t{key: \"energy\", short: \"_bA\"},\r\n\t{key: \"water\", short: \"_bB\"},\r\n\t{key: \"carbohydrates\", short: \"_bC\"},\r\n\t{key: \"lipids\", short: \"_bD\"},\r\n\t{key: \"proteins\", short: \"_bE\"},\r\n\t{key: \"dietaryFibers\", short: \"_bF\"},\r\n\t{key: \"ash\", short: \"_bG\"},\r\n\t{key: \"alcohol\", short: \"_bH\"},\r\n\t{key: \"caffeine\", short: \"_bI\"},\r\n]\r\n\r\nconst carbsDataReplacements: Array<Replacemet> = [\r\n\t{key: \"sugar\", short: \"_cA\"},\r\n\t{key: \"sucrose\", short: \"_cB\"},\r\n\t{key: \"glucose\", short: \"_cC\"},\r\n\t{key: \"lactose\", short: \"_cD\"},\r\n\t{key: \"fructose\", short: \"_cE\"},\r\n\t{key: \"galactose\", short: \"_cF\"},\r\n\t{key: \"maltose\", short: \"_cG\"},\r\n\t{key: \"starch\", short: \"_cH\"}\r\n]\r\n\r\nconst lipidsDataReplacements: Array<Replacemet> = [\r\n\t{key: \"saturated\", short: \"_lA\"},\r\n\t{key: \"unsaturatedMono\", short: \"_lB\"},\r\n\t{key: \"unsaturatedPoly\", short: \"_lC\"},\r\n\t{key: \"transFattyAcids\", short: \"_lD\"},\r\n\t{key: \"cholesterol\", short: \"_lE\"},\r\n\t{key: \"galactose\", short: \"_lF\"},\r\n\t{key: \"omegaData\", short: \"_lG\"},\r\n\t{key: \"omega3\", short: \"_lH\"},\r\n\t{key: \"omega6\", short: \"_li\"},\r\n\t{key: \"uncertain\", short: \"_lj\"},\r\n\t{key: \"uncertainRatio\", short: \"_li\"}\r\n]\r\n\r\nconst mineralDataReplacement: Array<Replacemet> = [\r\n\t{key: \"calcium\", short: \"_bA\"},\r\n\t{key: \"iron\", short: \"_bB\"},\r\n\t{key: \"magnesium\", short: \"_bC\"},\r\n\t{key: \"phosphorus\", short: \"_bD\"},\r\n\t{key: \"potassium\", short: \"_bE\"},\r\n\t{key: \"sodium\", short: \"_bF\"},\r\n\t{key: \"zinc\", short: \"_bG\"},\r\n\t{key: \"selenium\", short: \"_bH\"},\r\n\t{key: \"manganese\", short: \"_bI\"},\r\n\t{key: \"copper\", short: \"_bJ\"}\r\n]\r\n\r\nconst vitaminDataReplacement: Array<Replacemet> = [\r\n\t{key: \"a\", short: \"_vA\"},\r\n\t{key: \"b1\", short: \"_vB\"},\r\n\t{key: \"b2\", short: \"_vC\"},\r\n\t{key: \"b3\", short: \"_vD\"},\r\n\t{key: \"b5\", short: \"_vE\"},\r\n\t{key: \"b7\", short: \"_vF\"},\r\n\t{key: \"b9\", short: \"_vG\"},\r\n\t{key: \"b12\", short: \"_vH\"},\r\n\t{key: \"c\", short: \"_vI\"},\r\n\t{key: \"d\", short: \"_vJ\"},\r\n\t{key: \"e\", short: \"_vK\"},\r\n\t{key: \"k\", short: \"_vL\"}\r\n]\r\n\r\nconst carotenoidDataReplacement: Array<Replacemet> = [\r\n\t{key: \"caroteneAlpha\", short: \"_xA\"},\r\n\t{key: \"caroteneBeta\", short: \"_xB\"},\r\n\t{key: \"cryptoxanthin\", short: \"_xC\"},\r\n\t{key: \"lycopene\", short: \"_xD\"},\r\n\t{key: \"lutein\", short: \"_xE\"},\r\n]\r\n\r\nconst proteinDataReplacement: Array<Replacemet> = [\r\n\t{key: \"tryptophan\", short: \"_bA\"},\r\n\t{key: \"threonine\", short: \"_bB\"},\r\n\t{key: \"isoleucine\", short: \"_bC\"},\r\n\t{key: \"leucine\", short: \"_bD\"},\r\n\t{key: \"lysine\", short: \"_bE\"},\r\n\t{key: \"methionine\", short: \"_bF\"},\r\n\t{key: \"cystine\", short: \"_bG\"},\r\n\t{key: \"phenylalanine\", short: \"_bH\"},\r\n\t{key: \"tyrosine\", short: \"_bI\"},\r\n\t{key: \"arginine\", short: \"_bJ\"},\r\n\t{key: \"histidine\", short: \"_bK\"},\r\n\t{key: \"alanine\", short: \"_bL\"},\r\n\t{key: \"asparticAcid\", short: \"_bM\"},\r\n\t{key: \"glycine\", short: \"_bN\"},\r\n\t{key: \"proline\", short: \"_bO\"},\r\n\t{key: \"serine\", short: \"_bP\"},\r\n]\r\n\r\nconst replacements: Array<Array<Replacemet>> = [\r\n\tmetaDataReplacement,\r\n\tnutrientCategoryReplacement,\r\n\tbaseDataReplacements,\r\n\tcarbsDataReplacements,\r\n\tlipidsDataReplacements,\r\n\tmineralDataReplacement,\r\n\tvitaminDataReplacement,\r\n\tcarotenoidDataReplacement,\r\n\tproteinDataReplacement\r\n]\r\n\r\n\r\nexport function convertAggregatedDataJsonToUriString(uriData: AggregatedFoodItemUriData): string {\t\r\n\tconst objectToParse: SelectedFoodItem = {...uriData.selectedFoodItem, compositeSubElements: undefined, component: undefined, foodClass: undefined}\r\n\tlet selectedFoodItemString = JSON.stringify(objectToParse)\r\n\t\r\n\treplacements.forEach(replacementArray => {\r\n\t\treplacementArray.forEach(replacement => selectedFoodItemString = selectedFoodItemString.replace(`\"${replacement.key}\"`, replacement.short))\r\n\t})\r\n\t\r\n\tconst userDataString = convertUserDataObjectToString(uriData.userData)\r\n\tconst chartConfigString = makeChartConfigUriString(uriData.chartConfigData, uriData.selectedDataPage)\r\n\t\r\n\treturn `${uriData.selectedDataPage}${separator}${selectedFoodItemString}${separator}${userDataString}${separator}${chartConfigString}`\r\n}\r\n\r\nexport function convertAggregatedUriStringToObject(chartConfigData: ChartConfigData, uriString: string): AggregatedFoodItemUriData | null {\r\n\tconst fragments = uriString.split(separator)\r\n\tif(fragments.length !== 4) {\r\n\t\treturn null\r\n\t}\r\n\t\r\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\tconst selectedDataPage = fragments[0]\r\n\tlet selectedFoodItem: SelectedFoodItem = convertUriStringToSelectedFoodItem( fragments[1])\r\n\tselectedFoodItem = {...selectedFoodItem, aggregated: true}\r\n\t\r\n\tconst userData: UserData | null = convertUserDataStringToObject(fragments[2])\r\n\tconst newChartConfigData: ChartConfigData = getUpdatedChartConfig(chartConfigData, fragments[3], selectedDataPage)\r\n\t\r\n\tif(!userData) {\r\n\t\treturn null\r\n\t}\r\n\t\t\r\n\treturn {\r\n\t\tselectedDataPage: selectedDataPage,\r\n\t\tselectedFoodItem: selectedFoodItem,\r\n\t\tuserData: userData,\r\n\t\tchartConfigData: newChartConfigData\r\n\t}\r\n}\r\n\r\n\r\nexport function convertUriStringToSelectedFoodItem(uriString: string): SelectedFoodItem {\r\n\tlet stringToParse = prepareUriForParsing(uriString).trim()\r\n\tstringToParse = stringToParse.replace(/%22/g, \"\\\"\")\r\n\tstringToParse = stringToParse.replace(/%20/g, \" \")\r\n\t\r\n\treplacements.forEach(replacementArray => {\r\n\t\treplacementArray.forEach(replacement => stringToParse = stringToParse.replace(replacement.short, `\"${replacement.key}\"`))\r\n\t})\r\n\t\r\n\treturn JSON.parse(stringToParse)\r\n}","import { UserData } from \"../types/livedata/UserData\";\r\n\r\nexport const USERDATA_ERROR_AGE = \"userdata error age\"\r\nexport const USERDATA_ERROR_WEIGHT = \"userdata error weight\"\r\nexport const USERDATA_ERROR_SIZE = \"userdata error size\"\r\nexport const USERDATA_OK = \"userdata ok\"\r\n\r\nexport function checkUserDataValidity(userData: UserData): string {\r\n\tconst {age, size, weight} = userData\r\n\r\n\tif (age != null && (age < 15 || age > 100 || isNaN(age))) {\r\n\t\treturn USERDATA_ERROR_AGE\r\n    } else if (size != null && (size < 80 || size > 225 || isNaN(size))) {\r\n\t\treturn USERDATA_ERROR_SIZE\r\n\t} else if (weight != null && (weight < 30 || weight > 250 || isNaN(weight))) {\r\n\t\treturn USERDATA_ERROR_WEIGHT\r\n    }\r\n\r\n    return USERDATA_OK\r\n}","import FoodAnalyzerContainer from \"./FoodAnalyzerContainer\";\r\nimport React, {useContext, useEffect} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport TabContainer from \"./TabContainer\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport {\r\n    PATH_FOODDATA_PANEL,\r\n    QUERYKEY_DATAPANEL_ADD, QUERYKEY_DATAPANEL_ADD_COMPOSITE,\r\n    QUERYKEY_DATAPANEL_AGGREGATED,\r\n    QUERYKEY_DATAPANEL_ITEM\r\n} from \"../../config/Constants\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport {makeFoodDataPanelComponent} from \"../../service/FoodDataPanelService\";\r\nimport {AggregatedFoodItemUriData, FoodItemUriData} from \"../../types/livedata/UriData\";\r\nimport {makeFoodDataPanelDefaultUri, parseFoodDataPanelDefaultUri} from \"../../service/uri/FoodDataPanelUriService\";\r\nimport SelectedFoodItem from \"../../types/livedata/SelectedFoodItem\";\r\nimport {\r\n    convertAggregatedDataJsonToUriString,\r\n    convertAggregatedUriStringToObject\r\n} from \"../../service/uri/FoodDataPanelAggregatedUriService\";\r\nimport {checkUserDataValidity, USERDATA_OK} from \"../../service/UserDataService\";\r\nimport {isMobileDevice} from \"../../service/WindowDimension\";\r\nimport {FaExclamationTriangle} from \"react-icons/fa\";\r\nimport {prepareUriForParsing} from \"../../service/uri/BaseUriService\";\r\n\r\nexport default function FoodDataPanelContainer() {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const languageContext = useContext(LanguageContext)\r\n    const history = useHistory()\r\n\r\n    const queryString = window.location.search.substring(1)\r\n    const equalOperator = queryString.indexOf(\"=\")\r\n    const key = queryString.substring(0, equalOperator)\r\n    const value = prepareUriForParsing(queryString.substring(equalOperator + 1))\r\n\r\n    const openSelectorModal = key === QUERYKEY_DATAPANEL_ADD && value === \"1\"\r\n    const openCompositeSelectorModal = key === QUERYKEY_DATAPANEL_ADD_COMPOSITE && value === \"1\"\r\n\r\n    useEffect(() => {\r\n        buildDataPanelPageFromURI()\r\n    }, [applicationContext?.applicationData.foodDataPanel.selectedFoodItemIndex,\r\n        applicationContext?.applicationData.foodDataPanel.selectedFoodItems,\r\n        applicationContext?.applicationData.foodDataPanel.selectedDataPage,\r\n        applicationContext?.applicationData.foodDataPanel.displayMode,\r\n        applicationContext?.applicationData.foodDataPanel.chartConfigData,\r\n        applicationContext?.userData])\r\n\r\n    const buildDataPanelPageFromURI = () => {\r\n        if (!applicationContext) {\r\n            return\r\n        }\r\n\r\n        const {selectedFoodItemIndex, selectedFoodItems} = applicationContext.applicationData.foodDataPanel\r\n\r\n        if (selectedFoodItemIndex === null || !selectedFoodItems || selectedFoodItems.length === 0) {\r\n            createDataFromUriQuery()\r\n        } else {   // Set new URI Query\r\n            updateUriQuery(selectedFoodItemIndex)\r\n        }\r\n    }\r\n\r\n    if (!applicationContext || !applicationContext.ready) {\r\n        return <div/>\r\n    }\r\n\r\n    const chartConfigData = applicationContext.applicationData.foodDataPanel.chartConfigData\r\n\r\n    const updateUriQuery = (selectedFoodItemIndex: number) => {\r\n        const selectedFoodItem = selectedFoodItems[selectedFoodItemIndex]\r\n        const userData = applicationContext.userData\r\n        const {\r\n            selectedDataPage,\r\n            displayMode,\r\n            chartConfigData\r\n        } = applicationContext.applicationData.foodDataPanel\r\n\r\n        // New query for aggregated food item\r\n        if (selectedFoodItem.aggregated) {\r\n            const uriDataObject: AggregatedFoodItemUriData = {\r\n                selectedFoodItem: {...selectedFoodItem, component: undefined},\r\n                selectedDataPage: selectedDataPage,\r\n                userData: userData,\r\n                chartConfigData: chartConfigData\r\n            }\r\n\r\n            const query = convertAggregatedDataJsonToUriString(uriDataObject)\r\n\r\n            history.push({\r\n                pathName: PATH_FOODDATA_PANEL,\r\n                search: `${QUERYKEY_DATAPANEL_AGGREGATED}=${query}`\r\n            })\r\n        } else {   // New query for a default food item\r\n            const {portion, selectedSource, supplementData, combineData} = selectedFoodItem\r\n            const foodItemData: FoodItemUriData = {\r\n                foodItemId: selectedFoodItem.foodItem.id,\r\n                portionData: portion,\r\n                source: selectedSource,\r\n                supplementData: supplementData,\r\n                combineData: combineData\r\n            }\r\n            let query = makeFoodDataPanelDefaultUri(foodItemData, userData, selectedDataPage, displayMode,\r\n                chartConfigData)\r\n\r\n            const currentQuery = window.location.search\r\n            if (currentQuery.includes(\"&group=\")) {\r\n                const groupFragment = currentQuery.substring(currentQuery.indexOf(\"&group=\"));\r\n                query += groupFragment;\r\n            }\r\n\r\n            history.push({\r\n                pathName: PATH_FOODDATA_PANEL,\r\n                search: `${QUERYKEY_DATAPANEL_ITEM}=${query}`\r\n            })\r\n        }\r\n    }\r\n\r\n    const createDataFromUriQuery = () => {\r\n        const {\r\n            addItemToFoodDataPanel,\r\n            setSelectedDataPage,\r\n            setSelectedDisplayMode\r\n        } = applicationContext.setFoodDataPanelData\r\n\r\n        // Set data from an aggregated food item query\r\n        if (key === QUERYKEY_DATAPANEL_AGGREGATED && value.length > 1) {\r\n            try {\r\n                const uriDataObject: AggregatedFoodItemUriData | null = convertAggregatedUriStringToObject(chartConfigData, value)\r\n                if (!uriDataObject) {\r\n                    return\r\n                }\r\n\r\n                if (checkUserDataValidity(uriDataObject.userData) !== USERDATA_OK) {\r\n                    return\r\n                }\r\n\r\n                applicationContext.setFoodDataPanelData.updateFoodDataPanelChartConfig(uriDataObject.chartConfigData)\r\n                setSelectedDataPage(uriDataObject.selectedDataPage)\r\n                applicationContext.setUserData(uriDataObject.userData)\r\n\r\n                const selectedFoodItemWithComponent = makeFoodDataPanelComponent(uriDataObject.selectedFoodItem,\r\n                    applicationContext.foodDataCorpus.foodNames, languageContext.language)\r\n\r\n                if (selectedFoodItemWithComponent) {\r\n                    selectedFoodItemWithComponent.aggregated = true\r\n                    addItemToFoodDataPanel(selectedFoodItemWithComponent)\r\n                }\r\n            } catch (e) {\r\n                if (applicationContext.debug) {\r\n                    console.log(e)\r\n                }\r\n            }\r\n        }\r\n\r\n        // Set data from a simple food item (create data from query parameters)\r\n        if (key === QUERYKEY_DATAPANEL_ITEM && value.length > 1) {\r\n            const uriDataObject = parseFoodDataPanelDefaultUri(value, chartConfigData)\r\n            if (uriDataObject) {\r\n                const foodItem = applicationContext.foodDataCorpus.foodItems.find(\r\n                    foodItem => foodItem.id === uriDataObject.selectedFoodItem.foodItemId\r\n                )\r\n\r\n                if (!foodItem) {\r\n                    return\r\n                }\r\n\r\n                if (checkUserDataValidity(uriDataObject.userData) !== USERDATA_OK) {\r\n                    return\r\n                }\r\n\r\n                applicationContext.setUserData(uriDataObject.userData)\r\n                const foodClass = applicationContext.foodDataCorpus.foodClasses.find(\r\n                    foodClass => foodClass.id === foodItem.foodClass\r\n                )\r\n\r\n                const selectedFoodItem: SelectedFoodItem = {\r\n                    id: 1,\r\n                    foodItem: foodItem,\r\n                    foodClass: foodClass,\r\n                    portion: uriDataObject.selectedFoodItem.portionData,\r\n                    selectedSource: uriDataObject.selectedFoodItem.source,\r\n                    combineData: uriDataObject.selectedFoodItem.combineData,\r\n                    supplementData: uriDataObject.selectedFoodItem.supplementData\r\n                }\r\n\r\n                setSelectedDataPage(uriDataObject.selectedDataPage)\r\n                setSelectedDisplayMode(uriDataObject.displayMode)\r\n\r\n                const selectedFoodItemWithComponent = makeFoodDataPanelComponent(selectedFoodItem,\r\n                    applicationContext.foodDataCorpus.foodNames, languageContext.language)\r\n\r\n                if (selectedFoodItemWithComponent) {\r\n                    addItemToFoodDataPanel(selectedFoodItemWithComponent)\r\n                }\r\n\r\n                applicationContext.setFoodDataPanelData.updateFoodDataPanelChartConfig(uriDataObject.chartConfigData)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const selectedFoodItems = applicationContext.applicationData.foodDataPanel.selectedFoodItems\r\n\r\n    const onTabChange = (foodId) => {\r\n        buildDataPanelPageFromURI()\r\n        for (let i = 0; i < selectedFoodItems.length; i++) {\r\n            if (selectedFoodItems[i].id === foodId) {\r\n                applicationContext.setFoodDataPanelData.setSelectedFoodTab(i)\r\n            }\r\n        }\r\n    }\r\n\r\n    const onNewFoodItemSelected = (): void => {\r\n        buildDataPanelPageFromURI()\r\n        const newTabIndex = applicationContext.applicationData.foodDataPanel.selectedFoodItems.length - 1\r\n        applicationContext.setFoodDataPanelData.setSelectedFoodTab(newTabIndex)\r\n    }\r\n\r\n    const selectedTabIndex = applicationContext.applicationData.foodDataPanel.selectedFoodItemIndex\r\n\r\n    if (!(selectedTabIndex >= 0)) {\r\n        return <div/>\r\n    }\r\n\r\n    const selectedFoodItem = applicationContext.applicationData.foodDataPanel.selectedFoodItems[selectedTabIndex]\r\n\r\n    if (applicationContext.debug) {\r\n        console.log('FoodDataPanelContainer: Render, selected food item = ', selectedFoodItem)\r\n    }\r\n\r\n    const containerDivClass = isMobileDevice() ? \"\" : \"d-flex flex-row justify-content-center\"\r\n    const basepanelClass = selectedFoodItems && selectedFoodItems.length\r\n        ? \"d-flex flex-row foodanalyzer-basepanel\"\r\n        : \"d-flex flex-row foodanalyzer-basepanel-empty\";\r\n\r\n    return <div className={\"container-scroll container-fluid\"}>\r\n        {selectedFoodItem !== null &&\r\n            <div style={{paddingTop: \"4vh\"}}>\r\n                <div className={containerDivClass} >\r\n                    <div className={basepanelClass}>\r\n                        <div>\r\n                            <FoodAnalyzerContainer onNewFoodItemSelected={onNewFoodItemSelected}\r\n                                                   openSelectorModal={openSelectorModal}\r\n                                                   openCompositeSelectorModal={openCompositeSelectorModal}\r\n                            />\r\n                        </div>\r\n                        <div className={\"d-flex flex-row\"}>\r\n                            <div className=\"col foodanalyzer-inner-container\">\r\n                                {selectedFoodItems && selectedFoodItems.length > 0 ?\r\n                                    <div>\r\n                                        <TabContainer indexToSet={selectedTabIndex} onTabChange={onTabChange}/>\r\n                                    </div>\r\n                                    :\r\n                                    <div className={\"form-text\"} style={{margin: \"1.2vw\"}}>\r\n                                        <p>\r\n                                            <i>\r\n                                                {applicationStrings.text_empty_fooddatapanel[languageContext.language]}\r\n                                            </i>\r\n                                        </p>\r\n                                        {isMobileDevice() &&\r\n                                        <p>\r\n                                            <FaExclamationTriangle/> {applicationStrings.text_empty_fooddatapanel_mobileInfo[languageContext.language]}\r\n                                        </p>\r\n                                        }\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        }\r\n    </div>\r\n\r\n\r\n}","import React, {useContext, useEffect, useState} from \"react\";\r\nimport SelectedFoodItem from \"../../types/livedata/SelectedFoodItem\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport FoodSelector from \"./FoodSelector\";\r\nimport {Button, Card, CardDeck} from \"react-bootstrap\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {direct_compare_color1, direct_compare_color2} from \"../../config/ChartConfig\";\r\nimport {initialComparisonFoodClassId, initialFoodClassId} from \"../../config/ApplicationSetting\";\r\nimport ReactSelectOption from \"../../types/ReactSelectOption\";\r\n\r\ninterface DirectCompareSelectorProps {\r\n    updateSelectedFoodItems: (selectedFoodItem1: SelectedFoodItem, selectedFoodItem2: SelectedFoodItem) => void\r\n}\r\n\r\nconst STATUS_FIRST_TIME = \"first time\"\r\nconst STATUS_NOT_UPDATED = \"not updated\"\r\nconst STATUS_UPDATED = \"updated\"\r\n\r\nexport function DirectCompareSelector(props: DirectCompareSelectorProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const languageContext = useContext(LanguageContext)\r\n    const language = languageContext.language\r\n\r\n    // Checkbox states (needed to update global configuration)\r\n    const [supplementData1, setSupplementData1] = useState<boolean>(true)\r\n    const [combineData1, setCombineData1] = useState<boolean>(false)\r\n\r\n    const [supplementData2, setSupplementData2] = useState<boolean>(true)\r\n    const [combineData2, setCombineData2] = useState<boolean>(false)\r\n\r\n    const initialItem1 = applicationContext && applicationContext.applicationData.directCompareDataPanel.selectedFoodItem1 !== null\r\n        ? applicationContext.applicationData.directCompareDataPanel.selectedFoodItem1\r\n        : null\r\n\r\n    const initialItem2 = applicationContext && applicationContext.applicationData.directCompareDataPanel.selectedFoodItem2 !== null\r\n        ? applicationContext.applicationData.directCompareDataPanel.selectedFoodItem2\r\n        : null\r\n\r\n    const [selectedFoodItem1, setSelectedFoodItem1] = useState<SelectedFoodItem | null>(initialItem1)\r\n    const [selectedFoodItem2, setSelectedFoodItem2] = useState<SelectedFoodItem | null>(initialItem2)\r\n    const [displayStatus, setDisplayStatus] = useState<string>(STATUS_FIRST_TIME)\r\n\r\n    useEffect(() => {\r\n        if(applicationContext && applicationContext.applicationData.directCompareDataPanel.selectedFoodItem2) {\r\n            const {selectedFoodItem1, selectedFoodItem2} = applicationContext.applicationData.directCompareDataPanel\r\n            if(selectedFoodItem1 && selectedFoodItem2) {\r\n                updateSelectedFoodItem1(selectedFoodItem1)\r\n                updateSelectedFoodItem2(selectedFoodItem2)\r\n            }\r\n        }\r\n\r\n    }, [applicationContext?.applicationData.directCompareDataPanel, supplementData1, combineData1, supplementData2, combineData2 ])\r\n\r\n    if (!applicationContext) {\r\n        return <div/>\r\n    }\r\n\r\n    const updateSelectedFoodItem1 = (selectedFoodItem: SelectedFoodItem): void => {\r\n        setSelectedFoodItem1({...selectedFoodItem})\r\n        if (displayStatus !== STATUS_FIRST_TIME) {\r\n            setDisplayStatus(STATUS_UPDATED)\r\n        }\r\n    }\r\n\r\n    const updateSelectedFoodItem2 = (selectedFoodItem: SelectedFoodItem): void => {\r\n        setSelectedFoodItem2(selectedFoodItem)\r\n        if (displayStatus !== STATUS_FIRST_TIME) {\r\n            setDisplayStatus(STATUS_UPDATED)\r\n        }\r\n    }\r\n\r\n    const updateFoodSelectorConfig1 = (selectedCategory: ReactSelectOption | null, supplementData: boolean, combineData: boolean) => {\r\n        setSupplementData1(supplementData)\r\n        setCombineData1(combineData)\r\n    }\r\n\r\n    const updateFoodSelectorConfig2 = (selectedCategory: ReactSelectOption | null, supplementData: boolean, combineData: boolean) => {\r\n        setSupplementData2(supplementData)\r\n        setCombineData2(combineData)\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        if (selectedFoodItem1 && selectedFoodItem2) {\r\n            props.updateSelectedFoodItems(selectedFoodItem1, selectedFoodItem2)\r\n\r\n            if (applicationContext) {\r\n                const currentSelectorSetting1 = applicationContext.applicationData.directCompareDataPanel.foodSelector1\r\n                if (supplementData1 !== currentSelectorSetting1.sourceSupplement\r\n                    || combineData1 !== currentSelectorSetting1.sourceCombine) {\r\n                    applicationContext.setDirectCompareFoodSelector1(supplementData1, combineData1)\r\n                }\r\n\r\n                const currentSelectorSetting2 = applicationContext.applicationData.directCompareDataPanel.foodSelector2\r\n                if (supplementData2 !== currentSelectorSetting2.sourceSupplement\r\n                    || combineData2 !== currentSelectorSetting2.sourceCombine) {\r\n                    applicationContext.setDirectCompareFoodSelector2(supplementData2, combineData2)\r\n                }\r\n            }\r\n        }\r\n\r\n        setDisplayStatus(STATUS_NOT_UPDATED)\r\n    }\r\n\r\n\r\n    const renderFoodSelectorCard = (foodSelectorNumber: number) => {\r\n        const updateSelectedFoodItem = foodSelectorNumber === 1 ? updateSelectedFoodItem1 : updateSelectedFoodItem2\r\n        const styleClass = foodSelectorNumber === 1 ? {backgroundColor: direct_compare_color1} : {backgroundColor: direct_compare_color2}\r\n        const initialFoodClassToSet = foodSelectorNumber === 1 ? initialFoodClassId : initialComparisonFoodClassId\r\n\r\n        const selectedFoodItem = foodSelectorNumber === 1 ? selectedFoodItem1 : selectedFoodItem2\r\n        const updateFoodSelectorConfig = foodSelectorNumber === 1 ? updateFoodSelectorConfig1 : updateFoodSelectorConfig2\r\n\r\n        return <div style={{paddingTop: \"3.5vh\"}}>\r\n            <Card style={styleClass} >\r\n                <Card.Header>\r\n                    <div className={\"form-label-dc-selector\"}>\r\n                        {applicationStrings.label_food[language]} {foodSelectorNumber}\r\n                    </div>\r\n                </Card.Header>\r\n                <CardDeck>\r\n                    <FoodSelector updateSelectedFoodItem={updateSelectedFoodItem}\r\n                                  updateFoodSelectorConfig={updateFoodSelectorConfig}\r\n                                  compositeSelector={false}\r\n                                  directCompareSelector={true}\r\n                                  selectedFoodItem={selectedFoodItem}\r\n                                  defaultFoodClass={initialFoodClassToSet}\r\n                                  directCompareSelectorNumber={foodSelectorNumber}\r\n                    />\r\n                </CardDeck>\r\n            </Card>\r\n        </div>\r\n    }\r\n\r\n    const buttonName = displayStatus === STATUS_FIRST_TIME ? applicationStrings.button_show[language] : applicationStrings.button_update[language]\r\n\r\n    return <div>\r\n        {renderFoodSelectorCard(1)}\r\n        {renderFoodSelectorCard(2)}\r\n        <div style={{paddingTop: \"2vh\"}}>\r\n            <Button className={\"form-button float-end\"}\r\n                    disabled={displayStatus === STATUS_NOT_UPDATED}\r\n                    onClick={onSubmit}>\r\n                {buttonName}\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}","import {isMobileDevice, WindowDimension} from \"./WindowDimension\";\r\nimport {\r\n    basedata_piechart_width,\r\n    basedata_piechart_width_m,\r\n    default_chart_height,\r\n    default_chart_height_m\r\n} from \"../config/ChartConfig\";\r\nimport {TAB_BASE_DATA} from \"../config/Constants\";\r\n\r\nexport function calculateChartHeight(currentDimension: WindowDimension, directCompare?: boolean, dataPage?: string): number {\r\n    const mobile = isMobileDevice()\r\n\r\n    // Mobile devices don't need to be regarded in direct compare menu, as the functionality is disabled\r\n    if(directCompare) {\r\n        return currentDimension.height / 3\r\n    } else {\r\n        return dataPage === TAB_BASE_DATA\r\n            ? mobile\r\n                ? basedata_piechart_width_m\r\n                : basedata_piechart_width\r\n            : mobile\r\n                ? default_chart_height_m\r\n                : default_chart_height\r\n    }\r\n}\r\n\r\nexport function calculateChartContainerHeight(currentDimension: WindowDimension, directCompare?: boolean): number {\r\n    return directCompare === true\r\n        ? calculateChartHeight(currentDimension, directCompare) + 24\r\n        : calculateChartHeight(currentDimension, directCompare) + 10\r\n}\r\n","import React, {useContext} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport getName from \"../../service/LanguageService\";\r\nimport SelectedFoodItem from \"../../types/livedata/SelectedFoodItem\";\r\n\r\nexport interface VerticalLabelProps {\r\n    selectedFoodItem: SelectedFoodItem\r\n}\r\n\r\nexport function VerticalLabel(props: VerticalLabelProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const languageContext = useContext(LanguageContext)\r\n\r\n    if(applicationContext === null) {\r\n        return null\r\n    }\r\n\r\n    const condition = applicationContext.foodDataCorpus.conditions.find(condition => condition.id === props.selectedFoodItem.foodItem.conditionId)\r\n    const conditionName = condition ? getName(condition, languageContext.language) : \"\"\r\n\r\n    return (\r\n        <>\r\n            <div className={\"vertical-label-small\"}>{conditionName}</div>\r\n            <div className={\"vertical-label\"}>{props.selectedFoodItem.resolvedName}</div>\r\n        </>\r\n    )\r\n}","import MineralVitaminChart from \"../fooddatapanel/charts/MineralVitaminChart\";\r\nimport {AMOUNT_PORTION, CHART_VITAMINS} from \"../../config/Constants\";\r\nimport React, {useContext, useEffect, useState} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport {BarChartConfigurationForm} from \"../charthelper/BarChartConfigurationForm\";\r\nimport {roundToNextValue} from \"../../service/calculation/MathService\";\r\nimport {\r\n    getMaximumValue,\r\n    getOverlappingValues,\r\n    nullifyNonOverlappingValues\r\n} from \"../../service/calculation/NutrientCalculationService\";\r\nimport {direct_compare_color1, direct_compare_color2} from \"../../config/ChartConfig\";\r\nimport {initialDirectCompareConfigData} from \"../../config/ApplicationSetting\";\r\nimport {Card} from \"react-bootstrap\";\r\nimport {DC_MineralVitaminChartProps} from \"../../types/livedata/ChartPropsData\";\r\nimport {useWindowDimension} from \"../../service/WindowDimension\";\r\nimport {calculateChartContainerHeight} from \"../../service/ChartSizeCalculation\";\r\nimport {getNutrientData} from \"../../service/nutrientdata/NutrientDataRetriever\";\r\nimport {VerticalLabel} from \"./VerticalLabel\";\r\n\r\nexport function DcMineralVitaminChart(props: DC_MineralVitaminChartProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const windowSize = useWindowDimension()\r\n\r\n    const chartConfigVitamins = applicationContext\r\n        ? applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.vitaminChartConfig\r\n        : initialDirectCompareConfigData.vitaminChartConfig\r\n\r\n    const chartConfigMinerals = applicationContext\r\n        ? applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.mineralChartConfig\r\n        : initialDirectCompareConfigData.mineralChartConfig\r\n\r\n    const [portionType_vitamins, setPortionType_vitamins] = useState<string>(chartConfigVitamins.portionType)\r\n    const [portionType_minerals, setPortionType_minerals] = useState<string>(chartConfigMinerals.portionType)\r\n    const [expand100_vitamins, setExpand100_vitamins] = useState<boolean>(chartConfigVitamins.expand100)\r\n    const [expand100_minerals, setExpand100_minerals] = useState<boolean>(chartConfigMinerals.expand100)\r\n    const [synchronizeVitamins, setSynchronizeVitamins] = useState<boolean>(chartConfigVitamins.synchronize)\r\n    const [synchronizeMinerals, setSynchronizeMinerals] = useState<boolean>(chartConfigMinerals.synchronize)\r\n\r\n    const [containerHeight, setContainerHeight] = useState<number>(calculateChartContainerHeight(windowSize, true))\r\n\r\n    useEffect(() => {\r\n            updateChartConfig()\r\n            setContainerHeight(calculateChartContainerHeight(windowSize, true))\r\n        }, [portionType_minerals,\r\n            portionType_vitamins,\r\n            synchronizeVitamins,\r\n            synchronizeMinerals,\r\n            expand100_vitamins,\r\n            expand100_minerals,\r\n            containerHeight,\r\n            windowSize]\r\n    )\r\n\r\n    if (!applicationContext) {\r\n        return <div/>\r\n    }\r\n\r\n    const updateChartConfig = () => {\r\n        if (applicationContext) {\r\n            const newChartConfig = {\r\n                ...applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart,\r\n                vitaminChartConfig: {\r\n                    portionType: portionType_vitamins,\r\n                    expand100: expand100_vitamins,\r\n                    synchronize: synchronizeVitamins\r\n                },\r\n                mineralChartConfig: {\r\n                    portionType: portionType_minerals,\r\n                    expand100: expand100_minerals,\r\n                    synchronize: synchronizeMinerals\r\n                }\r\n            }\r\n            applicationContext.setDirectCompareData.updateDirectCompareChartConfig(newChartConfig)\r\n        }\r\n    }\r\n\r\n    const requirementData = props.selectedSubChart === CHART_VITAMINS\r\n        ? applicationContext.foodDataCorpus.dietaryRequirements?.vitaminRequirementData\r\n        : applicationContext.foodDataCorpus.dietaryRequirements?.mineralRequirementData\r\n\r\n    if (!requirementData) {\r\n        return <div/>\r\n    }\r\n\r\n    const handleRadioButtonClick = (event: any): void => {\r\n        const value = event.target.value\r\n        props.selectedSubChart === CHART_VITAMINS\r\n            ? setPortionType_vitamins(value)\r\n            : setPortionType_minerals(value)\r\n    }\r\n\r\n    const handleExpandCheckbox = () => {\r\n        props.selectedSubChart === CHART_VITAMINS\r\n            ? setExpand100_vitamins(!expand100_vitamins)\r\n            : setExpand100_minerals(!expand100_minerals)\r\n    }\r\n\r\n    const handleSynchronize = () => {\r\n        props.selectedSubChart === CHART_VITAMINS\r\n            ? setSynchronizeVitamins(!synchronizeVitamins)\r\n            : setSynchronizeMinerals(!synchronizeMinerals)\r\n    }\r\n\r\n    const portionType = props.selectedSubChart === CHART_VITAMINS\r\n        ? portionType_vitamins\r\n        : portionType_minerals\r\n\r\n    const renderChartConfigurationForm = () => {\r\n        const expand100 = props.selectedSubChart === CHART_VITAMINS\r\n            ? expand100_vitamins\r\n            : expand100_minerals\r\n        const synchronize = props.selectedSubChart === CHART_VITAMINS\r\n            ? synchronizeVitamins\r\n            : synchronizeMinerals\r\n\r\n        const barChartProps = {\r\n            portionType: portionType,\r\n            expand100: expand100,\r\n            synchronize: synchronize,\r\n            handleRadioButtonClick: handleRadioButtonClick,\r\n            handleExpandCheckboxClick: handleExpandCheckbox,\r\n            handleSynchronize: handleSynchronize\r\n        }\r\n\r\n        return <BarChartConfigurationForm {...barChartProps}/>\r\n    }\r\n\r\n    const nutrientData1 = getNutrientData(props.selectedFoodItem1)\r\n    const nutrientData2 = getNutrientData(props.selectedFoodItem2)\r\n\r\n    let dataSet1 = props.selectedSubChart === CHART_VITAMINS ? nutrientData1.vitaminData : nutrientData1.mineralData\r\n    let dataSet2 = props.selectedSubChart === CHART_VITAMINS ? nutrientData2.vitaminData : nutrientData2.mineralData\r\n\r\n    const synchronize = props.selectedSubChart === CHART_VITAMINS ? synchronizeVitamins : synchronizeMinerals\r\n\r\n    if (synchronize) {\r\n        const overlappingAttributes = getOverlappingValues(dataSet1, dataSet2)\r\n        dataSet1 = nullifyNonOverlappingValues(dataSet1, overlappingAttributes)\r\n        dataSet2 = nullifyNonOverlappingValues(dataSet2, overlappingAttributes)\r\n    }\r\n\r\n    const portion1 = portionType === AMOUNT_PORTION ? props.selectedFoodItem1.portion.amount : 100\r\n    const portion2 = portionType === AMOUNT_PORTION ? props.selectedFoodItem2.portion.amount : 100\r\n\r\n    const maxValue1 = getMaximumValue(dataSet1, portion1, requirementData, applicationContext.userData)\r\n    const maxValue2 = getMaximumValue(dataSet2, portion2, requirementData, applicationContext.userData)\r\n    const maxValue = Math.max(maxValue1, maxValue2)\r\n\r\n    const maxY = synchronize\r\n        ? roundToNextValue(maxValue) : undefined\r\n\r\n    const preConfigVitamins = {\r\n        maxValue: maxY,\r\n        portionType: portionType_vitamins,\r\n        expand100: expand100_vitamins,\r\n        synchronize: synchronizeVitamins\r\n    }\r\n\r\n    const preconfigMinerals = {\r\n        maxValue: maxY,\r\n        portionType: portionType_minerals,\r\n        expand100: expand100_minerals,\r\n        synchronize: synchronizeMinerals\r\n    }\r\n\r\n    const preconfig = props.selectedSubChart === CHART_VITAMINS ? preConfigVitamins : preconfigMinerals\r\n\r\n    const preconfigFoodItem1 = {...preconfig, barChartColor: direct_compare_color1}\r\n    const preconfigFoodItem2 = {...preconfig, barChartColor: direct_compare_color2}\r\n\r\n    return <div className={\"direct-compare-panel\"}>\r\n        <Card>\r\n            <div className={\"d-flex\"} style={{maxHeight: containerHeight}}>\r\n                <VerticalLabel selectedFoodItem={props.selectedFoodItem1}/>\r\n                <MineralVitaminChart selectedSubChart={props.selectedSubChart}\r\n                                     selectedFoodItem={props.selectedFoodItem1}\r\n                                     precalculatedData={dataSet1}\r\n                                     directCompareUse={true} directCompareConfig={preconfigFoodItem1}/>\r\n            </div>\r\n        </Card>\r\n\r\n        <Card>\r\n            <div className={\"d-flex\"} style={{maxHeight: containerHeight}}>\r\n                <VerticalLabel selectedFoodItem={props.selectedFoodItem2}/>\r\n                <MineralVitaminChart selectedSubChart={props.selectedSubChart}\r\n                                     selectedFoodItem={props.selectedFoodItem2}\r\n                                     precalculatedData={dataSet2}\r\n                                     directCompareUse={true} directCompareConfig={preconfigFoodItem2}/>\r\n            </div>\r\n        </Card>\r\n        <Card.Footer>\r\n            {renderChartConfigurationForm()}\r\n        </Card.Footer>\r\n    </div>\r\n\r\n}","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport {initialDirectCompareConfigData} from \"../../config/ApplicationSetting\";\r\nimport {PieChartConfigurationForm} from \"../charthelper/PieChartConfigurationForm\";\r\nimport {Card} from \"react-bootstrap\";\r\nimport BaseDataChart from \"../fooddatapanel/charts/BaseDataChart\";\r\nimport {\r\n    CARBS_DATA_BASE,\r\n    LIPIDS_DATA_BASE,\r\n    TAB_BASE_DATA,\r\n    TAB_CARBS_DATA,\r\n    TAB_LIPIDS_DATA\r\n} from \"../../config/Constants\";\r\nimport LipidsDataChart from \"../fooddatapanel/charts/LipidsDataChart\";\r\nimport SelectedFoodItem from \"../../types/livedata/SelectedFoodItem\";\r\nimport {\r\n    PieChartConfigurationProps,\r\n    PieChartDirectCompareConfig,\r\n    PieChartDirectCompareProp\r\n} from \"../../types/livedata/ChartPropsData\";\r\nimport CarbsDataChart from \"../fooddatapanel/charts/CarbsDataChart\";\r\nimport {\r\n    GeneralChartConfigDirectCompareWithSubCharts,\r\n    GeneralChartConfigWithDetails\r\n} from \"../../types/livedata/ChartConfigData\";\r\nimport {calculateChartContainerHeight} from \"../../service/ChartSizeCalculation\";\r\nimport {useWindowDimension} from \"../../service/WindowDimension\";\r\nimport {VerticalLabel} from \"./VerticalLabel\";\r\n\r\n/**\r\n * Re-usable direct compare chart component for pie-chart data pages (Lipids, Carbs, Base Data)\r\n */\r\nexport function DcPieChart(props: PieChartDirectCompareProp) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const windowSize = useWindowDimension()\r\n\r\n    let initialConfig\r\n    switch (props.dataPage) {\r\n        case TAB_BASE_DATA:\r\n            initialConfig = applicationContext && applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.baseChartConfig\r\n                ? applicationContext?.applicationData.directCompareDataPanel.directCompareConfigChart.baseChartConfig\r\n                : initialDirectCompareConfigData.baseChartConfig\r\n            break\r\n        case TAB_LIPIDS_DATA:\r\n            initialConfig = applicationContext && applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.lipidsChartConfig\r\n                ? applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.lipidsChartConfig\r\n                : initialDirectCompareConfigData.lipidsChartConfig\r\n            break\r\n        case TAB_CARBS_DATA:\r\n            initialConfig = applicationContext && applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.carbsChartConfig\r\n                ? applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.carbsChartConfig\r\n                : initialDirectCompareConfigData.carbsChartConfig\r\n            break\r\n    }\r\n\r\n    const [chartType, setChartType] = useState<string>(initialConfig.chartType)\r\n    const [showLegend, setShowLegend] = useState<boolean>(initialConfig.showLegend)\r\n    const [showDetails, setShowDetails] = useState<boolean>(initialConfig.showDetails)\r\n    const [subChart1, setSubChart1] = useState<string>(initialConfig.subChart1)\r\n    const [subChart2, setSubChart2] = useState<string>(initialConfig.subChart2)\r\n\r\n    const [containerHeight, setContainerHeight] = useState<number>(calculateChartContainerHeight(windowSize, true))\r\n\r\n    useEffect(() => {\r\n        const currentConfig = applicationContext?.applicationData.directCompareDataPanel.directCompareConfigChart\r\n\r\n        if (!currentConfig) {\r\n            return\r\n        }\r\n\r\n        if (props.dataPage === TAB_LIPIDS_DATA || props.dataPage === TAB_CARBS_DATA) {\r\n            const configObject: GeneralChartConfigDirectCompareWithSubCharts = props.dataPage === TAB_LIPIDS_DATA\r\n                ? currentConfig.lipidsChartConfig\r\n                : currentConfig.carbsChartConfig\r\n\r\n            if (chartType !== configObject.chartType || showLegend !== configObject.showLegend\r\n                 || subChart1 !== configObject.subChart1 || subChart2 !== configObject.subChart2) {\r\n                updateChartConfig()\r\n            }\r\n        } else if (props.dataPage === TAB_BASE_DATA) {\r\n            const configObject: GeneralChartConfigWithDetails = currentConfig.baseChartConfig\r\n            if (chartType !== configObject.chartType || showLegend !== configObject.showLegend || showDetails !== configObject?.showDetails) {\r\n                updateChartConfig()\r\n            }\r\n        }\r\n\r\n        setContainerHeight(calculateChartContainerHeight(windowSize, true))\r\n    }, [chartType, showDetails, showLegend, subChart1, subChart2, containerHeight, windowSize.height])\r\n\r\n    if (!applicationContext) {\r\n        return <div/>\r\n    }\r\n\r\n    const updateChartConfig = () => {\r\n        if (applicationContext) {\r\n            let newChartConfig\r\n\r\n            if (props.dataPage === TAB_BASE_DATA) {\r\n                const pieChartConfig: GeneralChartConfigWithDetails = {\r\n                    chartType: chartType,\r\n                    showLegend: showLegend,\r\n                    showDetails: showDetails\r\n                }\r\n\r\n                newChartConfig = {\r\n                    ...applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart,\r\n                    baseChartConfig: pieChartConfig\r\n                }\r\n            } else {\r\n                if (props.dataPage === TAB_LIPIDS_DATA) {\r\n                    newChartConfig = {\r\n                        ...applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart,\r\n                        lipidsChartConfig: {\r\n                            ...applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.lipidsChartConfig,\r\n                            chartType: chartType,\r\n                            showLegend: showLegend,\r\n                            subChart1: subChart1,\r\n                            subChart2: subChart2\r\n                        }\r\n                    }\r\n                } else if (props.dataPage === TAB_CARBS_DATA) {\r\n                    newChartConfig = {\r\n                        ...applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart,\r\n                        carbsChartConfig: {\r\n                            ...applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.carbsChartConfig,\r\n                            chartType: chartType,\r\n                            showLegend: showLegend,\r\n                            subChart1: subChart1,\r\n                            subChart2: subChart2\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (newChartConfig) {\r\n                applicationContext.setDirectCompareData.updateDirectCompareChartConfig(newChartConfig)\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleRadioButtonClick = (event: any): void => {\r\n        const value = event.target.value\r\n        setChartType(value)\r\n    }\r\n\r\n    const handleShowLegendCheckbox = () => {\r\n        setShowLegend(!showLegend)\r\n    }\r\n\r\n    const handleShowDetailsCheckbox = () => {\r\n        setShowDetails(!showDetails)\r\n    }\r\n\r\n    const handleSubchart1Change = (event: any): void => {\r\n        setSubChart1(event.target.value)\r\n    }\r\n\r\n    const handleSubchart2Change = (event: any): void => {\r\n        setSubChart2(event.target.value)\r\n    }\r\n\r\n    const renderChartConfigurationForm = () => {\r\n        const chartProps = getConfigurationProps()\r\n        return <PieChartConfigurationForm key={`Config DirectCompare ${props.dataPage}`} {...chartProps}/>\r\n    }\r\n\r\n    const getConfigurationProps = (): PieChartConfigurationProps => {\r\n        let chartProps: PieChartConfigurationProps = {\r\n            chartType: chartType,\r\n            showLegend: showLegend,\r\n            handleRadioButtonClick: handleRadioButtonClick,\r\n            handleLegendCheckboxClick: handleShowLegendCheckbox,\r\n        }\r\n\r\n        if (props.dataPage === TAB_BASE_DATA) {\r\n            chartProps = {\r\n                ...chartProps,\r\n                detailsCheckboxAvailable: true,\r\n                showDetails: showDetails,\r\n                handleDetailsCheckboxClick: handleShowDetailsCheckbox\r\n            }\r\n        }\r\n\r\n        return chartProps\r\n    }\r\n\r\n\r\n    const getChartComponent = (selectedFoodItem: SelectedFoodItem, index: number) => {\r\n        let preconfig: PieChartDirectCompareConfig = {\r\n            chartType: chartType,\r\n            showLegend: showLegend,\r\n            showDetails: showDetails,\r\n        }\r\n\r\n        if (props.dataPage === TAB_BASE_DATA) {\r\n            return <BaseDataChart key={`${TAB_BASE_DATA} ${index}`} selectedFoodItem={selectedFoodItem}\r\n                                  directCompareUse={true}\r\n                                  directCompareConfig={preconfig}/>\r\n        }\r\n\r\n        if (props.dataPage === TAB_LIPIDS_DATA) {\r\n            const selectedSubChart = applicationContext\r\n                ? index === 1\r\n                    ? applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.lipidsChartConfig.subChart1\r\n                        ? applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.lipidsChartConfig.subChart1\r\n                        : LIPIDS_DATA_BASE\r\n                    : applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.lipidsChartConfig.subChart2\r\n                        ? applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.lipidsChartConfig.subChart2\r\n                        : LIPIDS_DATA_BASE\r\n                : LIPIDS_DATA_BASE\r\n\r\n            preconfig = {\r\n                ...preconfig,\r\n                subChart: selectedSubChart,\r\n                handleSubchartChange: index === 1 ? handleSubchart1Change : handleSubchart2Change,\r\n                chartIndex: index\r\n            }\r\n\r\n            return <LipidsDataChart key={`${TAB_LIPIDS_DATA} ${index}`} selectedFoodItem={selectedFoodItem}\r\n                                    directCompareUse={true}\r\n                                    directCompareConfig={preconfig}/>\r\n        }\r\n\r\n        if (props.dataPage === TAB_CARBS_DATA) {\r\n            const selectedSubChart = applicationContext\r\n                ? index === 1\r\n                    ? applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.carbsChartConfig.subChart1\r\n                        ? applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.carbsChartConfig.subChart1\r\n                        : CARBS_DATA_BASE\r\n                    : applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.carbsChartConfig.subChart2\r\n                        ? applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.carbsChartConfig.subChart2\r\n                        : CARBS_DATA_BASE\r\n                : CARBS_DATA_BASE\r\n\r\n            preconfig = {\r\n                ...preconfig,\r\n                subChart: selectedSubChart,\r\n                chartIndex: index,\r\n                handleSubchartChange: index === 1 ? handleSubchart1Change : handleSubchart2Change\r\n            }\r\n\r\n            return <CarbsDataChart key={`${TAB_CARBS_DATA} ${index}`} selectedFoodItem={selectedFoodItem}\r\n                                   directCompareUse={true}\r\n                                   directCompareConfig={preconfig}/>\r\n        }\r\n    }\r\n\r\n    return <div className={\"direct-compare-panel\"}>\r\n        <Card>\r\n            <div className={\"d-flex\"} style={{maxHeight: containerHeight, marginBottom: \"2vh\"}}\r\n                 key={\"directcompare container\" + containerHeight}>\r\n                <VerticalLabel selectedFoodItem={props.selectedFoodItem1}/>\r\n                {getChartComponent(props.selectedFoodItem1, 1)}\r\n            </div>\r\n        </Card>\r\n\r\n        <Card>\r\n            <div className={\"d-flex\"} style={{maxHeight: containerHeight, marginBottom: \"2vh\"}}\r\n                 key={\"directcompare container\" + containerHeight}>\r\n                <VerticalLabel selectedFoodItem={props.selectedFoodItem2}/>\r\n                {getChartComponent(props.selectedFoodItem2, 2)}\r\n            </div>\r\n        </Card>\r\n        <Card.Footer>\r\n            {renderChartConfigurationForm()}\r\n        </Card.Footer>\r\n    </div>\r\n\r\n}","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport {initialDirectCompareConfigData} from \"../../config/ApplicationSetting\";\r\nimport {BarChartConfigurationForm} from \"../charthelper/BarChartConfigurationForm\";\r\nimport {roundToNextValue} from \"../../service/calculation/MathService\";\r\nimport {direct_compare_color1, direct_compare_color2} from \"../../config/ChartConfig\";\r\nimport {Card} from \"react-bootstrap\";\r\nimport ProteinDataChart from \"../fooddatapanel/charts/ProteinDataChart\";\r\nimport {BarChartDirectCompareConfig, DirectCompareDataPanelProps} from \"../../types/livedata/ChartPropsData\";\r\nimport {useWindowDimension} from \"../../service/WindowDimension\";\r\nimport {calculateChartContainerHeight} from \"../../service/ChartSizeCalculation\";\r\nimport {getNutrientData} from \"../../service/nutrientdata/NutrientDataRetriever\";\r\nimport {\r\n    getMaximumValue,\r\n    getOverlappingValues,\r\n    nullifyNonOverlappingValues\r\n} from \"../../service/calculation/NutrientCalculationService\";\r\nimport {VerticalLabel} from \"./VerticalLabel\";\r\n\r\nexport function DcProteinDataChart(props: DirectCompareDataPanelProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const windowSize = useWindowDimension()\r\n\r\n    const chartConfig = applicationContext\r\n        ? applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart.proteinChartConfig\r\n        : initialDirectCompareConfigData.proteinChartConfig\r\n\r\n    const [portionType, setPortionType] = useState<string>(chartConfig.portionType)\r\n    const [expand100, setExpand100] = useState<boolean>(chartConfig.expand100)\r\n    const [synchronize, setSynchronize] = useState<boolean>(chartConfig.synchronize)\r\n\r\n    const [containerHeight, setContainerHeight] = useState<number>(calculateChartContainerHeight(windowSize, true))\r\n\r\n    useEffect(() => {\r\n        updateChartConfig()\r\n        setContainerHeight(calculateChartContainerHeight(windowSize, true))\r\n    }, [portionType, expand100, synchronize, containerHeight, windowSize.height])\r\n\r\n    if (!applicationContext) {\r\n        return <div/>\r\n    }\r\n\r\n    const updateChartConfig = () => {\r\n        if (applicationContext) {\r\n            const newChartConfig = {\r\n                ...applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart,\r\n                proteinChartConfig: {\r\n                    portionType: portionType,\r\n                    expand100: expand100,\r\n                    synchronize: synchronize\r\n                }\r\n            }\r\n            applicationContext.setDirectCompareData.updateDirectCompareChartConfig(newChartConfig)\r\n        }\r\n    }\r\n\r\n    const requirementData = applicationContext.foodDataCorpus.dietaryRequirements?.proteinRequirementData\r\n    if (!requirementData) {\r\n        return <div/>\r\n    }\r\n\r\n    const handleRadioButtonClick = (event: any): void => {\r\n        const value = event.target.value\r\n        setPortionType(value)\r\n    }\r\n\r\n    const handleExpandCheckbox = () => {\r\n        setExpand100(!expand100)\r\n    }\r\n\r\n    const handleSynchronize = () => {\r\n        setSynchronize(!synchronize)\r\n    }\r\n\r\n    const renderChartConfigurationForm = () => {\r\n        const barChartProps = {\r\n            portionType: portionType,\r\n            expand100: expand100,\r\n            synchronize: synchronize,\r\n            handleRadioButtonClick: handleRadioButtonClick,\r\n            handleExpandCheckboxClick: handleExpandCheckbox,\r\n            handleSynchronize: handleSynchronize\r\n        }\r\n\r\n        return <BarChartConfigurationForm {...barChartProps}/>\r\n    }\r\n\r\n    let dataSet1 = getNutrientData(props.selectedFoodItem1).proteinData\r\n    let dataSet2 = getNutrientData(props.selectedFoodItem2).proteinData\r\n\r\n    if (synchronize) {\r\n        const overlappingAttributes = getOverlappingValues(dataSet1, dataSet2)\r\n        dataSet1 = nullifyNonOverlappingValues(dataSet1, overlappingAttributes)\r\n        dataSet2 = nullifyNonOverlappingValues(dataSet2, overlappingAttributes)\r\n    }\r\n\r\n    const maxValue1 = getMaximumValue(dataSet1, props.selectedFoodItem1.portion.amount, requirementData, applicationContext.userData, true)\r\n    const maxValue2 = getMaximumValue(dataSet2, props.selectedFoodItem2.portion.amount, requirementData, applicationContext.userData, true)\r\n    const maxValue = Math.max(maxValue1, maxValue2)\r\n    const maxY = synchronize ? roundToNextValue(maxValue) : undefined\r\n\r\n    const preconfig: BarChartDirectCompareConfig = {\r\n        maxValue: maxY,\r\n        portionType: portionType,\r\n        expand100: expand100,\r\n        synchronize: synchronize,\r\n        barChartColor: ''\r\n    }\r\n\r\n    const preconfigFoodItem1 = {...preconfig, barChartColor: direct_compare_color1}\r\n    const preconfigFoodItem2 = {...preconfig, barChartColor: direct_compare_color2}\r\n\r\n    return <div className={\"direct-compare-panel\"}>\r\n        <Card>\r\n            <div className={\"d-flex\"} style={{maxHeight: containerHeight}}>\r\n                <VerticalLabel selectedFoodItem={props.selectedFoodItem1}/>\r\n                <ProteinDataChart selectedFoodItem={props.selectedFoodItem1}\r\n                                  precalculatedData={dataSet1}\r\n                                  directCompareUse={true} directCompareConfig={preconfigFoodItem1}/>\r\n            </div>\r\n        </Card>\r\n\r\n        <Card>\r\n            <div className={\"d-flex\"} style={{maxHeight: containerHeight}}>\r\n                <VerticalLabel selectedFoodItem={props.selectedFoodItem2}/>\r\n                <ProteinDataChart selectedFoodItem={props.selectedFoodItem2}\r\n                                  precalculatedData={dataSet2}\r\n                                  directCompareUse={true} directCompareConfig={preconfigFoodItem2}/>\r\n            </div>\r\n        </Card>\r\n        <Card.Footer>\r\n            {renderChartConfigurationForm()}\r\n        </Card.Footer>\r\n    </div>\r\n\r\n}","import {Card} from \"react-bootstrap\";\r\nimport EnergyDataChart from \"../fooddatapanel/charts/EnergyDataChart\";\r\nimport {DirectCompareDataPanelProps} from \"../../types/livedata/ChartPropsData\";\r\nimport {useWindowDimension} from \"../../service/WindowDimension\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {calculateChartContainerHeight} from \"../../service/ChartSizeCalculation\";\r\nimport {VerticalLabel} from \"./VerticalLabel\";\r\n\r\nexport function DcEnergyChart(props: DirectCompareDataPanelProps) {\r\n    const windowSize = useWindowDimension()\r\n    const [containerHeight, setContainerHeight] = useState<number>(calculateChartContainerHeight(windowSize, true))\r\n\r\n    useEffect(() => {\r\n        setContainerHeight(calculateChartContainerHeight(windowSize, true))\r\n    }, [containerHeight, windowSize])\r\n\r\n    return <div className={\"direct-compare-panel\"}>\r\n        <Card>\r\n            <div className={\"d-flex\"} style={{maxHeight: containerHeight, marginBottom: \"2vh\"}}>\r\n                <VerticalLabel selectedFoodItem={props.selectedFoodItem1}/>\r\n                <EnergyDataChart selectedFoodItem={props.selectedFoodItem1} directCompareUse={true}/>\r\n            </div>\r\n        </Card>\r\n\r\n        <Card>\r\n            <div className={\"d-flex\"} style={{maxHeight: containerHeight, marginBottom: \"2vh\"}}>\r\n                <VerticalLabel selectedFoodItem={props.selectedFoodItem2}/>\r\n                <EnergyDataChart selectedFoodItem={props.selectedFoodItem2} directCompareUse={true}/>\r\n            </div>\r\n        </Card>\r\n    </div>\r\n\r\n}","import {ChartMenuPanel} from \"../fooddatapanel/ChartMenuPanel\";\r\nimport {\r\n    CHART_MINERALS,\r\n    CHART_VITAMINS,\r\n    TAB_BASE_DATA,\r\n    TAB_CARBS_DATA,\r\n    TAB_ENERGY_DATA,\r\n    TAB_INFO,\r\n    TAB_LIPIDS_DATA,\r\n    TAB_MINERAL_DATA,\r\n    TAB_PROTEINS_DATA,\r\n    TAB_VITAMIN_DATA\r\n} from \"../../config/Constants\";\r\nimport {useContext} from \"react\";\r\nimport SelectedFoodItem from \"../../types/livedata/SelectedFoodItem\";\r\nimport {DcMineralVitaminChart} from \"./DcMineralVitaminChart\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport {Card} from \"react-bootstrap\";\r\nimport {DcPieChart} from \"./DcPieChart\";\r\nimport {DcProteinDataChart} from \"./DcProteinDataChart\";\r\nimport {DcEnergyChart} from \"./DcEnergyChart\";\r\nimport {getNameFromFoodNameList} from \"../../service/nutrientdata/NameTypeService\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport {DirectCompareDataPanelProps} from \"../../types/livedata/ChartPropsData\";\r\nimport {InfoData} from \"../fooddatapanel/charts/InfoData\";\r\n\r\nexport function DirectCompareDataPanel(props: DirectCompareDataPanelProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const languageContext = useContext(LanguageContext)\r\n\r\n    if (!applicationContext) {\r\n        return <div/>\r\n    }\r\n\r\n    const setDataPage = (datapage: string) => {\r\n        applicationContext.setDirectCompareData.setSelectedDirectCompareDataPage(datapage)\r\n    }\r\n\r\n    const foodNames = applicationContext.foodDataCorpus.foodNames\r\n\r\n    const nameId1 = props.selectedFoodItem1.foodItem.nameId ? props.selectedFoodItem1.foodItem.nameId : null\r\n    const nameId2 = props.selectedFoodItem2.foodItem.nameId ? props.selectedFoodItem2.foodItem.nameId : null\r\n\r\n    const name1 = nameId1 ? getNameFromFoodNameList(foodNames, nameId1, languageContext.language) : \"\"\r\n    const name2 = nameId2 ? getNameFromFoodNameList(foodNames, nameId2, languageContext.language) : \"\"\r\n\r\n    const selectedFoodItem1: SelectedFoodItem = {...props.selectedFoodItem1, resolvedName: name1}\r\n    const selectedFoodItem2: SelectedFoodItem = {...props.selectedFoodItem2, resolvedName: name2}\r\n\r\n    const selectedDataPage = applicationContext.applicationData.directCompareDataPanel.selectedDataPage\r\n\r\n    const renderCharts = () => {\r\n        switch (selectedDataPage) {\r\n            case TAB_BASE_DATA:\r\n                return <DcPieChart key={TAB_BASE_DATA}\r\n                                   selectedFoodItem1={selectedFoodItem1}\r\n                                   selectedFoodItem2={selectedFoodItem2}\r\n                                   dataPage={TAB_BASE_DATA}\r\n                />\r\n            case TAB_ENERGY_DATA:\r\n                return <DcEnergyChart selectedFoodItem1={selectedFoodItem1}\r\n                                      selectedFoodItem2={selectedFoodItem2}\r\n                />\r\n\r\n            case TAB_VITAMIN_DATA:\r\n                return <DcMineralVitaminChart key={TAB_VITAMIN_DATA}\r\n                                              selectedFoodItem1={selectedFoodItem1}\r\n                                              selectedFoodItem2={selectedFoodItem2}\r\n                                              selectedSubChart={CHART_VITAMINS}\r\n                />\r\n            case TAB_MINERAL_DATA:\r\n                return <DcMineralVitaminChart key={TAB_MINERAL_DATA}\r\n                                              selectedFoodItem1={selectedFoodItem1}\r\n                                              selectedFoodItem2={selectedFoodItem2}\r\n                                              selectedSubChart={CHART_MINERALS}\r\n                />\r\n            case TAB_LIPIDS_DATA:\r\n                return <DcPieChart key={TAB_LIPIDS_DATA}\r\n                                   selectedFoodItem1={selectedFoodItem1}\r\n                                   selectedFoodItem2={selectedFoodItem2}\r\n                                   dataPage={TAB_LIPIDS_DATA}\r\n                />\r\n            case TAB_CARBS_DATA:\r\n                return <DcPieChart key={TAB_CARBS_DATA}\r\n                                   selectedFoodItem1={selectedFoodItem1}\r\n                                   selectedFoodItem2={selectedFoodItem2}\r\n                                   dataPage={TAB_CARBS_DATA}\r\n                />\r\n            case TAB_PROTEINS_DATA:\r\n                return <DcProteinDataChart selectedFoodItem1={selectedFoodItem1}\r\n                                           selectedFoodItem2={selectedFoodItem2}\r\n                />\r\n            case TAB_INFO:\r\n                return <div>\r\n                    <Card>\r\n                        <InfoData selectedFoodItem={props.selectedFoodItem1} directCompare={true}/>\r\n                    </Card>\r\n                    <Card>\r\n                        <InfoData selectedFoodItem={props.selectedFoodItem2} directCompare={true}/>\r\n                    </Card>\r\n                </div>\r\n\r\n        }\r\n\r\n        return <div/>\r\n    }\r\n\r\n    return <div>\r\n        <Card.Header>\r\n            <ChartMenuPanel dataPage={selectedDataPage} verticalArrangement={false} setDataPage={setDataPage}/>\r\n        </Card.Header>\r\n        {renderCharts()}\r\n    </div>\r\n\r\n}","import { DirectCompareChartConfigData } from \"../../types/livedata/ChartConfigData\"\r\nimport SelectedFoodItem from \"../../types/livedata/SelectedFoodItem\"\r\nimport { DirectCompareUriData, FoodItemUriData } from \"../../types/livedata/UriData\"\r\nimport { UserData } from \"../../types/livedata/UserData\"\r\nimport { getUpdatedDirectCompareChartConfig, makeChartConfigUriString } from \"./ChartConfigConverter\"\r\nimport {\r\n\tconvertUserDataObjectToString,\r\n\tconvertUserDataStringToObject,\r\n\tgetFoodItemUriData,\r\n\tmakeFoodItemDefaultUri\r\n} from \"./FoodDataPanelUriService\"\r\nimport {prepareUriForParsing} from \"./BaseUriService\";\r\n\r\nexport function makeDirectCompareDataUri(selectedFoodItem1: SelectedFoodItem, selectedFoodItem2: SelectedFoodItem, \r\n\t\tuserData: UserData, selectedDataPage: string, chartConfigData: DirectCompareChartConfigData): string {\r\n\tconst foodItemUriData1 = makeFoodItemUriData(selectedFoodItem1)\r\n\tconst foodItemUriData2 = makeFoodItemUriData(selectedFoodItem2)\r\n\t\r\n\tconst foodItem1DataUri = makeFoodItemDefaultUri(foodItemUriData1)\r\n\tconst foodItem2DataUri = makeFoodItemDefaultUri(foodItemUriData2)\r\n\t\r\n\tconst userDataUri = convertUserDataObjectToString(userData)\r\n\tconst chartConfigUri = makeChartConfigUriString(chartConfigData, selectedDataPage)\r\n\t\r\n\treturn `${foodItem1DataUri};${foodItem2DataUri};${selectedDataPage};${userDataUri};${chartConfigUri}`\r\n}\r\n\r\n\r\nfunction makeFoodItemUriData(selectedFoodItem: SelectedFoodItem): FoodItemUriData {\r\n\treturn {\r\n\t\tfoodItemId: selectedFoodItem.foodItem.id,\r\n\t\tportionData: selectedFoodItem.portion,\r\n\t\tsource: selectedFoodItem.selectedSource,\r\n\t\tcombineData: selectedFoodItem.combineData,\r\n\t\tsupplementData: selectedFoodItem.supplementData\r\n\t}\r\n}\r\n\r\n\r\nexport function parseDirectComparetUri(uri: string, chartConfigData: DirectCompareChartConfigData): DirectCompareUriData | null {\r\n\tconst fragments = prepareUriForParsing(uri).split(\";\")\r\n\tif(fragments.length !== 11) {\r\n\t\treturn null\r\n\t}\r\n\t\r\n\tconst selectedDataPage = fragments[8]\r\n\tconst userData = convertUserDataStringToObject(fragments[9])\r\n\tconst chartConfigString = fragments[10]\r\n\t\r\n\tconst foodItemUriData1 = getFoodItemUriData(fragments)\r\n\tconst remainingFragments = fragments.slice(4)\r\n\tconst foodItemUriData2 = getFoodItemUriData(remainingFragments)\r\n\t\r\n\tif(!userData || !foodItemUriData1 || !foodItemUriData2) {\r\n\t\treturn null\r\n\t}\r\n\t\r\n\tconst newChartConfigData = getUpdatedDirectCompareChartConfig(chartConfigData, chartConfigString, selectedDataPage)\r\n\t\r\n\treturn {\r\n\t\tselectedFoodItem1: foodItemUriData1,\r\n\t\tselectedFoodItem2: foodItemUriData2,\r\n\t\tselectedDataPage: selectedDataPage,\r\n\t\tuserData: userData,\r\n\t\tchartConfigData: newChartConfigData\r\n\t}\r\n\t\r\n}","import {DirectCompareSelector} from \"../foodselector/DirectCompareSelector\";\r\nimport SelectedFoodItem from \"../../types/livedata/SelectedFoodItem\";\r\nimport React, {useContext, useEffect, useState} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport {DirectCompareDataPanel} from \"./DirectCompareDataPanel\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {PATH_DIRECT_COMPARE, QUERYKEY_DATAPANEL_ITEM} from \"../../config/Constants\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport {makeDirectCompareDataUri, parseDirectComparetUri} from \"../../service/uri/DirectCompareUriService\";\r\nimport {checkUserDataValidity, USERDATA_OK} from \"../../service/UserDataService\";\r\n\r\nexport default function DirectCompareContainer() {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const languageContext = useContext(LanguageContext)\r\n    const history = useHistory()\r\n\r\n    const initialFoodItem1 = applicationContext?.applicationData.directCompareDataPanel.selectedFoodItem1\r\n        ? applicationContext?.applicationData.directCompareDataPanel.selectedFoodItem1\r\n        : null\r\n\r\n    const initialFoodItem2 = applicationContext?.applicationData.directCompareDataPanel.selectedFoodItem2\r\n        ? applicationContext?.applicationData.directCompareDataPanel.selectedFoodItem2\r\n        : null\r\n\r\n    const [selectedFoodItem1, setSelectedFoodItem1] = useState<SelectedFoodItem | null>(initialFoodItem1)\r\n    const [selectedFoodItem2, setSelectedFoodItem2] = useState<SelectedFoodItem | null>(initialFoodItem2)\r\n\r\n\tuseEffect(() => {\r\n        buildDataObjectsFromURI()\r\n    }, [applicationContext?.applicationData.directCompareDataPanel])\r\n\r\n\t\r\n    if (applicationContext === null || !applicationContext.ready) {\r\n        return <div/>\r\n    }\r\n\r\n\tconst buildDataObjectsFromURI = () => {\r\n\t\tif(!applicationContext) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t\r\n\t\tif(!selectedFoodItem1 || !selectedFoodItem2) {\t\t\t\r\n\t\t\tcreateDataFromUriQuery()\t\t\r\n\t\t} else {   // Set new URI Query\t\t\r\n\t\t\tupdateUriQuery()\r\n\t\t}\r\n    }\r\n\r\n\tconst chartConfigData = applicationContext.applicationData.directCompareDataPanel.directCompareConfigChart\r\n\r\n\tconst updateUriQuery = () => {\r\n\t\tconst userData = applicationContext.userData\r\n\t\tconst selectedDataPage = applicationContext.applicationData.directCompareDataPanel.selectedDataPage\r\n\r\n\t\tif(selectedFoodItem1 && selectedFoodItem2) {\r\n\t\t\tconst query = makeDirectCompareDataUri(selectedFoodItem1, selectedFoodItem2, userData, selectedDataPage, \r\n\t\t\t\tchartConfigData)\r\n\t\t\t\t\r\n\t\t\thistory.push({\r\n\t\t\t\tpathName: PATH_DIRECT_COMPARE,\r\n\t\t\t\tsearch: `${QUERYKEY_DATAPANEL_ITEM}=${query}`\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\t\r\n\tconst createDataFromUriQuery = () => {\r\n\t\t\tconst queryString = window.location.search.substring(1)\r\n\t\t\tconst equalOperator = queryString.indexOf(\"=\")\r\n            const key = queryString.substring(0, equalOperator)\r\n            const value = queryString.substring(equalOperator+1)\r\n\r\n\t\t\t// Set data from a simple food item (create data from query parameters)\r\n\t\t\tif(key === QUERYKEY_DATAPANEL_ITEM && value.length > 1) {\r\n\t\t\t\tconst uriDataObject = parseDirectComparetUri(value, chartConfigData)\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\tif(uriDataObject) {\r\n\t\t\t\t\tconst foodItem1 = applicationContext.foodDataCorpus.foodItems.find(\r\n\t\t\t\t\t\tfoodItem => foodItem.id === uriDataObject.selectedFoodItem1.foodItemId\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tconst foodItem2 = applicationContext.foodDataCorpus.foodItems.find(\r\n\t\t\t\t\t\tfoodItem => foodItem.id === uriDataObject.selectedFoodItem2.foodItemId\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tif(!foodItem1 || !foodItem2) {\r\n\t\t\t\t\t\treturn\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(checkUserDataValidity(uriDataObject.userData) !== USERDATA_OK) {\r\n\t\t\t\t\t\treturn\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tapplicationContext.setUserData(uriDataObject.userData)\t\r\n\t\t\t\t\tapplicationContext.setDirectCompareData.updateDirectCompareChartConfig(uriDataObject.chartConfigData)\r\n\t\t\t\t\tapplicationContext.setDirectCompareData.setSelectedDirectCompareDataPage(uriDataObject.selectedDataPage)\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst foodClass1 = applicationContext.foodDataCorpus.foodClasses.find(\r\n\t\t\t\t\t\tfoodClass => foodClass.id === foodItem1.foodClass)\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tconst foodClass2 = applicationContext.foodDataCorpus.foodClasses.find(\r\n\t\t\t\t\t\tfoodClass => foodClass.id === foodItem2.foodClass)\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst selectedFoodItem1: SelectedFoodItem = {\r\n\t\t\t\t\t\tid: 1000,\r\n\t\t\t\t\t\tfoodItem: foodItem1,\r\n\t\t\t\t\t\tfoodClass: foodClass1,\r\n\t\t\t\t\t\tportion: uriDataObject.selectedFoodItem1.portionData,\r\n\t\t\t\t\t\tselectedSource: uriDataObject.selectedFoodItem1.source,\r\n\t\t\t\t\t\tcombineData: uriDataObject.selectedFoodItem1.combineData,\r\n\t\t\t\t\t\tsupplementData: uriDataObject.selectedFoodItem1.supplementData\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst selectedFoodItem2: SelectedFoodItem = {\r\n\t\t\t\t\t\tid: 1001,\r\n\t\t\t\t\t\tfoodItem: foodItem2,\r\n\t\t\t\t\t\tfoodClass: foodClass2,\r\n\t\t\t\t\t\tportion: uriDataObject.selectedFoodItem2.portionData,\r\n\t\t\t\t\t\tselectedSource: uriDataObject.selectedFoodItem2.source,\r\n\t\t\t\t\t\tcombineData: uriDataObject.selectedFoodItem2.combineData,\r\n\t\t\t\t\t\tsupplementData: uriDataObject.selectedFoodItem2.supplementData\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tupdateSelectedFoodItems(selectedFoodItem1, selectedFoodItem2)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t}\r\n\r\n\t\r\n\r\n    const updateSelectedFoodItems = (selectedFoodItem1: SelectedFoodItem, selectedFoodItem2: SelectedFoodItem) => {\r\n    \tconst foodClassNameKey1 = selectedFoodItem1.foodClass?.nameKey\r\n\t\tapplicationContext.foodDataCorpus.foodNames.find(entry => entry.id === foodClassNameKey1);\r\n\t\tconst foodClassNameKey2 = selectedFoodItem2.foodClass?.nameKey\r\n\t\tapplicationContext.foodDataCorpus.foodNames.find(entry => entry.id === foodClassNameKey2);\r\n\t\tsetSelectedFoodItem1(selectedFoodItem1)\r\n        setSelectedFoodItem2(selectedFoodItem2)\r\n        applicationContext.setDirectCompareData.setSelectedDirectCompareItems(selectedFoodItem1, selectedFoodItem2)\r\n    }\r\n\r\n    return (\r\n        <div className={\"container-fluid\"}>\r\n            <div className={\"row\"}>\r\n                <div className={\"col-4\"} style={{paddingBottom: \"2vh\"}}>\r\n                    <DirectCompareSelector updateSelectedFoodItems={updateSelectedFoodItems}/>\r\n                </div>\r\n                <div className={\"col-8\"} style={{paddingTop: \"1vh\", paddingLeft: \"3vw\", paddingRight: \"3vw\"}}>\r\n                    {selectedFoodItem1 !== null && selectedFoodItem2 !== null ?\r\n                    <DirectCompareDataPanel selectedFoodItem1={selectedFoodItem1}\r\n                                            selectedFoodItem2={selectedFoodItem2}/>\r\n                        : <div className={\"form-text\"}><i>{applicationStrings.direct_compare_text[languageContext.language]}</i></div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../contexts/ApplicationDataContext\";\r\nimport {LanguageContext} from \"../contexts/LangContext\";\r\nimport {SEX_FEMALE, SEX_MALE} from \"../config/Constants\";\r\nimport {UserData} from \"../types/livedata/UserData\";\r\nimport {\r\n    initialUserDataAge,\r\n    initialUserDataBreastfeeding,\r\n    initialUserDataLeisureSports,\r\n    initialUserDataPregnant,\r\n    initialUserDataSex,\r\n    initialUserDataSize,\r\n    initialUserDataWeight\r\n} from \"../config/ApplicationSetting\";\r\nimport {applicationStrings} from \"../static/labels\";\r\nimport {NotificationManager} from 'react-notifications'\r\nimport 'react-notifications/lib/notifications.css';\r\nimport {Form, FormControl, FormGroup} from \"react-bootstrap\";\r\nimport Select from 'react-select';\r\nimport {getPalCategories, getPalCategory} from \"../service/calculation/EnergyService\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport ReactSelectOption from \"../types/ReactSelectOption\";\r\nimport {isMobileDevice, isSmallScreen, useWindowDimension} from \"../service/WindowDimension\";\r\nimport {\r\n    checkUserDataValidity,\r\n    USERDATA_ERROR_AGE,\r\n    USERDATA_ERROR_SIZE,\r\n    USERDATA_ERROR_WEIGHT\r\n} from \"../service/UserDataService\";\r\nimport {customSelectStyles} from \"../config/UI_Config\";\r\nimport {FaLightbulb} from \"react-icons/fa\";\r\n\r\nexport function UserSettings() {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const languageContext = useContext(LanguageContext)\r\n    const lang = languageContext.language\r\n\r\n    const [age, setAge] = useState<number>(initialUserDataAge)\r\n    const [size, setSize] = useState<number>(initialUserDataSize)\r\n    const [weight, setWeight] = useState<number>(initialUserDataWeight)\r\n    const [sex, setSex] = useState<string>(initialUserDataSex)\r\n    const [pregnant, setPregnant] = useState<boolean>(initialUserDataPregnant)\r\n    const [breastFeeding, setBreastFeeding] = useState<boolean>(initialUserDataBreastfeeding)\r\n    const [palValue, setPalValue] = useState<ReactSelectOption | null>(null)\r\n    const [leisureSport, setLeisureSport] = useState<boolean>(initialUserDataLeisureSports)\r\n\r\n    const windowSize = useWindowDimension()\r\n\r\n    useEffect(() => {\r\n        if (applicationContext) {\r\n            setAge(applicationContext.userData.age)\r\n            setSize(applicationContext.userData.size)\r\n            setWeight(applicationContext.userData.weight)\r\n            setSex(applicationContext.userData.sex)\r\n            setPregnant(applicationContext.userData.pregnant)\r\n            setBreastFeeding(applicationContext.userData.breastFeeding)\r\n            setLeisureSport(applicationContext.userData.leisureSports)\r\n        }\r\n    }, [applicationContext])\r\n\r\n    const changeAge = (event: any) => {\r\n        setAge(event.target.value)\r\n    }\r\n\r\n    const changeSize = (event: any) => {\r\n        setSize(event.target.value)\r\n    }\r\n\r\n    const changeWeight = (event: any) => {\r\n        setWeight(event.target.value)\r\n    }\r\n\r\n    const handleRadioButtonClick = (event: any) => {\r\n        const value = event.target.value;\r\n        const sex = value === SEX_MALE ? SEX_MALE : SEX_FEMALE;\r\n        if (sex === SEX_MALE) {\r\n            setPregnant(false)\r\n            setBreastFeeding(false)\r\n        }\r\n        setSex(sex)\r\n    }\r\n\r\n    const changePregnant = () => {\r\n        setPregnant(!pregnant)\r\n    }\r\n\r\n    const changeBreastFeeding = () => {\r\n        setBreastFeeding(!breastFeeding)\r\n    }\r\n\r\n    const changeAdditionalPalPorts = () => {\r\n        setLeisureSport(!leisureSport)\r\n    }\r\n\r\n    const changePalValue = (value: ReactSelectOption) => {\r\n        setPalValue(value)\r\n    }\r\n\r\n    const submitUserData = () => {\r\n        if (!applicationContext) {\r\n            return\r\n        }\r\n\r\n        const userData: UserData = {\r\n            age: age,\r\n            size: size,\r\n            weight: weight,\r\n            sex: sex,\r\n            pregnant: pregnant,\r\n            breastFeeding: breastFeeding,\r\n            palValue: palValue ? palValue.value : applicationContext.userData.palValue,\r\n            leisureSports: leisureSport,\r\n            initialValues: false\r\n        }\r\n\r\n        const inputOk = checkInputValidity(userData)\r\n\r\n        if (inputOk) {\r\n            applicationContext.setUserData(userData)\r\n            NotificationManager.success(applicationStrings.message_userdata_success[lang])\r\n        }\r\n    }\r\n\r\n\r\n    const checkInputValidity = (userData: UserData) => {\r\n        const validationResult = checkUserDataValidity(userData)\r\n\r\n        if (validationResult === USERDATA_ERROR_AGE) {\r\n            showMessage(applicationStrings.message_userdata_error_age[lang]);\r\n            return false;\r\n        } else if (validationResult === USERDATA_ERROR_SIZE) {\r\n            showMessage(applicationStrings.message_userdata_error_size[lang]);\r\n            return false;\r\n        } else if (validationResult === USERDATA_ERROR_WEIGHT) {\r\n            showMessage(applicationStrings.message_userdata_error_weight[lang]);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    const showMessage = (message: string) => {\r\n        NotificationManager.error(message)\r\n    }\r\n\r\n    const inputClass = isSmallScreen(windowSize) ? \"form-control form-control-sm input-sm\" : \"form-control input\"\r\n\r\n    const renderTextField = (label, value, callback) => {\r\n        return (\r\n            <Form className={\"form-elements\"}>\r\n                <Form.Label>{label}:</Form.Label>\r\n                <FormControl\r\n                    className={inputClass}\r\n                    type=\"text\"\r\n                    value={value}\r\n                    onChange={callback}\r\n                />\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    const renderSexRadioButtons = () => {\r\n        const classRow = isMobileDevice() ? \"form-row-indent-m\" : \"form-row-indent\"\r\n\r\n        return (\r\n            <div className={classRow}>\r\n                <Form.Check type=\"radio\"\r\n                            className=\"form-label\"\r\n                            inline={true}\r\n                            label={applicationStrings.label_userSettings_sex_male[lang]}\r\n                            value={SEX_MALE}\r\n                            checked={(sex === SEX_MALE)}\r\n                            onChange={handleRadioButtonClick}\r\n                />\r\n                <Form.Check type=\"radio\"\r\n                            className=\"form-label\"\r\n                            inline={true}\r\n                            label={applicationStrings.label_userSettings_sex_female[lang]}\r\n                            value={SEX_FEMALE}\r\n                            checked={(sex !== SEX_MALE)}\r\n                            onChange={handleRadioButtonClick}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderFemaleCheckboxes = () => {\r\n        return (\r\n            <div className=\"form\">\r\n                <div>\r\n                    <Form.Check inline className=\"form-radiobutton\"\r\n                                checked={pregnant}\r\n                                disabled={sex === SEX_MALE}\r\n                                label={applicationStrings.label_userSettings_pregnant[lang]}\r\n                                onClick={changePregnant}>\r\n                    </Form.Check>\r\n                </div>\r\n                <div>\r\n                    <Form.Check inline className=\"form-radiobutton\"\r\n                                disabled={sex === SEX_MALE}\r\n                                label={applicationStrings.label_userSettings_breastfeeding[lang]}\r\n                                onClick={changeBreastFeeding}>\r\n                    </Form.Check>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    const renderPalList = (userData: UserData) => {\r\n        const palCategories = getPalCategories(lang);\r\n        if (!palCategories) {\r\n            return <div/>\r\n        }\r\n\r\n        if (!palValue) {   // Initialize pal value first time\r\n            let userDataPalValue = palCategories.find(palObject => palObject.value === userData.palValue)\r\n            if (!userDataPalValue) {\r\n                userDataPalValue = palCategories[0]\r\n            }\r\n            setPalValue(userDataPalValue)\r\n        }\r\n\r\n        if (!palValue) {\r\n            return <div/>\r\n        }\r\n\r\n        const descriptionCode = `palcat_desc_${getPalCategory(palValue.value)}`\r\n        const description = applicationStrings[descriptionCode][lang];\r\n\r\n        return (\r\n            <div>\r\n                <div className={\"usersettings-pal\"}>\r\n                    <label className=\"form-label\">{applicationStrings.label_userSettings_palValue[lang]}:</label>\r\n                    <Select className=\"form-control-sm\"\r\n                            options={palCategories}\r\n                            value={palValue}\r\n                            isSearchable={false}\r\n                            styles={customSelectStyles}\r\n                            onChange={(value) => changePalValue(value)}\r\n                    />\r\n                </div>\r\n                <p className=\"usersettings-pal-text\">\r\n                    {description}\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    const renderActivityCheckboxes = () => {\r\n        return (\r\n            <div className=\"form-row-indent\">\r\n                <label className=\"form-elements\"\r\n                       data-for={\"us-leisure\"}\r\n                       data-tip={applicationStrings.label_userSettings_leisureSports_tooltip[lang]}>\r\n                    <ReactTooltip id={\"us-leisure\"} place={\"right\"}/>\r\n                    <Form.Check inline className=\"form-radiobutton\"\r\n                                label={applicationStrings.label_userSettings_leisureSports[lang]}\r\n                                checked={leisureSport}\r\n                                onChange={changeAdditionalPalPorts}>\r\n                    </Form.Check>\r\n                </label>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const renderSubmitButton = () => {\r\n        return (\r\n            <div className=\"text-center pt-4\">\r\n                <button type=\"button\"\r\n                        className=\"btn btn-primary\"\r\n                        onClick={() => submitUserData()}>\r\n                    {applicationStrings.button_submit[lang]}\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (!applicationContext) {\r\n        return <div/>\r\n    }\r\n\r\n    const value_age = (age != null) ? age : initialUserDataAge\r\n    const value_size = (size != null) ? size : initialUserDataSize\r\n    const value_weight = (weight != null) ? weight : initialUserDataWeight\r\n\r\n    return (\r\n        <div className={\"usersettings-form flex-column\"}>\r\n            <div>\r\n                <FaLightbulb/> <span className={\"form-text\"}>{applicationStrings.label_userSettings_intro[lang]}</span>\r\n            </div>\r\n            <div style={{paddingTop: \"4vh\"}}>\r\n                <div>\r\n                    <FormGroup>\r\n                        <div className={\"d-flex flex-row\"} style={{paddingBottom: \"3vh\"}}>\r\n                            {renderTextField(applicationStrings.label_userSettings_age[lang], value_age, changeAge)}\r\n                            {renderTextField(applicationStrings.label_userSettings_size[lang], value_size, changeSize)}\r\n                            {renderTextField(applicationStrings.label_userSettings_weight[lang], value_weight, changeWeight)}\r\n                        </div>\r\n                        <div className={\"d-flex flex-row align-items-baseline\"}>\r\n                            <Form.Label>\r\n                                {applicationStrings.label_userSettings_sex[lang]}\r\n                            </Form.Label>\r\n                            {renderSexRadioButtons()}\r\n                            {renderFemaleCheckboxes()}\r\n                        </div>\r\n                        <div>\r\n                            {renderPalList(applicationContext.userData)}\r\n                            {renderActivityCheckboxes()}\r\n                        </div>\r\n                    </FormGroup>\r\n                    {renderSubmitButton()}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}","export const MAIL_INVALID_NAME = \"mail invalid name\"\r\nexport const MAIL_NO_CONTENT = \"no content\"\r\nexport const MAIL_CONTENT_TO_LONG = \"content too long\"\r\nexport const MAIL_INVALID_ADDRESS = \"invalid address\"","import {MailData} from \"../types/livedata/MailData\";\r\nimport {\r\n    MAIL_INVALID_ADDRESS,\r\n    MAIL_CONTENT_TO_LONG,\r\n    MAIL_INVALID_NAME,\r\n    MAIL_NO_CONTENT\r\n} from \"../config/ErrorMessageCodes\";\r\nimport {maxMessageCharacters} from \"../config/ApplicationSetting\";\r\n\r\n\r\nconst mailRegex = '(?:[a-z0-9!#$%&\\'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&\\'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\\\])'\r\n\r\nexport function checkMailValidity(mail: MailData): string[] {\r\n    const errors: string[] = []\r\n\r\n    if (!checkName(mail.name)) {\r\n        errors.push(MAIL_INVALID_NAME)\r\n    }\r\n\r\n    if (!checkMailAddress(mail.address)) {\r\n        errors.push(MAIL_INVALID_ADDRESS)\r\n    }\r\n\r\n    if (!checkContent(mail.message)) {\r\n        errors.push(MAIL_NO_CONTENT)\r\n    }\r\n\r\n    if (!checkLength(mail.message)) {\r\n        errors.push(MAIL_CONTENT_TO_LONG)\r\n    }\r\n\r\n    return errors\r\n}\r\n\r\nfunction checkName(name: string): boolean {\r\n    return name.length >= 3 && name.length <= 50\r\n}\r\n\r\nfunction checkContent(content: string): boolean {\r\n    return content.length >= 30\r\n}\r\n\r\nfunction checkLength(content: string): boolean {\r\n    return content.length <= maxMessageCharacters\r\n}\r\n\r\nfunction checkMailAddress(mailAddress: string): boolean {\r\n    return mailAddress.match(mailRegex) !== null\r\n}\r\n","// Google:\r\nexport const ANALYTICS_MESS_ID = 'G-DXHX3Y13KZ'\r\nexport const ADSENSE_TRACKING_ID = 'ca-pub-2335013571820161'\r\nexport const RECAPTCHA_KEY = '6LdVyyMcAAAAACXul89K-Epl2dQu3XOvOo1bTIg3'\r\n\r\n// Emailjs:\r\nexport const SERVICE_ID = 'service_608vcxh'\r\nexport const TEMPLATE_ID = 'template_nledi86'\r\nexport const USER_ID = 'user_8TjzzLK0ZdfUQd7h7cieX'\r\n\r\n","import React, {useContext, useState} from \"react\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport {maxMessageCharacters} from \"../../config/ApplicationSetting\";\r\nimport {MailData} from \"../../types/livedata/MailData\";\r\nimport {checkMailValidity} from \"../../service/MailService\";\r\nimport {NotificationManager} from 'react-notifications'\r\n\r\nimport {\r\n    MAIL_CONTENT_TO_LONG,\r\n    MAIL_INVALID_ADDRESS,\r\n    MAIL_INVALID_NAME,\r\n    MAIL_NO_CONTENT\r\n} from \"../../config/ErrorMessageCodes\";\r\nimport {SERVICE_ID, TEMPLATE_ID, USER_ID} from \"../../config/ApplicationKeys\";\r\nimport emailjs from \"emailjs-com\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\n\r\nexport function ContactForm() {\r\n    const language = useContext(LanguageContext).language\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n\r\n    const [name, setName] = useState(\"\")\r\n    const [mailAddress, setMailAdress] = useState(\"\")\r\n    const [message, setMessage] = useState(\"\")\r\n    const [characters, setCharacters] = useState(0)\r\n\r\n    const updateName = (event) => {\r\n        setName(event.target.value)\r\n    }\r\n\r\n    const updateMailAddress = (event) => {\r\n        setMailAdress(event.target.value)\r\n    }\r\n\r\n    const updateMessage = (event) => {\r\n        setMessage(event.target.value)\r\n        setCharacters(event.target.value.length)\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n\r\n        const mailData: MailData = {\r\n            name: name.trim(),\r\n            address: mailAddress.trim(),\r\n            message: message.trim()\r\n        }\r\n\r\n        const validationErrors = checkMailValidity(mailData)\r\n        if(validationErrors.length > 0) {\r\n            const firstError = validationErrors[0]\r\n            let errorMessage = ''\r\n            switch(firstError) {\r\n                case MAIL_INVALID_NAME:\r\n                    errorMessage = applicationStrings.label_mail_error_name[language]\r\n                    break\r\n                case MAIL_INVALID_ADDRESS:\r\n                    errorMessage = applicationStrings.label_mail_error_mailaddress[language]\r\n                    break\r\n                case MAIL_NO_CONTENT:\r\n                    errorMessage = applicationStrings.label_mail_error_nocontent[language]\r\n                    break\r\n                case MAIL_CONTENT_TO_LONG:\r\n                    errorMessage = applicationStrings.label_mail_error_content_too_long[language]\r\n                    break\r\n            }\r\n\r\n            NotificationManager.error(errorMessage)\r\n            return\r\n        }\r\n\r\n        sendMail(mailData, language)\r\n    }\r\n\r\n    const sendMail = (mail: MailData, language: string) => {\r\n        const options = {\r\n            reply_to: mail.address,\r\n            from_name: mail.name,\r\n            message: mail.message,\r\n        }\r\n\r\n        emailjs.send(SERVICE_ID, TEMPLATE_ID, options, USER_ID)\r\n            .then((result) => {\r\n                NotificationManager.info(applicationStrings.message_email_success[language])\r\n                setName(\"\")\r\n                setMessage(\"\")\r\n                setMailAdress(\"\")\r\n                setCharacters(0)\r\n                if(applicationContext?.debug) {\r\n                    console.log('RESULT FROM EMAIL JS', result)\r\n                }\r\n            }, (error) => {\r\n                if(applicationContext?.debug) {\r\n                    console.log(error.text);\r\n                }\r\n                NotificationManager.info(applicationStrings.message_email_error[language])\r\n            });\r\n    }\r\n\r\n    const charactersLeft = maxMessageCharacters - characters\r\n    const charactersMessage = maxMessageCharacters >= 0\r\n        ? applicationStrings.label_mail_characters_left[language].replace(\"/xx/\", charactersLeft)\r\n        : applicationStrings.label_mail_too_long[language]\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className={\"container\"} style={{paddingBottom: \"30px\"}}>\r\n                <p>{applicationStrings.text_contact_form[language]}</p>\r\n                <div>\r\n                    <span className={'form-label'}>{applicationStrings.label_mail_name[language]}</span>\r\n                    <input className={\"form-control input\"}\r\n                           value={name}\r\n                           onChange={updateName}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <span className={'form-label'}>{applicationStrings.label_mail_address[language]}</span>\r\n                    <input className={\"form-control input\"}\r\n                           value={mailAddress}\r\n                           onChange={updateMailAddress}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <span className={'form-label'}>{applicationStrings.label_mail_message[language]}</span>\r\n                    <textarea className={\"form-control input\"}\r\n                              rows={8}\r\n                              value={message}\r\n                              onChange={updateMessage}\r\n                    />\r\n                </div>\r\n                <div><p style={{fontSize: \"0.8em\"}}>{charactersMessage}</p></div>\r\n                <button className={\"btn btn-primary\"} type=\"submit\">{applicationStrings.button_send[language]}</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}","import {applicationStrings} from \"../../static/labels\";\r\nimport React, {useContext} from \"react\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\n\r\nexport function Sources() {\r\n    const language = useContext(LanguageContext).language\r\n\r\n    return (\r\n        <div className={\"container\"}>\r\n            <h4><b>{applicationStrings.text_contact_source1[language]}</b></h4>\r\n            <h5>{applicationStrings.text_contact_source2[language]}</h5>\r\n            <p>U.S. Department of Agriculture, Agricultural Research Service.<br/>\r\n                FoodData Central, 2021-2023.</p>\r\n            <p>\r\n                Website: <a href={\"https://fdc.nal.usda.gov/\"}>Food Data Central</a>\r\n            </p>\r\n            <h5>{applicationStrings.text_contact_source3[language]}</h5>\r\n            <p>Deutsche Gesellschaft für Ernährung e.V.</p>\r\n            <p>\r\n                Website: <a href={\"https://www.dge.de/\"}>DGE</a>\r\n            </p>\r\n            <h5>{applicationStrings.text_contact_source4[language]}</h5>\r\n            <p>Prakash S. Shetty, Christiani J. K. Henry, Alison E. Black and A. M. Prentice:<br/>\r\n                \"Energy requirements of adults: an update on basal metabolic rates (BMRs) and physical activity\r\n                levels (PALs).\",<br/>\r\n                European journal of clinical nutrition (1996), Volume 50, Suppl 1, pp. 11-23\r\n            </p>\r\n        </div>\r\n    );\r\n\r\n}","import {buildDate, release} from \"../../config/ApplicationSetting\";\r\nimport {isMobileDevice} from \"../../service/WindowDimension\";\r\nimport React from \"react\";\r\n\r\nexport function Versions() {\r\n    return <div className={\"container\"}>\r\n        {isMobileDevice() ?\r\n            <h3>\r\n                Food Compare\r\n            </h3>\r\n            :\r\n            <h1>\r\n                Food Compare\r\n            </h1>\r\n        }\r\n\r\n        <h6>\r\n            Version {release}\r\n        </h6>\r\n        <h6>\r\n            Build time: {buildDate}\r\n        </h6>\r\n\r\n        <p style={{paddingTop: \"24px\"}}>\r\n            <b>Changes in Version {release}</b>\r\n            <ul>\r\n                <li>Overall data view has been added.</li>\r\n                <li>Unit conversion between US weights and gram is now possible in the food selector.</li>\r\n                <li>Improved naming suggestions in the food selector typeahead field.</li>\r\n                <li>Food items in larger food classes (e.g. cheese) are now sorted lexicographically.</li>\r\n                <li>The calculation type of data calculation is now also shown on the info page of a selected food item.</li>\r\n                <li>Fixes: supplementing was sometimes carried out even when the corresponding option was disabled.</li>\r\n                <li>Several display bugs have been fixed.</li>\r\n                <li>Food Compare will no longer supplement data between two data sources of a food item if they differ too much in key\r\n                    parameters.</li>\r\n            </ul>\r\n        </p>\r\n\r\n    </div>\r\n}","export default __webpack_public_path__ + \"static/media/impressum-german.92ba80d6.png\";","export default __webpack_public_path__ + \"static/media/impressum-english.1bd33956.png\";","import React, {useContext} from \"react\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\n\r\nimport impressum_de from '../../static/image/impressum-german.png';\r\nimport impressum_en from '../../static/image/impressum-english.png';\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {LANGUAGE_DE} from \"../../config/Constants\";\r\nimport {isMobileDevice} from \"../../service/WindowDimension\";\r\n\r\nexport function Impressum() {\r\n    const lang = useContext(LanguageContext).language\r\n\r\n    const impressumPath = lang === LANGUAGE_DE ? impressum_de : impressum_en;\r\n    const columnClass = isMobileDevice() ? \"col-10\" : \"col-6\"\r\n\r\n    return (\r\n        <div className={\"container\"} style={{paddingBottom: \"30px\"}}>\r\n            <div className={columnClass}>\r\n                <p>\r\n                    <b>{applicationStrings.text_contact_disclaimer1[lang]}</b>\r\n                </p>\r\n                <p>\r\n                    <i>\r\n                        {applicationStrings.text_contact_disclaimer2[lang]}\r\n                    </i>\r\n                </p>\r\n                <p>\r\n                    <i>\r\n                        {applicationStrings.text_contact_disclaimer3[lang]}\r\n                    </i>\r\n                </p>\r\n            </div>\r\n            <div style={{paddingTop: \"20px\"}}>\r\n                <div style={{height: '180px'}}>\r\n                    <img src={impressumPath} alt={\"Impressumtext\"} style={{height: '180px'}}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React, {useContext} from \"react\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\n\r\nimport dataprivacy from \"../../static/dataprivacy.json\";\r\n\r\nexport function DataPrivacy() {\r\n\r\n    const language = useContext(LanguageContext).language\r\n\r\n    return (\r\n        <div className={\"container\"}>\r\n            <p>\r\n                {dataprivacy[0][language]}\r\n            </p>\r\n            <p>\r\n                {dataprivacy[1][language]}\r\n            </p>\r\n            <p>\r\n                <a href=\"https://www.fastcounter.de/de/privacy/40519.htm\">https://www.fastcounter.de/de/privacy/40519.htm</a>.\r\n            </p>\r\n            <p>\r\n                {dataprivacy[2][language]}\r\n            </p>\r\n            <p>\r\n                <a href=\"https://www.fastcounter.de/datenschutz.html\">https://www.fastcounter.de/datenschutz.html</a>\r\n            </p>\r\n        </div>\r\n    )\r\n\r\n}","import React, {useContext, useState} from \"react\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {ToggleButton, ToggleButtonGroup} from \"react-bootstrap\";\r\nimport {ContactForm} from \"./ContactForm\";\r\nimport {Sources} from \"./Sources\";\r\nimport {Versions} from \"./Versions\";\r\nimport {Impressum} from \"./Impressum\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport {DataPrivacy} from \"./DataPrivacy\";\r\n\r\nexport function ContactContainer() {\r\n    const languageContext = useContext(LanguageContext)\r\n    useContext(ApplicationDataContextStore);\r\n    const menu_contact = 1\r\n    const menu_sources = 2\r\n    const menu_privacy = 3\r\n    const menu_versions = 4\r\n    const menu_impressum = 5\r\n\r\n\r\n    const [selectedMenu, setSelectedMenu] = useState(menu_contact)\r\n    const buttonStyle = {width: \"175px\"}\r\n\r\n    const renderSubMenu = () => {\r\n        switch (selectedMenu) {\r\n            case menu_contact:\r\n                return <ContactForm/>\r\n            case menu_sources:\r\n                return <Sources/>\r\n            case menu_privacy:\r\n                return <DataPrivacy/>\r\n            case menu_versions:\r\n                return <Versions/>\r\n            case menu_impressum:\r\n                return <Impressum/>\r\n            default:\r\n                return <div/>\r\n        }\r\n    }\r\n\r\n    const onChangeSubmenu = (selectedMenu) => {\r\n        setSelectedMenu(selectedMenu)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={\"text-center\"} style={{paddingTop: \"25px\", paddingBottom: \"50px\"}}>\r\n                <ToggleButtonGroup className={\"contact\"}\r\n                                   type={\"radio\"}\r\n                                   name={\"contact menus\"}\r\n                                   defaultValue={menu_contact}>\r\n                    <ToggleButton style={buttonStyle}\r\n                                  value={menu_contact}\r\n                                  checked={selectedMenu === menu_contact}\r\n                                  onChange={() => onChangeSubmenu(menu_contact)}>\r\n                        {applicationStrings.menu_contact[languageContext.language]}\r\n                    </ToggleButton>\r\n                    <ToggleButton style={buttonStyle}\r\n                                  value={menu_sources}\r\n                                  checked={selectedMenu === menu_sources}\r\n                                  onChange={() => onChangeSubmenu(menu_sources)}>\r\n                        {applicationStrings.menu_contact_sources[languageContext.language]}\r\n                    </ToggleButton>\r\n                    <ToggleButton style={buttonStyle}\r\n                                  value={menu_privacy}\r\n                                  checked={selectedMenu === menu_privacy}\r\n                                  onChange={() => onChangeSubmenu(menu_privacy)}>\r\n                        {applicationStrings.menu_contact_dataprivacy[languageContext.language]}\r\n                    </ToggleButton>\r\n                    <ToggleButton style={buttonStyle}\r\n                                  value={menu_versions}\r\n                                  checked={selectedMenu === menu_versions}\r\n                                  onChange={() => onChangeSubmenu(menu_versions)}>\r\n                        {applicationStrings.menu_contact_versions[languageContext.language]}\r\n                    </ToggleButton>\r\n                    <ToggleButton style={buttonStyle}\r\n                                  value={menu_impressum}\r\n                                  checked={selectedMenu === menu_impressum}\r\n                                  onChange={() => onChangeSubmenu(menu_impressum)}>\r\n                        {applicationStrings.menu_contact_impressum[languageContext.language]}\r\n                    </ToggleButton>\r\n                </ToggleButtonGroup>\r\n            </div>\r\n            <div>\r\n                {renderSubMenu()}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport {getCategorySelectList} from \"../../service/nutrientdata/CategoryService\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport {getElementsOfRankingGroup, getNutrientGroups} from \"../../service/RankingService\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {Form} from \"react-bootstrap\";\r\nimport Select from 'react-select';\r\nimport {\r\n    NUTRIENT_MINERAL_INDEX,\r\n    PATH_RANKING,\r\n    QUERYKEY_DATAPANEL_RANKING,\r\n    NUTRIENT_VITAMIN_INDEX\r\n} from \"../../config/Constants\";\r\nimport {makeRankingPanelDataUri, parseRankingPanelDataUri} from \"../../service/uri/RankingPanelUriService\";\r\nimport {RankingPanelData} from \"../../types/livedata/ApplicationData\";\r\nimport {customSelectStyles} from \"../../config/UI_Config\";\r\nimport {FaLightbulb} from \"react-icons/fa\";\r\n\r\ninterface RankingSelectorProps {\r\n    openChart: (selectedCategory, selectedValue, use100gram, transformToDietaryRequirements) => void,\r\n    useHorizontalLayout: boolean,\r\n    numberOfChartItems: number\r\n}\r\n\r\nexport function RankingSelector(props: RankingSelectorProps) {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const {language} = useContext(LanguageContext)\r\n    const history = useHistory()\r\n\r\n    const rankingPanelData = applicationContext?.applicationData.rankingPanelData\r\n\r\n    const initializeState = !!(rankingPanelData && rankingPanelData.selectedFoodCategory\r\n        && rankingPanelData.selectedGroup && rankingPanelData.selectedElement)\r\n\r\n    const [elementsList, setElementsList] = useState<any>()\r\n    const [initialized, setInitialized] = useState<boolean>(initializeState)\r\n\r\n    useEffect(() => {\r\n        if (applicationContext) {\r\n            const newElements = buildElementsList(applicationContext.applicationData.rankingPanelData.selectedGroup)\r\n            setElementsList(newElements)\r\n        }\r\n    }, [applicationContext?.applicationData.rankingPanelData.selectedGroup])\r\n\r\n    useEffect(() => {\r\n        if (selectedFoodCategory && selectedGroup && selectedElement && initialized) {\r\n            updateUriQuery()\r\n            openChart()\r\n        } else if (!initialized) {\r\n            buildRankingPanelPageFromURI()\r\n        }\r\n    }, [applicationContext?.applicationData.rankingPanelData.selectedFoodCategory,\r\n        applicationContext?.applicationData.rankingPanelData.selectedElement,\r\n        applicationContext?.applicationData.rankingPanelData.use100gram,\r\n        applicationContext?.applicationData.rankingPanelData.showDietaryRequirements,\r\n        elementsList\r\n    ])\r\n\r\n    if (!applicationContext) {\r\n        return <div/>\r\n    }\r\n\r\n    const {\r\n        selectedFoodCategory,\r\n        selectedGroup,\r\n        selectedElement,\r\n        use100gram,\r\n        showDietaryRequirements\r\n    } = applicationContext.applicationData.rankingPanelData\r\n\r\n    const buildRankingPanelPageFromURI = () => {\r\n        const queryString = window.location.search.substring(1)\r\n        const equalOperator = queryString.indexOf(\"=\")\r\n        const key = queryString.substring(0, equalOperator)\r\n        const value = queryString.substring(equalOperator + 1)\r\n\r\n        if (key === QUERYKEY_DATAPANEL_RANKING && value.length > 1) {\r\n            const uriData: RankingPanelData | null = parseRankingPanelDataUri(value, applicationContext.foodDataCorpus,\r\n                language)\r\n            if (!uriData) {\r\n                return\r\n            }\r\n\r\n            const {selectedFoodCategory, selectedGroup, selectedElement} = uriData\r\n            if (selectedFoodCategory === null || selectedGroup === null || selectedElement === null) {\r\n                return\r\n            } else {   // Set new URI Query\r\n                applicationContext.setRankingPanelData(uriData)\r\n                openChart()\r\n                setInitialized(true)\r\n            }\r\n        }\r\n    }\r\n\r\n    const updateUriQuery = () => {\r\n        const query = makeRankingPanelDataUri(applicationContext.applicationData.rankingPanelData)\r\n\r\n        history.push({\r\n            pathName: PATH_RANKING,\r\n            search: `${QUERYKEY_DATAPANEL_RANKING}=${query}`\r\n        })\r\n    }\r\n\r\n    const handleFoodCategoryChange = (selectedOption) => {\r\n        const newRankingData = {\r\n            ...applicationContext.applicationData.rankingPanelData,\r\n            selectedFoodCategory: selectedOption\r\n        }\r\n\r\n        applicationContext.setRankingPanelData(newRankingData)\r\n    }\r\n\r\n    const handleGroupChange = (selectedOption) => {\r\n        setInitialized(true)\r\n        const newRankingData = {\r\n            ...applicationContext.applicationData.rankingPanelData,\r\n            selectedGroup: selectedOption,\r\n            selectedElement: null\r\n        }\r\n        applicationContext.setRankingPanelData(newRankingData)\r\n        props.openChart(null, null, false, false);\r\n    }\r\n\r\n    const handleValueChange = (selectedOption) => {\r\n        const newRankingData = {\r\n            ...applicationContext.applicationData.rankingPanelData,\r\n            selectedElement: selectedOption\r\n        }\r\n\r\n        applicationContext.setRankingPanelData(newRankingData)\r\n    }\r\n\r\n    const handlePortionAmountChange = () => {\r\n        const newRankingData = {\r\n            ...applicationContext.applicationData.rankingPanelData,\r\n            use100gram: !use100gram\r\n        }\r\n        applicationContext.setRankingPanelData(newRankingData)\r\n    }\r\n\r\n    const handleDietaryRequirementsCheckbox = () => {\r\n        const newRankingData = {\r\n            ...applicationContext.applicationData.rankingPanelData,\r\n            showDietaryRequirements: !showDietaryRequirements\r\n        }\r\n        applicationContext.setRankingPanelData(newRankingData)\r\n    }\r\n\r\n    const getFoodCategoryList = () => {\r\n        return getCategorySelectList(applicationContext.foodDataCorpus.categories, language)\r\n    }\r\n\r\n    const buildElementsList = (selectedGroup) => {\r\n        if (!selectedGroup) {\r\n            return;\r\n        }\r\n\r\n        return getElementsOfRankingGroup(selectedGroup.value, language)\r\n    }\r\n\r\n    const openChart = () => {\r\n        if (!selectedFoodCategory || !selectedGroup || !selectedElement) {\r\n            return\r\n        }\r\n\r\n        const rankingCategory = selectedGroup ? selectedGroup.value : null\r\n        const mineralOrVitaminCategory = (rankingCategory === NUTRIENT_VITAMIN_INDEX)\r\n            || (rankingCategory === NUTRIENT_MINERAL_INDEX);\r\n        const transformToDietaryRequirements = mineralOrVitaminCategory ? showDietaryRequirements : false;\r\n\r\n        props.openChart(selectedFoodCategory, selectedElement, use100gram, transformToDietaryRequirements);\r\n    }\r\n\r\n    const renderPortionForm = () => {\r\n        const rankingCategory = selectedGroup ? selectedGroup.value : null;\r\n\r\n        return (\r\n            <div className=\"column select-menu\" style={{paddingLeft: \"20px\", paddingTop: \"10px\"}}>\r\n                <form className=\"form-inline form-group\">\r\n                    <label className=\"form-elements form-label\">\r\n                        <input className={\"form-input\"}\r\n                               type=\"radio\"\r\n                               checked={(use100gram)}\r\n                               onChange={handlePortionAmountChange}\r\n                        />\r\n                        100 g\r\n                    </label>\r\n                    <label className=\"form-elements-largespace form-label\">\r\n                        <input className={\"form-input\"}\r\n                               type=\"radio\"\r\n                               checked={!use100gram}\r\n                               onChange={handlePortionAmountChange}\r\n                        />\r\n                        {applicationStrings.label_portion_common[language]}\r\n                    </label>\r\n                    {(rankingCategory === NUTRIENT_VITAMIN_INDEX || rankingCategory === NUTRIENT_MINERAL_INDEX) &&\r\n                    <Form.Label className=\"form-elements\">\r\n                        <Form.Check className=\"form-radiobutton\"\r\n                                    inline={true}\r\n                                    label={applicationStrings.label_ranking_dietaryRequirements[language]}\r\n                                    defaultChecked={showDietaryRequirements}\r\n                                    onClick={handleDietaryRequirementsCheckbox}>\r\n                        </Form.Check>\r\n                    </Form.Label>\r\n                    }\r\n                </form>\r\n                {props.numberOfChartItems > 100 &&\r\n                <div style={{paddingTop: \"20px\"}}>\r\n                    <FaLightbulb/> <span className={\"form-text\"}>{applicationStrings.ranking_note[language]}</span>\r\n                </div>\r\n                }\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n    const nutrientGroups = getNutrientGroups(language);\r\n\r\n    const containerClass = props.useHorizontalLayout ? \"container row\" : \"container\"\r\n    const selectorClass = props.useHorizontalLayout\r\n        ? \"col-4 select-menu form-section\"\r\n        : \"column select-menu form-section\"\r\n\r\n    return (\r\n        <div className={containerClass}>\r\n            <div className={selectorClass}>\r\n                <span className={\"form-label\"}>{applicationStrings.label_category[language]}:</span>\r\n                <Select className=\"form-control-sm\"\r\n                        options={getFoodCategoryList()}\r\n                        value={selectedFoodCategory}\r\n                        styles={customSelectStyles}\r\n                        onChange={handleFoodCategoryChange}\r\n                />\r\n            </div>\r\n            <div className={selectorClass}>\r\n                <span className={\"form-label\"}>{applicationStrings.label_group[language]}:</span>\r\n                <Select className=\"form-control-sm\"\r\n                        options={nutrientGroups}\r\n                        value={selectedGroup}\r\n                        styles={customSelectStyles}\r\n                        onChange={handleGroupChange}\r\n                />\r\n            </div>\r\n            <div className={selectorClass}>\r\n                <span className={\"form-label\"}>{applicationStrings.label_value[language]}:</span>\r\n                <Select className=\"form-control-sm\"\r\n                        options={elementsList}\r\n                        value={selectedElement}\r\n                        styles={customSelectStyles}\r\n                        onChange={handleValueChange}\r\n                />\r\n            </div>\r\n            {renderPortionForm()}\r\n        </div>\r\n    )\r\n\r\n}","import {RankingPanelData} from \"../../types/livedata/ApplicationData\";\r\nimport {getCategorySelectList} from \"../nutrientdata/CategoryService\";\r\nimport FoodDataCorpus from \"../../types/nutrientdata/FoodDataCorpus\";\r\nimport {getElementsOfRankingGroup, getNutrientGroups} from \"../RankingService\";\r\nimport {prepareUriForParsing} from \"./BaseUriService\";\r\n\r\nexport function makeRankingPanelDataUri(rankingPanelData: RankingPanelData) {\r\n    const selectedCategory = rankingPanelData.selectedFoodCategory?.value\r\n    const selectedGroup = rankingPanelData.selectedGroup?.value\r\n    const selectedElement = rankingPanelData.selectedElement?.value\r\n\r\n    const use100gram = rankingPanelData.use100gram ? \"1\" : \"0\"\r\n    const showDailyRequirements = rankingPanelData.showDietaryRequirements ? \"1\" : \"0\"\r\n\r\n    return `${selectedCategory};${selectedGroup};${selectedElement};${use100gram}${showDailyRequirements}`\r\n}\r\n\r\nexport function parseRankingPanelDataUri(uri: string, foodDataCorpus: FoodDataCorpus, language: string): RankingPanelData | null {\r\n    const fragments = prepareUriForParsing(uri).split(\";\")\r\n    if(fragments.length !== 4) {\r\n        return null\r\n    }\r\n\r\n    if(fragments[3].length !== 2) {\r\n        return null\r\n    }\r\n\r\n    const selectedCategory = parseInt(fragments[0])\r\n    const selectedGroup = parseInt(fragments[1])\r\n    const selectedElement = fragments[2]\r\n\r\n    const foodCategories = getCategorySelectList(foodDataCorpus.categories, language)\r\n    const groups = getNutrientGroups(language)\r\n    const elements = getElementsOfRankingGroup(selectedGroup, language)\r\n\r\n    const selectedFoodCategoryOption = foodCategories.find(foodCategory => foodCategory.value === selectedCategory)\r\n    const selectedGroupOption = groups.find(group => group.value === selectedGroup)\r\n    const selectedElementOption: any = elements ? elements.find(element => element.value === selectedElement) : null\r\n\r\n    const use100g = fragments[3].substring(0, 1) !== \"0\"\r\n    const showDietaryRequirements = fragments[3].substring(1, 2) !== \"0\"\r\n\r\n    if(selectedFoodCategoryOption && selectedGroupOption && selectedElementOption) {\r\n        return {\r\n            selectedFoodCategory: selectedFoodCategoryOption,\r\n            selectedGroup: selectedGroupOption,\r\n            selectedElement: selectedElementOption,\r\n            use100gram: use100g,\r\n            showDietaryRequirements: showDietaryRequirements\r\n        }\r\n    } else {\r\n        return null\r\n    }\r\n}","import {ChartItem} from \"../../service/RankingService\";\r\nimport {useContext} from \"react\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport {color_green} from \"../../config/ChartConfig\";\r\nimport {getBarChartOptionsForRanking} from \"../../service/ChartConfigurationService\";\r\nimport {Bar} from \"react-chartjs-2\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {isMobileDevice} from \"../../service/WindowDimension\";\r\n\r\ninterface RankingChartProps {\r\n    chartItems: Array<ChartItem>\r\n    unit: string\r\n    selectedElement: string\r\n}\r\n\r\nexport function RankingChart(props: RankingChartProps) {\r\n    const {language} = useContext(LanguageContext)\r\n\r\n    const createChartData = () => {\r\n        const labels: Array<String> = [];\r\n        const data: Array<number> = [];\r\n\r\n        for (let i = 0; i < props.chartItems.length; i++) {\r\n            const chartItem = props.chartItems[i];\r\n\r\n            const name = chartItem.name\r\n            labels.push(name);\r\n            data.push(chartItem.value);\r\n        }\r\n\r\n        return {\r\n            labels: labels,\r\n            datasets: [{\r\n                data: data,\r\n                backgroundColor: color_green,\r\n                borderWidth: 2,\r\n                borderColor: '#555',\r\n            }]\r\n        };\r\n    }\r\n\r\n\r\n    const getOptions = () => {\r\n        let options = getBarChartOptionsForRanking(props.selectedElement, props.unit)\r\n        const unit = props.unit !== \"%\" ? props.unit : applicationStrings.label_requirement_chart[language]\r\n        options = {\r\n            ...options, plugins: {\r\n                ...options.plugins, title: {\r\n                    ...options.plugins.title,\r\n                    position: \"left\",\r\n                    align: \"center\",\r\n                    text: unit,\r\n                    padding: {\r\n                        bottom: \"20\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return options\r\n    }\r\n\r\n\r\n    const chartData: any = createChartData();\r\n    const options = getOptions();\r\n    const dataAvailable = chartData.datasets.length > 0 && chartData.datasets[0].data.length > 0;\r\n\r\n    const width = isMobileDevice()\r\n        ? 40 * props.chartItems.length + 150\r\n        : 50 * props.chartItems.length + 150\r\n\r\n    let containerStyle: any = {\r\n        position: \"relative\",\r\n        width: `${width}px`,\r\n        height: \"60vh\"\r\n    }\r\n\r\n    if (isMobileDevice()) {\r\n        containerStyle.height = `90vh`\r\n    }\r\n\r\n    const chartClass = isMobileDevice() ? \"ranking-chart-m\" : \"ranking-chart\";\r\n\r\n    return (\r\n        <div>\r\n            <p className={\"form-text\"} style={{fontWeight: \"bold\"}}>{props.selectedElement}</p>\r\n            <div className={`smooth-scroll ${chartClass}`}>\r\n                {dataAvailable ?\r\n                    <div style={containerStyle}>\r\n                        <Bar id=\"chart\"\r\n                             data={chartData}\r\n                             options={options}\r\n                        />\r\n                    </div>\r\n                    :\r\n                    <div>{applicationStrings.label_noData[language]}</div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React, {useContext, useState} from \"react\";\r\nimport {ApplicationDataContextStore} from \"../../contexts/ApplicationDataContext\";\r\nimport {LanguageContext} from \"../../contexts/LangContext\";\r\nimport {ChartItem, getOrderedFoodList} from \"../../service/RankingService\";\r\nimport {convertAbsoluteValueToDailyRequirement} from \"../../service/calculation/DietaryRequirementService\";\r\nimport {applicationStrings} from \"../../static/labels\";\r\nimport {RankingSelector} from \"./RankingSelector\";\r\nimport {RankingChart} from \"./RankingChart\";\r\nimport {maxElementsInRankingChart} from \"../../config/ApplicationSetting\";\r\nimport ReactSelectOption from \"../../types/ReactSelectOption\";\r\nimport {isMobileDevice} from \"../../service/WindowDimension\";\r\nimport {getUnit} from \"../../service/calculation/NutrientCalculationService\";\r\n\r\nexport function RankingContainer() {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const {language} = useContext(LanguageContext)\r\n\r\n    const [chartItems, setChartItems] = useState<Array<ChartItem>>([])\r\n    const [unit, setUnit] = useState<string>(\"g\")\r\n    const [selectedValue, setSelectedValue] = useState<ReactSelectOption | null>(null)\r\n\r\n    if (!applicationContext) {\r\n        return <div/>\r\n    }\r\n\r\n    const openChart = (selectedCategory, selectedValue, use100gram, transformToDietaryRequirements) => {\r\n        if (!selectedValue) {\r\n            setChartItems([])\r\n            return\r\n        }\r\n\r\n        let category = 0;\r\n        if (selectedCategory) {\r\n            category = selectedCategory.value;\r\n        }\r\n\r\n        setSelectedValue(selectedValue)\r\n        const {foodItems, foodClasses, dietaryRequirements} = applicationContext.foodDataCorpus\r\n        const userData = applicationContext.userData\r\n\r\n        let orderedChartItems = getOrderedFoodList(foodItems, foodClasses, category,\r\n            selectedValue.value, use100gram, language, applicationContext?.foodDataCorpus.foodNames,\r\n            applicationContext?.foodDataCorpus.conditions);\r\n\r\n        if (transformToDietaryRequirements && dietaryRequirements) {\r\n            for (let i = 0; i < orderedChartItems.length; i++) {\r\n                orderedChartItems[i].value = convertAbsoluteValueToDailyRequirement(\r\n                    dietaryRequirements,\r\n                    selectedValue.value,\r\n                    orderedChartItems[i].value,\r\n                    userData\r\n                );\r\n            }\r\n        }\r\n\r\n        const unit = getUnit(selectedValue.value, transformToDietaryRequirements)\r\n\r\n        if (orderedChartItems.length > maxElementsInRankingChart) {\r\n            orderedChartItems = orderedChartItems.slice(0, maxElementsInRankingChart + 1)\r\n        }\r\n\r\n        setChartItems(orderedChartItems)\r\n        setUnit(unit)\r\n    }\r\n\r\n    const renderHelpText = () => {\r\n        const helpText = applicationStrings.text_ranking[language];\r\n\r\n        return (\r\n            <div className=\"col-md-6 col-lg-5 infotextMenus\" style={{padding: \"24px\"}}>\r\n                <i>{helpText}</i>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const renderEmptyDatapage = () => {\r\n        return (\r\n            <span>\r\n                {selectedValue === null ?\r\n                    <div>{renderHelpText()}</div>\r\n                    :\r\n                    <p>{applicationStrings.label_noData[language]}</p>\r\n                }\r\n            </span>\r\n        )\r\n    }\r\n\r\n    const numberOfChartItems = chartItems ? chartItems.length : 0;\r\n\r\n    // Note: The chart will only be displayed if at least 2 (!) items are in the result set.\r\n\r\n    const renderWebsite = () => (\r\n        <div className=\"container-fluid\" style={{paddingTop: \"24px\"}}>\r\n            <div className=\"row\">\r\n                <div className=\"col-3\">\r\n                    <RankingSelector openChart={openChart}\r\n                                     useHorizontalLayout={false}\r\n                                     numberOfChartItems={numberOfChartItems}/>\r\n                </div>\r\n                <div className=\"col-9\">\r\n                    {chartItems && chartItems.length > 1 ?\r\n                        <RankingChart chartItems={chartItems}\r\n                                      unit={unit}\r\n                                      selectedElement={selectedValue ? selectedValue.label : \"\"}/>\r\n                        :\r\n                        <div>{renderEmptyDatapage()}</div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    const renderMobile = () => {\r\n        return (\r\n            <div className=\"container-fluid\" style={{paddingTop: \"24px\"}}>\r\n                <div>\r\n                    <RankingSelector openChart={openChart}\r\n                                     useHorizontalLayout={isMobileDevice()}\r\n                                     numberOfChartItems={numberOfChartItems}\r\n                    />\r\n                </div>\r\n                <hr/>\r\n                {chartItems && chartItems.length > 0 ?\r\n                    <RankingChart chartItems={chartItems}\r\n                                  unit={unit}\r\n                                  selectedElement={selectedValue ? selectedValue.label : \"\"}/>\r\n                    :\r\n                    <div>{renderEmptyDatapage()}</div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return isMobileDevice() ? renderMobile() : renderWebsite()\r\n}","import React, {useContext} from \"react\";\r\nimport {LanguageContext} from \"../contexts/LangContext\";\r\nimport {applicationStrings} from \"../static/labels\";\r\n\r\nimport homeText3 from \"../static/hometext3.json\";\r\nimport {LANGUAGE_DE, PATH_HOME} from \"../config/Constants\";\r\nimport {isMobileDevice} from \"../service/WindowDimension\";\r\nimport {FaAngleDoubleRight} from \"react-icons/fa\";\r\nimport {useHistory} from 'react-router-dom';\r\n\r\ninterface HomeTextElement {\r\n    type: string\r\n    de: string\r\n    en: string\r\n}\r\n\r\ninterface HomeTextParagraph {\r\n    id: string,\r\n    img: string,\r\n    text: HomeTextElement[]\r\n}\r\n\r\n/**\r\n * Site displaying general information about food compare\r\n */\r\nexport function InfoContainer() {\r\n    const {language} = useContext(LanguageContext)\r\n    const history = useHistory()\r\n\r\n    const introImages = require.context('../static/image/intro-screens', true);\r\n\r\n    const renderTextElement = (textElement: HomeTextElement, index: number): JSX.Element => {\r\n        const text = language === LANGUAGE_DE ? textElement.de : textElement.en\r\n\r\n        switch (textElement.type) {\r\n            case \"paragraph\":\r\n                return <p key={`homeitem ${index}`}>{text}</p>\r\n            case \"subheading\":\r\n                return (\r\n                    <div key={`homeitem ${index}`}>\r\n                        <br/>\r\n                        <h4>\r\n                            {text}\r\n                        </h4>\r\n                        <hr/>\r\n                    </div>\r\n                )\r\n            case \"paragraph-before-itemization\":\r\n                return <p key={`homeitem ${index}`}><b>{text}</b></p>\r\n            case \"fancy-item\":\r\n                return (\r\n                    <div key={`homeitem ${index}`}>\r\n                        {!isMobileDevice()\r\n                            ? <span style={{paddingLeft: \"10px\", paddingRight: \"10px\"}}>\r\n                                    <FaAngleDoubleRight/>\r\n                                </span>\r\n                            : <span>\r\n                                    <FaAngleDoubleRight/>\r\n                            </span>\r\n                        }\r\n                        {text}\r\n                    </div>\r\n                )\r\n            default:\r\n                return <p>{text}</p>\r\n        }\r\n    }\r\n\r\n    const renderHomeText = (textElements: HomeTextParagraph[]): any => {\r\n        const renderImage = (index) => {\r\n            const imageSrc = introImages(`./img-${index + 1}-${language}.png`).default;\r\n            return <div className={\"d-flex justify-content-center\"}>\r\n                <img src={imageSrc} style={{width: \"90%\", margin: \"auto\", maxHeight: \"100%\"}}\r\n                     alt={`Intro Image ${index}`}/>\r\n            </div>\r\n        }\r\n\r\n        return textElements.map((textParagraph, index) => {\r\n            if (isMobileDevice()) {\r\n                if (index === 1) {   // Do not show information about features not provided on mobile devices\r\n                    return <></>\r\n                }\r\n\r\n                return <div style={{paddingBottom: \"5vh\"}}\r\n                            key={`home-text-${textParagraph.id}`}>\r\n                    <div>{textParagraph.text.map((text, index) => renderTextElement(text, index))}</div>\r\n                    <div className={\"d-flex align-items-center justify-content-center\"}>{renderImage(index)}</div>\r\n                </div>\r\n            }\r\n\r\n            return <div className={\"d-flex flex-row\"} style={{paddingBottom: \"15vh\"}}\r\n                        key={`home-text-${textParagraph.id}`}>\r\n                <div className={\"w-50 pr-3\"}>\r\n                    {index % 2 === 0 ?\r\n                        <div className={\"d-flex align-items-center justify-content-center\"}\r\n                             style={{height: \"100%\"}}>{renderImage(index)}</div>\r\n                        :\r\n                        <div>{textParagraph.text.map((text, index) => renderTextElement(text, index))}</div>\r\n                    }\r\n                </div>\r\n                <div className={\"w-50 pl-3\"}>\r\n                    {index % 2 === 1 ?\r\n                        <div className={\"d-flex align-items-center justify-content-center\"}\r\n                             style={{height: \"100%\"}}>{renderImage(index)}</div>\r\n                        :\r\n                        <div>{textParagraph.text.map((text, index) => renderTextElement(text, index))}</div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        })\r\n    }\r\n\r\n    const gotoHomePage = () => {\r\n        history.push(PATH_HOME);\r\n    }\r\n\r\n    return <div style={{paddingTop: \"5vh\", paddingBottom: \"5vh\", paddingLeft: \"2vw\"}}>\r\n        <div>\r\n            <h3>{applicationStrings.home_foodcompare_overview[language]}</h3>\r\n        </div>\r\n        <div className=\"container-fluid\" style={{maxWidth: \"1600px\"}}>\r\n            <div style={{paddingBottom: \"20px\", marginBottom: \"50px\", marginTop: \"5vh\"}}>\r\n                {renderHomeText(homeText3)}\r\n            </div>\r\n        </div>\r\n        <hr/>\r\n        <div className={\"d-flex justify-content-center\"}>\r\n            <button className={\"btn btn-link\"} onClick={() => {\r\n                gotoHomePage()\r\n            }}>{applicationStrings.info_button_back[language]}</button>\r\n        </div>\r\n    </div>\r\n}","import Header from \"./Header\";\r\nimport Switch from \"react-bootstrap/Switch\";\r\nimport {\r\n    PATH_CONTACT,\r\n    PATH_DIRECT_COMPARE,\r\n    PATH_FOODCOMPARE,\r\n    PATH_FOODDATA_PANEL,\r\n    PATH_HOME, PATH_INFO,\r\n    PATH_RANKING,\r\n    PATH_USERSETTINGS\r\n} from \"../config/Constants\";\r\nimport {Home} from \"./Home\";\r\nimport FoodDataPanelContainer from \"./fooddatapanel/FoodDataPanelContainer\";\r\nimport DirectCompareContainer from \"./directcompare/DirectCompareContainer\";\r\nimport {UserSettings} from \"./UserSettings\";\r\nimport {ContactContainer} from \"./contact/ContactContainer\";\r\nimport React, {useContext} from \"react\";\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\r\nimport {ApplicationDataContextStore} from \"../contexts/ApplicationDataContext\";\r\nimport {RankingContainer} from \"./ranking/RankingContainer\";\r\nimport {Chart, ArcElement} from 'chart.js'\r\nimport annotationPlugin from \"chartjs-plugin-annotation\";\r\nimport {InfoContainer} from \"./InfoSiteContainer\";\r\n\r\nexport function WebPageContainer() {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n\r\n    if (!applicationContext) {\r\n        return <div/>\r\n    }\r\n\r\n    // Registering requires some time and should only be performed when the real site is loaded.\r\n    if(applicationContext.debug) {\r\n        console.log('Start annotation plugin registration...')\r\n    }\r\n    Chart.register(annotationPlugin)\r\n    Chart.register(ArcElement);\r\n    if(applicationContext.debug) {\r\n        console.log('...done.')\r\n    }\r\n\r\n    if(applicationContext.debug) {\r\n        //require('./../App-debug.scss');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Router>\r\n                    <Header/>\r\n                    <Switch>\r\n                        <Route path={PATH_FOODCOMPARE} component={Home}/>\r\n                        <Route path={PATH_HOME} component={Home}/>\r\n                        <Route path={PATH_FOODDATA_PANEL} component={FoodDataPanelContainer}/>\r\n                        <Route path={PATH_DIRECT_COMPARE} component={DirectCompareContainer}/>\r\n                        <Route path={PATH_RANKING} component={RankingContainer}/>\r\n                        <Route path={PATH_USERSETTINGS} component={UserSettings}/>\r\n                        <Route path={PATH_CONTACT} component={ContactContainer}/>\r\n                        <Route path={PATH_INFO} component={InfoContainer}/>\r\n                        <Route exact path={\"/\"} component={Home}/>\r\n                    </Switch>\r\n                </Router>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React, {useContext} from \"react\";\r\nimport {applicationStrings} from \"../static/labels\";\r\nimport {LanguageContext} from \"../contexts/LangContext\";\r\nimport {ApplicationDataContextStore} from \"../contexts/ApplicationDataContext\";\r\nimport {Button} from \"react-bootstrap\";\r\nimport {isMobileDevice} from \"../service/WindowDimension\";\r\n\r\nexport default function MobileDeviceCheck() {\r\n    const applicationContext = useContext(ApplicationDataContextStore)\r\n    const {language} = useContext(LanguageContext)\r\n\r\n    const setMobileStatus = (status: boolean) => {\r\n        applicationContext?.setMobileUsage(status)\r\n    }\r\n\r\n    const showMobileInformationModal = () => {\r\n        return <div className={\"mobile-device-message\"}>\r\n            <div style={{margin: \"15px\"}}>\r\n                {applicationStrings.device_detection_hint[language]}\r\n            </div>\r\n            <div className={\"d-flex justify-content-center\"}>\r\n                <Button\r\n                    style={{minWidth: \"80px\"}}\r\n                    className=\"primary button-l\"\r\n                    onClick={() => setMobileStatus(false)}>\r\n                    OK\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    return <div>\r\n        {applicationContext?.useAsMobile === null && isMobileDevice() &&\r\n        < div>\r\n            {showMobileInformationModal()}\r\n        </div>\r\n        }\r\n    </div>\r\n\r\n}","import './App.scss';\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.min.js\";\r\nimport {NotificationContainer} from 'react-notifications'\r\nimport ApplicationDataContextProvider from \"./contexts/ApplicationDataContext\";\r\nimport React, {useEffect} from \"react\";\r\n\r\nimport {LanguageProvider} from \"./contexts/LangContext\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nimport {WebPageContainer} from \"./components/WebPageContainer\";\r\nimport MobileDeviceCheck from \"./components/MobileDeviceCheck\";\r\n\r\n\r\nfunction App(): JSX.Element {\r\n    useEffect(() => {\r\n        ReactTooltip.rebuild()\r\n    })\r\n\r\n    return (\r\n        <div id=\"root\" className=\"App debug\">\r\n            <NotificationContainer/>\r\n            <LanguageProvider>\r\n                <ApplicationDataContextProvider>\r\n                    <MobileDeviceCheck/>\r\n                    <WebPageContainer/>\r\n                </ApplicationDataContextProvider>\r\n            </LanguageProvider>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport {hydrate, render} from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\n/* if (rootElement && rootElement.hasChildNodes()) {\r\n    hydrate(<div><App/></div>, rootElement);\r\n} else {\r\n    render(\r\n        <div><App/></div>, rootElement);\r\n} */\r\n\r\nrender(<div><App/></div>, rootElement);\r\n\r\n\r\n// reportWebVitals();\r\n\r\n\r\n"],"sourceRoot":""}